{"ast":null,"code":"import { isPlainObject } from 'is-plain-object';\nimport { createDraft, finishDraft, isDraft, produce } from 'immer';\nvar PathRef = {\n  transform(ref, op) {\n    var {\n      current,\n      affinity\n    } = ref;\n    if (current == null) {\n      return;\n    }\n    var path = Path.transform(current, op, {\n      affinity\n    });\n    ref.current = path;\n    if (path == null) {\n      ref.unref();\n    }\n  }\n};\nvar PointRef = {\n  transform(ref, op) {\n    var {\n      current,\n      affinity\n    } = ref;\n    if (current == null) {\n      return;\n    }\n    var point = Point.transform(current, op, {\n      affinity\n    });\n    ref.current = point;\n    if (point == null) {\n      ref.unref();\n    }\n  }\n};\nvar RangeRef = {\n  transform(ref, op) {\n    var {\n      current,\n      affinity\n    } = ref;\n    if (current == null) {\n      return;\n    }\n    var path = Range.transform(current, op, {\n      affinity\n    });\n    ref.current = path;\n    if (path == null) {\n      ref.unref();\n    }\n  }\n};\nvar DIRTY_PATHS = new WeakMap();\nvar DIRTY_PATH_KEYS = new WeakMap();\nvar FLUSHING = new WeakMap();\nvar NORMALIZING = new WeakMap();\nvar PATH_REFS = new WeakMap();\nvar POINT_REFS = new WeakMap();\nvar RANGE_REFS = new WeakMap();\n\n// eslint-disable-next-line no-redeclare\nvar Path = {\n  ancestors(path) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      reverse = false\n    } = options;\n    var paths = Path.levels(path, options);\n    if (reverse) {\n      paths = paths.slice(1);\n    } else {\n      paths = paths.slice(0, -1);\n    }\n    return paths;\n  },\n  common(path, another) {\n    var common = [];\n    for (var i = 0; i < path.length && i < another.length; i++) {\n      var av = path[i];\n      var bv = another[i];\n      if (av !== bv) {\n        break;\n      }\n      common.push(av);\n    }\n    return common;\n  },\n  compare(path, another) {\n    var min = Math.min(path.length, another.length);\n    for (var i = 0; i < min; i++) {\n      if (path[i] < another[i]) return -1;\n      if (path[i] > another[i]) return 1;\n    }\n    return 0;\n  },\n  endsAfter(path, another) {\n    var i = path.length - 1;\n    var as = path.slice(0, i);\n    var bs = another.slice(0, i);\n    var av = path[i];\n    var bv = another[i];\n    return Path.equals(as, bs) && av > bv;\n  },\n  endsAt(path, another) {\n    var i = path.length;\n    var as = path.slice(0, i);\n    var bs = another.slice(0, i);\n    return Path.equals(as, bs);\n  },\n  endsBefore(path, another) {\n    var i = path.length - 1;\n    var as = path.slice(0, i);\n    var bs = another.slice(0, i);\n    var av = path[i];\n    var bv = another[i];\n    return Path.equals(as, bs) && av < bv;\n  },\n  equals(path, another) {\n    return path.length === another.length && path.every((n, i) => n === another[i]);\n  },\n  hasPrevious(path) {\n    return path[path.length - 1] > 0;\n  },\n  isAfter(path, another) {\n    return Path.compare(path, another) === 1;\n  },\n  isAncestor(path, another) {\n    return path.length < another.length && Path.compare(path, another) === 0;\n  },\n  isBefore(path, another) {\n    return Path.compare(path, another) === -1;\n  },\n  isChild(path, another) {\n    return path.length === another.length + 1 && Path.compare(path, another) === 0;\n  },\n  isCommon(path, another) {\n    return path.length <= another.length && Path.compare(path, another) === 0;\n  },\n  isDescendant(path, another) {\n    return path.length > another.length && Path.compare(path, another) === 0;\n  },\n  isParent(path, another) {\n    return path.length + 1 === another.length && Path.compare(path, another) === 0;\n  },\n  isPath(value) {\n    return Array.isArray(value) && (value.length === 0 || typeof value[0] === 'number');\n  },\n  isSibling(path, another) {\n    if (path.length !== another.length) {\n      return false;\n    }\n    var as = path.slice(0, -1);\n    var bs = another.slice(0, -1);\n    var al = path[path.length - 1];\n    var bl = another[another.length - 1];\n    return al !== bl && Path.equals(as, bs);\n  },\n  levels(path) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      reverse = false\n    } = options;\n    var list = [];\n    for (var i = 0; i <= path.length; i++) {\n      list.push(path.slice(0, i));\n    }\n    if (reverse) {\n      list.reverse();\n    }\n    return list;\n  },\n  next(path) {\n    if (path.length === 0) {\n      throw new Error(\"Cannot get the next path of a root path [\".concat(path, \"], because it has no next index.\"));\n    }\n    var last = path[path.length - 1];\n    return path.slice(0, -1).concat(last + 1);\n  },\n  operationCanTransformPath(operation) {\n    switch (operation.type) {\n      case 'insert_node':\n      case 'remove_node':\n      case 'merge_node':\n      case 'split_node':\n      case 'move_node':\n        return true;\n      default:\n        return false;\n    }\n  },\n  parent(path) {\n    if (path.length === 0) {\n      throw new Error(\"Cannot get the parent path of the root path [\".concat(path, \"].\"));\n    }\n    return path.slice(0, -1);\n  },\n  previous(path) {\n    if (path.length === 0) {\n      throw new Error(\"Cannot get the previous path of a root path [\".concat(path, \"], because it has no previous index.\"));\n    }\n    var last = path[path.length - 1];\n    if (last <= 0) {\n      throw new Error(\"Cannot get the previous path of a first child path [\".concat(path, \"] because it would result in a negative index.\"));\n    }\n    return path.slice(0, -1).concat(last - 1);\n  },\n  relative(path, ancestor) {\n    if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {\n      throw new Error(\"Cannot get the relative path of [\".concat(path, \"] inside ancestor [\").concat(ancestor, \"], because it is not above or equal to the path.\"));\n    }\n    return path.slice(ancestor.length);\n  },\n  transform(path, operation) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (!path) return null; // PERF: use destructing instead of immer\n\n    var p = [...path];\n    var {\n      affinity = 'forward'\n    } = options; // PERF: Exit early if the operation is guaranteed not to have an effect.\n\n    if (path.length === 0) {\n      return p;\n    }\n    switch (operation.type) {\n      case 'insert_node':\n        {\n          var {\n            path: op\n          } = operation;\n          if (Path.equals(op, p) || Path.endsBefore(op, p) || Path.isAncestor(op, p)) {\n            p[op.length - 1] += 1;\n          }\n          break;\n        }\n      case 'remove_node':\n        {\n          var {\n            path: _op\n          } = operation;\n          if (Path.equals(_op, p) || Path.isAncestor(_op, p)) {\n            return null;\n          } else if (Path.endsBefore(_op, p)) {\n            p[_op.length - 1] -= 1;\n          }\n          break;\n        }\n      case 'merge_node':\n        {\n          var {\n            path: _op2,\n            position\n          } = operation;\n          if (Path.equals(_op2, p) || Path.endsBefore(_op2, p)) {\n            p[_op2.length - 1] -= 1;\n          } else if (Path.isAncestor(_op2, p)) {\n            p[_op2.length - 1] -= 1;\n            p[_op2.length] += position;\n          }\n          break;\n        }\n      case 'split_node':\n        {\n          var {\n            path: _op3,\n            position: _position\n          } = operation;\n          if (Path.equals(_op3, p)) {\n            if (affinity === 'forward') {\n              p[p.length - 1] += 1;\n            } else if (affinity === 'backward') ;else {\n              return null;\n            }\n          } else if (Path.endsBefore(_op3, p)) {\n            p[_op3.length - 1] += 1;\n          } else if (Path.isAncestor(_op3, p) && path[_op3.length] >= _position) {\n            p[_op3.length - 1] += 1;\n            p[_op3.length] -= _position;\n          }\n          break;\n        }\n      case 'move_node':\n        {\n          var {\n            path: _op4,\n            newPath: onp\n          } = operation; // If the old and new path are the same, it's a no-op.\n\n          if (Path.equals(_op4, onp)) {\n            return p;\n          }\n          if (Path.isAncestor(_op4, p) || Path.equals(_op4, p)) {\n            var copy = onp.slice();\n            if (Path.endsBefore(_op4, onp) && _op4.length < onp.length) {\n              copy[_op4.length - 1] -= 1;\n            }\n            return copy.concat(p.slice(_op4.length));\n          } else if (Path.isSibling(_op4, onp) && (Path.isAncestor(onp, p) || Path.equals(onp, p))) {\n            if (Path.endsBefore(_op4, p)) {\n              p[_op4.length - 1] -= 1;\n            } else {\n              p[_op4.length - 1] += 1;\n            }\n          } else if (Path.endsBefore(onp, p) || Path.equals(onp, p) || Path.isAncestor(onp, p)) {\n            if (Path.endsBefore(_op4, p)) {\n              p[_op4.length - 1] -= 1;\n            }\n            p[onp.length - 1] += 1;\n          } else if (Path.endsBefore(_op4, p)) {\n            if (Path.equals(onp, p)) {\n              p[onp.length - 1] += 1;\n            }\n            p[_op4.length - 1] -= 1;\n          }\n          break;\n        }\n    }\n    return p;\n  }\n};\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction ownKeys$e(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$e(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$e(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$e(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar applyToDraft = (editor, selection, op) => {\n  switch (op.type) {\n    case 'insert_node':\n      {\n        var {\n          path,\n          node\n        } = op;\n        var parent = Node.parent(editor, path);\n        var index = path[path.length - 1];\n        if (index > parent.children.length) {\n          throw new Error(\"Cannot apply an \\\"insert_node\\\" operation at path [\".concat(path, \"] because the destination is past the end of the node.\"));\n        }\n        parent.children.splice(index, 0, node);\n        if (selection) {\n          for (var [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op);\n          }\n        }\n        break;\n      }\n    case 'insert_text':\n      {\n        var {\n          path: _path,\n          offset,\n          text\n        } = op;\n        if (text.length === 0) break;\n        var _node = Node.leaf(editor, _path);\n        var before = _node.text.slice(0, offset);\n        var after = _node.text.slice(offset);\n        _node.text = before + text + after;\n        if (selection) {\n          for (var [_point, _key] of Range.points(selection)) {\n            selection[_key] = Point.transform(_point, op);\n          }\n        }\n        break;\n      }\n    case 'merge_node':\n      {\n        var {\n          path: _path2\n        } = op;\n        var _node2 = Node.get(editor, _path2);\n        var prevPath = Path.previous(_path2);\n        var prev = Node.get(editor, prevPath);\n        var _parent = Node.parent(editor, _path2);\n        var _index = _path2[_path2.length - 1];\n        if (Text.isText(_node2) && Text.isText(prev)) {\n          prev.text += _node2.text;\n        } else if (!Text.isText(_node2) && !Text.isText(prev)) {\n          prev.children.push(..._node2.children);\n        } else {\n          throw new Error(\"Cannot apply a \\\"merge_node\\\" operation at path [\".concat(_path2, \"] to nodes of different interfaces: \").concat(Scrubber.stringify(_node2), \" \").concat(Scrubber.stringify(prev)));\n        }\n        _parent.children.splice(_index, 1);\n        if (selection) {\n          for (var [_point2, _key2] of Range.points(selection)) {\n            selection[_key2] = Point.transform(_point2, op);\n          }\n        }\n        break;\n      }\n    case 'move_node':\n      {\n        var {\n          path: _path3,\n          newPath\n        } = op;\n        if (Path.isAncestor(_path3, newPath)) {\n          throw new Error(\"Cannot move a path [\".concat(_path3, \"] to new path [\").concat(newPath, \"] because the destination is inside itself.\"));\n        }\n        var _node3 = Node.get(editor, _path3);\n        var _parent2 = Node.parent(editor, _path3);\n        var _index2 = _path3[_path3.length - 1]; // This is tricky, but since the `path` and `newPath` both refer to\n        // the same snapshot in time, there's a mismatch. After either\n        // removing the original position, the second step's path can be out\n        // of date. So instead of using the `op.newPath` directly, we\n        // transform `op.path` to ascertain what the `newPath` would be after\n        // the operation was applied.\n\n        _parent2.children.splice(_index2, 1);\n        var truePath = Path.transform(_path3, op);\n        var newParent = Node.get(editor, Path.parent(truePath));\n        var newIndex = truePath[truePath.length - 1];\n        newParent.children.splice(newIndex, 0, _node3);\n        if (selection) {\n          for (var [_point3, _key3] of Range.points(selection)) {\n            selection[_key3] = Point.transform(_point3, op);\n          }\n        }\n        break;\n      }\n    case 'remove_node':\n      {\n        var {\n          path: _path4\n        } = op;\n        var _index3 = _path4[_path4.length - 1];\n        var _parent3 = Node.parent(editor, _path4);\n        _parent3.children.splice(_index3, 1); // Transform all of the points in the value, but if the point was in the\n        // node that was removed we need to update the range or remove it.\n\n        if (selection) {\n          for (var [_point4, _key4] of Range.points(selection)) {\n            var result = Point.transform(_point4, op);\n            if (selection != null && result != null) {\n              selection[_key4] = result;\n            } else {\n              var _prev = void 0;\n              var next = void 0;\n              for (var [n, p] of Node.texts(editor)) {\n                if (Path.compare(p, _path4) === -1) {\n                  _prev = [n, p];\n                } else {\n                  next = [n, p];\n                  break;\n                }\n              }\n              var preferNext = false;\n              if (_prev && next) {\n                if (Path.equals(next[1], _path4)) {\n                  preferNext = !Path.hasPrevious(next[1]);\n                } else {\n                  preferNext = Path.common(_prev[1], _path4).length < Path.common(next[1], _path4).length;\n                }\n              }\n              if (_prev && !preferNext) {\n                _point4.path = _prev[1];\n                _point4.offset = _prev[0].text.length;\n              } else if (next) {\n                _point4.path = next[1];\n                _point4.offset = 0;\n              } else {\n                selection = null;\n              }\n            }\n          }\n        }\n        break;\n      }\n    case 'remove_text':\n      {\n        var {\n          path: _path5,\n          offset: _offset,\n          text: _text\n        } = op;\n        if (_text.length === 0) break;\n        var _node4 = Node.leaf(editor, _path5);\n        var _before = _node4.text.slice(0, _offset);\n        var _after = _node4.text.slice(_offset + _text.length);\n        _node4.text = _before + _after;\n        if (selection) {\n          for (var [_point5, _key5] of Range.points(selection)) {\n            selection[_key5] = Point.transform(_point5, op);\n          }\n        }\n        break;\n      }\n    case 'set_node':\n      {\n        var {\n          path: _path6,\n          properties,\n          newProperties\n        } = op;\n        if (_path6.length === 0) {\n          throw new Error(\"Cannot set properties on the root node!\");\n        }\n        var _node5 = Node.get(editor, _path6);\n        for (var _key6 in newProperties) {\n          if (_key6 === 'children' || _key6 === 'text') {\n            throw new Error(\"Cannot set the \\\"\".concat(_key6, \"\\\" property of nodes!\"));\n          }\n          var value = newProperties[_key6];\n          if (value == null) {\n            delete _node5[_key6];\n          } else {\n            _node5[_key6] = value;\n          }\n        } // properties that were previously defined, but are now missing, must be deleted\n\n        for (var _key7 in properties) {\n          if (!newProperties.hasOwnProperty(_key7)) {\n            delete _node5[_key7];\n          }\n        }\n        break;\n      }\n    case 'set_selection':\n      {\n        var {\n          newProperties: _newProperties\n        } = op;\n        if (_newProperties == null) {\n          selection = _newProperties;\n        } else {\n          if (selection == null) {\n            if (!Range.isRange(_newProperties)) {\n              throw new Error(\"Cannot apply an incomplete \\\"set_selection\\\" operation properties \".concat(Scrubber.stringify(_newProperties), \" when there is no current selection.\"));\n            }\n            selection = _objectSpread$e({}, _newProperties);\n          }\n          for (var _key8 in _newProperties) {\n            var _value = _newProperties[_key8];\n            if (_value == null) {\n              if (_key8 === 'anchor' || _key8 === 'focus') {\n                throw new Error(\"Cannot remove the \\\"\".concat(_key8, \"\\\" selection property\"));\n              }\n              delete selection[_key8];\n            } else {\n              selection[_key8] = _value;\n            }\n          }\n        }\n        break;\n      }\n    case 'split_node':\n      {\n        var {\n          path: _path7,\n          position,\n          properties: _properties\n        } = op;\n        if (_path7.length === 0) {\n          throw new Error(\"Cannot apply a \\\"split_node\\\" operation at path [\".concat(_path7, \"] because the root node cannot be split.\"));\n        }\n        var _node6 = Node.get(editor, _path7);\n        var _parent4 = Node.parent(editor, _path7);\n        var _index4 = _path7[_path7.length - 1];\n        var newNode;\n        if (Text.isText(_node6)) {\n          var _before2 = _node6.text.slice(0, position);\n          var _after2 = _node6.text.slice(position);\n          _node6.text = _before2;\n          newNode = _objectSpread$e(_objectSpread$e({}, _properties), {}, {\n            text: _after2\n          });\n        } else {\n          var _before3 = _node6.children.slice(0, position);\n          var _after3 = _node6.children.slice(position);\n          _node6.children = _before3;\n          newNode = _objectSpread$e(_objectSpread$e({}, _properties), {}, {\n            children: _after3\n          });\n        }\n        _parent4.children.splice(_index4 + 1, 0, newNode);\n        if (selection) {\n          for (var [_point6, _key9] of Range.points(selection)) {\n            selection[_key9] = Point.transform(_point6, op);\n          }\n        }\n        break;\n      }\n  }\n  return selection;\n}; // eslint-disable-next-line no-redeclare\n\nvar GeneralTransforms = {\n  transform(editor, op) {\n    editor.children = createDraft(editor.children);\n    var selection = editor.selection && createDraft(editor.selection);\n    try {\n      selection = applyToDraft(editor, selection, op);\n    } finally {\n      editor.children = finishDraft(editor.children);\n      if (selection) {\n        editor.selection = isDraft(selection) ? finishDraft(selection) : selection;\n      } else {\n        editor.selection = null;\n      }\n    }\n  }\n};\n\n// eslint-disable-next-line no-redeclare\nvar NodeTransforms = {\n  insertNodes(editor, nodes, options) {\n    editor.insertNodes(nodes, options);\n  },\n  liftNodes(editor, options) {\n    editor.liftNodes(options);\n  },\n  mergeNodes(editor, options) {\n    editor.mergeNodes(options);\n  },\n  moveNodes(editor, options) {\n    editor.moveNodes(options);\n  },\n  removeNodes(editor, options) {\n    editor.removeNodes(options);\n  },\n  setNodes(editor, props, options) {\n    editor.setNodes(props, options);\n  },\n  splitNodes(editor, options) {\n    editor.splitNodes(options);\n  },\n  unsetNodes(editor, props, options) {\n    editor.unsetNodes(props, options);\n  },\n  unwrapNodes(editor, options) {\n    editor.unwrapNodes(options);\n  },\n  wrapNodes(editor, element, options) {\n    editor.wrapNodes(element, options);\n  }\n};\n\n// eslint-disable-next-line no-redeclare\nvar SelectionTransforms = {\n  collapse(editor, options) {\n    editor.collapse(options);\n  },\n  deselect(editor) {\n    editor.deselect();\n  },\n  move(editor, options) {\n    editor.move(options);\n  },\n  select(editor, target) {\n    editor.select(target);\n  },\n  setPoint(editor, props, options) {\n    editor.setPoint(props, options);\n  },\n  setSelection(editor, props) {\n    editor.setSelection(props);\n  }\n};\n\n/*\r\n  Custom deep equal comparison for Slate nodes.\r\n\n  We don't need general purpose deep equality;\r\n  Slate only supports plain values, Arrays, and nested objects.\r\n  Complex values nested inside Arrays are not supported.\r\n\n  Slate objects are designed to be serialised, so\r\n  missing keys are deliberately normalised to undefined.\r\n */\n\nvar isDeepEqual = (node, another) => {\n  for (var key in node) {\n    var a = node[key];\n    var b = another[key];\n    if (isPlainObject(a) && isPlainObject(b)) {\n      if (!isDeepEqual(a, b)) return false;\n    } else if (Array.isArray(a) && Array.isArray(b)) {\n      if (a.length !== b.length) return false;\n      for (var i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) return false;\n      }\n    } else if (a !== b) {\n      return false;\n    }\n  }\n  /*\r\n    Deep object equality is only necessary in one direction; in the reverse direction\r\n    we are only looking for keys that are missing.\r\n    As above, undefined keys are normalised to missing.\r\n  */\n\n  for (var _key in another) {\n    if (node[_key] === undefined && another[_key] !== undefined) {\n      return false;\n    }\n  }\n  return true;\n};\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nvar _excluded$4 = [\"anchor\", \"focus\"];\nfunction ownKeys$d(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$d(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$d(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$d(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar Range = {\n  edges(range) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      reverse = false\n    } = options;\n    var {\n      anchor,\n      focus\n    } = range;\n    return Range.isBackward(range) === reverse ? [anchor, focus] : [focus, anchor];\n  },\n  end(range) {\n    var [, end] = Range.edges(range);\n    return end;\n  },\n  equals(range, another) {\n    return Point.equals(range.anchor, another.anchor) && Point.equals(range.focus, another.focus);\n  },\n  includes(range, target) {\n    if (Range.isRange(target)) {\n      if (Range.includes(range, target.anchor) || Range.includes(range, target.focus)) {\n        return true;\n      }\n      var [rs, re] = Range.edges(range);\n      var [ts, te] = Range.edges(target);\n      return Point.isBefore(rs, ts) && Point.isAfter(re, te);\n    }\n    var [start, end] = Range.edges(range);\n    var isAfterStart = false;\n    var isBeforeEnd = false;\n    if (Point.isPoint(target)) {\n      isAfterStart = Point.compare(target, start) >= 0;\n      isBeforeEnd = Point.compare(target, end) <= 0;\n    } else {\n      isAfterStart = Path.compare(target, start.path) >= 0;\n      isBeforeEnd = Path.compare(target, end.path) <= 0;\n    }\n    return isAfterStart && isBeforeEnd;\n  },\n  intersection(range, another) {\n    var rest = _objectWithoutProperties(range, _excluded$4);\n    var [s1, e1] = Range.edges(range);\n    var [s2, e2] = Range.edges(another);\n    var start = Point.isBefore(s1, s2) ? s2 : s1;\n    var end = Point.isBefore(e1, e2) ? e1 : e2;\n    if (Point.isBefore(end, start)) {\n      return null;\n    } else {\n      return _objectSpread$d({\n        anchor: start,\n        focus: end\n      }, rest);\n    }\n  },\n  isBackward(range) {\n    var {\n      anchor,\n      focus\n    } = range;\n    return Point.isAfter(anchor, focus);\n  },\n  isCollapsed(range) {\n    var {\n      anchor,\n      focus\n    } = range;\n    return Point.equals(anchor, focus);\n  },\n  isExpanded(range) {\n    return !Range.isCollapsed(range);\n  },\n  isForward(range) {\n    return !Range.isBackward(range);\n  },\n  isRange(value) {\n    return isPlainObject(value) && Point.isPoint(value.anchor) && Point.isPoint(value.focus);\n  },\n  *points(range) {\n    yield [range.anchor, 'anchor'];\n    yield [range.focus, 'focus'];\n  },\n  start(range) {\n    var [start] = Range.edges(range);\n    return start;\n  },\n  transform(range, op) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return produce(range, r => {\n      if (r === null) {\n        return null;\n      }\n      var {\n        affinity = 'inward'\n      } = options;\n      var affinityAnchor;\n      var affinityFocus;\n      if (affinity === 'inward') {\n        // If the range is collapsed, make sure to use the same affinity to\n        // avoid the two points passing each other and expanding in the opposite\n        // direction\n        var isCollapsed = Range.isCollapsed(r);\n        if (Range.isForward(r)) {\n          affinityAnchor = 'forward';\n          affinityFocus = isCollapsed ? affinityAnchor : 'backward';\n        } else {\n          affinityAnchor = 'backward';\n          affinityFocus = isCollapsed ? affinityAnchor : 'forward';\n        }\n      } else if (affinity === 'outward') {\n        if (Range.isForward(r)) {\n          affinityAnchor = 'backward';\n          affinityFocus = 'forward';\n        } else {\n          affinityAnchor = 'forward';\n          affinityFocus = 'backward';\n        }\n      } else {\n        affinityAnchor = affinity;\n        affinityFocus = affinity;\n      }\n      var anchor = Point.transform(r.anchor, op, {\n        affinity: affinityAnchor\n      });\n      var focus = Point.transform(r.focus, op, {\n        affinity: affinityFocus\n      });\n      if (!anchor || !focus) {\n        return null;\n      }\n      r.anchor = anchor;\n      r.focus = focus;\n    });\n  }\n};\n\n/**\r\n * Shared the function with isElementType utility\r\n */\n\nvar isElement = value => {\n  return isPlainObject(value) && Node.isNodeList(value.children) && !Editor.isEditor(value);\n}; // eslint-disable-next-line no-redeclare\n\nvar Element = {\n  isAncestor(value) {\n    return isPlainObject(value) && Node.isNodeList(value.children);\n  },\n  isElement,\n  isElementList(value) {\n    return Array.isArray(value) && value.every(val => Element.isElement(val));\n  },\n  isElementProps(props) {\n    return props.children !== undefined;\n  },\n  isElementType: function isElementType(value, elementVal) {\n    var elementKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'type';\n    return isElement(value) && value[elementKey] === elementVal;\n  },\n  matches(element, props) {\n    for (var key in props) {\n      if (key === 'children') {\n        continue;\n      }\n      if (element[key] !== props[key]) {\n        return false;\n      }\n    }\n    return true;\n  }\n};\nvar _excluded$3 = [\"children\"],\n  _excluded2$3 = [\"text\"];\nvar IS_NODE_LIST_CACHE = new WeakMap(); // eslint-disable-next-line no-redeclare\n\nvar Node = {\n  ancestor(root, path) {\n    var node = Node.get(root, path);\n    if (Text.isText(node)) {\n      throw new Error(\"Cannot get the ancestor node at path [\".concat(path, \"] because it refers to a text node instead: \").concat(Scrubber.stringify(node)));\n    }\n    return node;\n  },\n  *ancestors(root, path) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    for (var p of Path.ancestors(path, options)) {\n      var n = Node.ancestor(root, p);\n      var entry = [n, p];\n      yield entry;\n    }\n  },\n  child(root, index) {\n    if (Text.isText(root)) {\n      throw new Error(\"Cannot get the child of a text node: \".concat(Scrubber.stringify(root)));\n    }\n    var c = root.children[index];\n    if (c == null) {\n      throw new Error(\"Cannot get child at index `\".concat(index, \"` in node: \").concat(Scrubber.stringify(root)));\n    }\n    return c;\n  },\n  *children(root, path) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      reverse = false\n    } = options;\n    var ancestor = Node.ancestor(root, path);\n    var {\n      children\n    } = ancestor;\n    var index = reverse ? children.length - 1 : 0;\n    while (reverse ? index >= 0 : index < children.length) {\n      var child = Node.child(ancestor, index);\n      var childPath = path.concat(index);\n      yield [child, childPath];\n      index = reverse ? index - 1 : index + 1;\n    }\n  },\n  common(root, path, another) {\n    var p = Path.common(path, another);\n    var n = Node.get(root, p);\n    return [n, p];\n  },\n  descendant(root, path) {\n    var node = Node.get(root, path);\n    if (Editor.isEditor(node)) {\n      throw new Error(\"Cannot get the descendant node at path [\".concat(path, \"] because it refers to the root editor node instead: \").concat(Scrubber.stringify(node)));\n    }\n    return node;\n  },\n  *descendants(root) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    for (var [node, path] of Node.nodes(root, options)) {\n      if (path.length !== 0) {\n        // NOTE: we have to coerce here because checking the path's length does\n        // guarantee that `node` is not a `Editor`, but TypeScript doesn't know.\n        yield [node, path];\n      }\n    }\n  },\n  *elements(root) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    for (var [node, path] of Node.nodes(root, options)) {\n      if (Element.isElement(node)) {\n        yield [node, path];\n      }\n    }\n  },\n  extractProps(node) {\n    if (Element.isAncestor(node)) {\n      var properties = _objectWithoutProperties(node, _excluded$3);\n      return properties;\n    } else {\n      var properties = _objectWithoutProperties(node, _excluded2$3);\n      return properties;\n    }\n  },\n  first(root, path) {\n    var p = path.slice();\n    var n = Node.get(root, p);\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break;\n      } else {\n        n = n.children[0];\n        p.push(0);\n      }\n    }\n    return [n, p];\n  },\n  fragment(root, range) {\n    if (Text.isText(root)) {\n      throw new Error(\"Cannot get a fragment starting from a root text node: \".concat(Scrubber.stringify(root)));\n    }\n    var newRoot = produce({\n      children: root.children\n    }, r => {\n      var [start, end] = Range.edges(range);\n      var nodeEntries = Node.nodes(r, {\n        reverse: true,\n        pass: _ref => {\n          var [, path] = _ref;\n          return !Range.includes(range, path);\n        }\n      });\n      for (var [, path] of nodeEntries) {\n        if (!Range.includes(range, path)) {\n          var parent = Node.parent(r, path);\n          var index = path[path.length - 1];\n          parent.children.splice(index, 1);\n        }\n        if (Path.equals(path, end.path)) {\n          var leaf = Node.leaf(r, path);\n          leaf.text = leaf.text.slice(0, end.offset);\n        }\n        if (Path.equals(path, start.path)) {\n          var _leaf = Node.leaf(r, path);\n          _leaf.text = _leaf.text.slice(start.offset);\n        }\n      }\n      if (Editor.isEditor(r)) {\n        r.selection = null;\n      }\n    });\n    return newRoot.children;\n  },\n  get(root, path) {\n    var node = root;\n    for (var i = 0; i < path.length; i++) {\n      var p = path[i];\n      if (Text.isText(node) || !node.children[p]) {\n        throw new Error(\"Cannot find a descendant at path [\".concat(path, \"] in node: \").concat(Scrubber.stringify(root)));\n      }\n      node = node.children[p];\n    }\n    return node;\n  },\n  has(root, path) {\n    var node = root;\n    for (var i = 0; i < path.length; i++) {\n      var p = path[i];\n      if (Text.isText(node) || !node.children[p]) {\n        return false;\n      }\n      node = node.children[p];\n    }\n    return true;\n  },\n  isNode(value) {\n    return Text.isText(value) || Element.isElement(value) || Editor.isEditor(value);\n  },\n  isNodeList(value) {\n    if (!Array.isArray(value)) {\n      return false;\n    }\n    var cachedResult = IS_NODE_LIST_CACHE.get(value);\n    if (cachedResult !== undefined) {\n      return cachedResult;\n    }\n    var isNodeList = value.every(val => Node.isNode(val));\n    IS_NODE_LIST_CACHE.set(value, isNodeList);\n    return isNodeList;\n  },\n  last(root, path) {\n    var p = path.slice();\n    var n = Node.get(root, p);\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break;\n      } else {\n        var i = n.children.length - 1;\n        n = n.children[i];\n        p.push(i);\n      }\n    }\n    return [n, p];\n  },\n  leaf(root, path) {\n    var node = Node.get(root, path);\n    if (!Text.isText(node)) {\n      throw new Error(\"Cannot get the leaf node at path [\".concat(path, \"] because it refers to a non-leaf node: \").concat(Scrubber.stringify(node)));\n    }\n    return node;\n  },\n  *levels(root, path) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    for (var p of Path.levels(path, options)) {\n      var n = Node.get(root, p);\n      yield [n, p];\n    }\n  },\n  matches(node, props) {\n    return Element.isElement(node) && Element.isElementProps(props) && Element.matches(node, props) || Text.isText(node) && Text.isTextProps(props) && Text.matches(node, props);\n  },\n  *nodes(root) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      pass,\n      reverse = false\n    } = options;\n    var {\n      from = [],\n      to\n    } = options;\n    var visited = new Set();\n    var p = [];\n    var n = root;\n    while (true) {\n      if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) {\n        break;\n      }\n      if (!visited.has(n)) {\n        yield [n, p];\n      } // If we're allowed to go downward and we haven't descended yet, do.\n\n      if (!visited.has(n) && !Text.isText(n) && n.children.length !== 0 && (pass == null || pass([n, p]) === false)) {\n        visited.add(n);\n        var nextIndex = reverse ? n.children.length - 1 : 0;\n        if (Path.isAncestor(p, from)) {\n          nextIndex = from[p.length];\n        }\n        p = p.concat(nextIndex);\n        n = Node.get(root, p);\n        continue;\n      } // If we're at the root and we can't go down, we're done.\n\n      if (p.length === 0) {\n        break;\n      } // If we're going forward...\n\n      if (!reverse) {\n        var newPath = Path.next(p);\n        if (Node.has(root, newPath)) {\n          p = newPath;\n          n = Node.get(root, p);\n          continue;\n        }\n      } // If we're going backward...\n\n      if (reverse && p[p.length - 1] !== 0) {\n        var _newPath = Path.previous(p);\n        p = _newPath;\n        n = Node.get(root, p);\n        continue;\n      } // Otherwise we're going upward...\n\n      p = Path.parent(p);\n      n = Node.get(root, p);\n      visited.add(n);\n    }\n  },\n  parent(root, path) {\n    var parentPath = Path.parent(path);\n    var p = Node.get(root, parentPath);\n    if (Text.isText(p)) {\n      throw new Error(\"Cannot get the parent of path [\".concat(path, \"] because it does not exist in the root.\"));\n    }\n    return p;\n  },\n  string(node) {\n    if (Text.isText(node)) {\n      return node.text;\n    } else {\n      return node.children.map(Node.string).join('');\n    }\n  },\n  *texts(root) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    for (var [node, path] of Node.nodes(root, options)) {\n      if (Text.isText(node)) {\n        yield [node, path];\n      }\n    }\n  }\n};\nfunction ownKeys$c(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$c(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$c(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$c(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar Operation = {\n  isNodeOperation(value) {\n    return Operation.isOperation(value) && value.type.endsWith('_node');\n  },\n  isOperation(value) {\n    if (!isPlainObject(value)) {\n      return false;\n    }\n    switch (value.type) {\n      case 'insert_node':\n        return Path.isPath(value.path) && Node.isNode(value.node);\n      case 'insert_text':\n        return typeof value.offset === 'number' && typeof value.text === 'string' && Path.isPath(value.path);\n      case 'merge_node':\n        return typeof value.position === 'number' && Path.isPath(value.path) && isPlainObject(value.properties);\n      case 'move_node':\n        return Path.isPath(value.path) && Path.isPath(value.newPath);\n      case 'remove_node':\n        return Path.isPath(value.path) && Node.isNode(value.node);\n      case 'remove_text':\n        return typeof value.offset === 'number' && typeof value.text === 'string' && Path.isPath(value.path);\n      case 'set_node':\n        return Path.isPath(value.path) && isPlainObject(value.properties) && isPlainObject(value.newProperties);\n      case 'set_selection':\n        return value.properties === null && Range.isRange(value.newProperties) || value.newProperties === null && Range.isRange(value.properties) || isPlainObject(value.properties) && isPlainObject(value.newProperties);\n      case 'split_node':\n        return Path.isPath(value.path) && typeof value.position === 'number' && isPlainObject(value.properties);\n      default:\n        return false;\n    }\n  },\n  isOperationList(value) {\n    return Array.isArray(value) && value.every(val => Operation.isOperation(val));\n  },\n  isSelectionOperation(value) {\n    return Operation.isOperation(value) && value.type.endsWith('_selection');\n  },\n  isTextOperation(value) {\n    return Operation.isOperation(value) && value.type.endsWith('_text');\n  },\n  inverse(op) {\n    switch (op.type) {\n      case 'insert_node':\n        {\n          return _objectSpread$c(_objectSpread$c({}, op), {}, {\n            type: 'remove_node'\n          });\n        }\n      case 'insert_text':\n        {\n          return _objectSpread$c(_objectSpread$c({}, op), {}, {\n            type: 'remove_text'\n          });\n        }\n      case 'merge_node':\n        {\n          return _objectSpread$c(_objectSpread$c({}, op), {}, {\n            type: 'split_node',\n            path: Path.previous(op.path)\n          });\n        }\n      case 'move_node':\n        {\n          var {\n            newPath,\n            path\n          } = op; // PERF: in this case the move operation is a no-op anyways.\n\n          if (Path.equals(newPath, path)) {\n            return op;\n          } // If the move happens completely within a single parent the path and\n          // newPath are stable with respect to each other.\n\n          if (Path.isSibling(path, newPath)) {\n            return _objectSpread$c(_objectSpread$c({}, op), {}, {\n              path: newPath,\n              newPath: path\n            });\n          } // If the move does not happen within a single parent it is possible\n          // for the move to impact the true path to the location where the node\n          // was removed from and where it was inserted. We have to adjust for this\n          // and find the original path. We can accomplish this (only in non-sibling)\n          // moves by looking at the impact of the move operation on the node\n          // after the original move path.\n\n          var inversePath = Path.transform(path, op);\n          var inverseNewPath = Path.transform(Path.next(path), op);\n          return _objectSpread$c(_objectSpread$c({}, op), {}, {\n            path: inversePath,\n            newPath: inverseNewPath\n          });\n        }\n      case 'remove_node':\n        {\n          return _objectSpread$c(_objectSpread$c({}, op), {}, {\n            type: 'insert_node'\n          });\n        }\n      case 'remove_text':\n        {\n          return _objectSpread$c(_objectSpread$c({}, op), {}, {\n            type: 'insert_text'\n          });\n        }\n      case 'set_node':\n        {\n          var {\n            properties,\n            newProperties\n          } = op;\n          return _objectSpread$c(_objectSpread$c({}, op), {}, {\n            properties: newProperties,\n            newProperties: properties\n          });\n        }\n      case 'set_selection':\n        {\n          var {\n            properties: _properties,\n            newProperties: _newProperties\n          } = op;\n          if (_properties == null) {\n            return _objectSpread$c(_objectSpread$c({}, op), {}, {\n              properties: _newProperties,\n              newProperties: null\n            });\n          } else if (_newProperties == null) {\n            return _objectSpread$c(_objectSpread$c({}, op), {}, {\n              properties: null,\n              newProperties: _properties\n            });\n          } else {\n            return _objectSpread$c(_objectSpread$c({}, op), {}, {\n              properties: _newProperties,\n              newProperties: _properties\n            });\n          }\n        }\n      case 'split_node':\n        {\n          return _objectSpread$c(_objectSpread$c({}, op), {}, {\n            type: 'merge_node',\n            path: Path.next(op.path)\n          });\n        }\n    }\n  }\n};\nvar IS_EDITOR_CACHE = new WeakMap();\nvar isEditor = value => {\n  var cachedIsEditor = IS_EDITOR_CACHE.get(value);\n  if (cachedIsEditor !== undefined) {\n    return cachedIsEditor;\n  }\n  if (!isPlainObject(value)) {\n    return false;\n  }\n  var isEditor = typeof value.addMark === 'function' && typeof value.apply === 'function' && typeof value.deleteFragment === 'function' && typeof value.insertBreak === 'function' && typeof value.insertSoftBreak === 'function' && typeof value.insertFragment === 'function' && typeof value.insertNode === 'function' && typeof value.insertText === 'function' && typeof value.isElementReadOnly === 'function' && typeof value.isInline === 'function' && typeof value.isSelectable === 'function' && typeof value.isVoid === 'function' && typeof value.normalizeNode === 'function' && typeof value.onChange === 'function' && typeof value.removeMark === 'function' && typeof value.getDirtyPaths === 'function' && (value.marks === null || isPlainObject(value.marks)) && (value.selection === null || Range.isRange(value.selection)) && Node.isNodeList(value.children) && Operation.isOperationList(value.operations);\n  IS_EDITOR_CACHE.set(value, isEditor);\n  return isEditor;\n};\nvar Editor = {\n  above(editor, options) {\n    return editor.above(options);\n  },\n  addMark(editor, key, value) {\n    editor.addMark(key, value);\n  },\n  after(editor, at, options) {\n    return editor.after(at, options);\n  },\n  before(editor, at, options) {\n    return editor.before(at, options);\n  },\n  deleteBackward(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      unit = 'character'\n    } = options;\n    editor.deleteBackward(unit);\n  },\n  deleteForward(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      unit = 'character'\n    } = options;\n    editor.deleteForward(unit);\n  },\n  deleteFragment(editor, options) {\n    editor.deleteFragment(options);\n  },\n  edges(editor, at) {\n    return editor.edges(at);\n  },\n  elementReadOnly(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return editor.elementReadOnly(options);\n  },\n  end(editor, at) {\n    return editor.end(at);\n  },\n  first(editor, at) {\n    return editor.first(at);\n  },\n  fragment(editor, at) {\n    return editor.fragment(at);\n  },\n  hasBlocks(editor, element) {\n    return editor.hasBlocks(element);\n  },\n  hasInlines(editor, element) {\n    return editor.hasInlines(element);\n  },\n  hasPath(editor, path) {\n    return editor.hasPath(path);\n  },\n  hasTexts(editor, element) {\n    return editor.hasTexts(element);\n  },\n  insertBreak(editor) {\n    editor.insertBreak();\n  },\n  insertFragment(editor, fragment, options) {\n    editor.insertFragment(fragment, options);\n  },\n  insertNode(editor, node) {\n    editor.insertNode(node);\n  },\n  insertSoftBreak(editor) {\n    editor.insertSoftBreak();\n  },\n  insertText(editor, text) {\n    editor.insertText(text);\n  },\n  isBlock(editor, value) {\n    return editor.isBlock(value);\n  },\n  isEdge(editor, point, at) {\n    return editor.isEdge(point, at);\n  },\n  isEditor(value) {\n    return isEditor(value);\n  },\n  isElementReadOnly(editor, element) {\n    return editor.isElementReadOnly(element);\n  },\n  isEmpty(editor, element) {\n    return editor.isEmpty(element);\n  },\n  isEnd(editor, point, at) {\n    return editor.isEnd(point, at);\n  },\n  isInline(editor, value) {\n    return editor.isInline(value);\n  },\n  isNormalizing(editor) {\n    return editor.isNormalizing();\n  },\n  isSelectable(editor, value) {\n    return editor.isSelectable(value);\n  },\n  isStart(editor, point, at) {\n    return editor.isStart(point, at);\n  },\n  isVoid(editor, value) {\n    return editor.isVoid(value);\n  },\n  last(editor, at) {\n    return editor.last(at);\n  },\n  leaf(editor, at, options) {\n    return editor.leaf(at, options);\n  },\n  levels(editor, options) {\n    return editor.levels(options);\n  },\n  marks(editor) {\n    return editor.getMarks();\n  },\n  next(editor, options) {\n    return editor.next(options);\n  },\n  node(editor, at, options) {\n    return editor.node(at, options);\n  },\n  nodes(editor, options) {\n    return editor.nodes(options);\n  },\n  normalize(editor, options) {\n    editor.normalize(options);\n  },\n  parent(editor, at, options) {\n    return editor.parent(at, options);\n  },\n  path(editor, at, options) {\n    return editor.path(at, options);\n  },\n  pathRef(editor, path, options) {\n    return editor.pathRef(path, options);\n  },\n  pathRefs(editor) {\n    return editor.pathRefs();\n  },\n  point(editor, at, options) {\n    return editor.point(at, options);\n  },\n  pointRef(editor, point, options) {\n    return editor.pointRef(point, options);\n  },\n  pointRefs(editor) {\n    return editor.pointRefs();\n  },\n  positions(editor, options) {\n    return editor.positions(options);\n  },\n  previous(editor, options) {\n    return editor.previous(options);\n  },\n  range(editor, at, to) {\n    return editor.range(at, to);\n  },\n  rangeRef(editor, range, options) {\n    return editor.rangeRef(range, options);\n  },\n  rangeRefs(editor) {\n    return editor.rangeRefs();\n  },\n  removeMark(editor, key) {\n    editor.removeMark(key);\n  },\n  setNormalizing(editor, isNormalizing) {\n    editor.setNormalizing(isNormalizing);\n  },\n  start(editor, at) {\n    return editor.start(at);\n  },\n  string(editor, at, options) {\n    return editor.string(at, options);\n  },\n  unhangRange(editor, range, options) {\n    return editor.unhangRange(range, options);\n  },\n  void(editor, options) {\n    return editor.void(options);\n  },\n  withoutNormalizing(editor, fn) {\n    editor.withoutNormalizing(fn);\n  }\n};\nvar Location = {\n  isLocation(value) {\n    return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value);\n  }\n}; // eslint-disable-next-line no-redeclare\n\nvar Span = {\n  isSpan(value) {\n    return Array.isArray(value) && value.length === 2 && value.every(Path.isPath);\n  }\n};\nfunction ownKeys$b(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$b(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$b(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$b(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar Point = {\n  compare(point, another) {\n    var result = Path.compare(point.path, another.path);\n    if (result === 0) {\n      if (point.offset < another.offset) return -1;\n      if (point.offset > another.offset) return 1;\n      return 0;\n    }\n    return result;\n  },\n  isAfter(point, another) {\n    return Point.compare(point, another) === 1;\n  },\n  isBefore(point, another) {\n    return Point.compare(point, another) === -1;\n  },\n  equals(point, another) {\n    // PERF: ensure the offsets are equal first since they are cheaper to check.\n    return point.offset === another.offset && Path.equals(point.path, another.path);\n  },\n  isPoint(value) {\n    return isPlainObject(value) && typeof value.offset === 'number' && Path.isPath(value.path);\n  },\n  transform(point, op) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return produce(point, p => {\n      if (p === null) {\n        return null;\n      }\n      var {\n        affinity = 'forward'\n      } = options;\n      var {\n        path,\n        offset\n      } = p;\n      switch (op.type) {\n        case 'insert_node':\n        case 'move_node':\n          {\n            p.path = Path.transform(path, op, options);\n            break;\n          }\n        case 'insert_text':\n          {\n            if (Path.equals(op.path, path) && (op.offset < offset || op.offset === offset && affinity === 'forward')) {\n              p.offset += op.text.length;\n            }\n            break;\n          }\n        case 'merge_node':\n          {\n            if (Path.equals(op.path, path)) {\n              p.offset += op.position;\n            }\n            p.path = Path.transform(path, op, options);\n            break;\n          }\n        case 'remove_text':\n          {\n            if (Path.equals(op.path, path) && op.offset <= offset) {\n              p.offset -= Math.min(offset - op.offset, op.text.length);\n            }\n            break;\n          }\n        case 'remove_node':\n          {\n            if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {\n              return null;\n            }\n            p.path = Path.transform(path, op, options);\n            break;\n          }\n        case 'split_node':\n          {\n            if (Path.equals(op.path, path)) {\n              if (op.position === offset && affinity == null) {\n                return null;\n              } else if (op.position < offset || op.position === offset && affinity === 'forward') {\n                p.offset -= op.position;\n                p.path = Path.transform(path, op, _objectSpread$b(_objectSpread$b({}, options), {}, {\n                  affinity: 'forward'\n                }));\n              }\n            } else {\n              p.path = Path.transform(path, op, options);\n            }\n            break;\n          }\n      }\n    });\n  }\n};\nvar _scrubber = undefined;\n/**\r\n * This interface implements a stringify() function, which is used by Slate\r\n * internally when generating exceptions containing end user data. Developers\r\n * using Slate may call Scrubber.setScrubber() to alter the behavior of this\r\n * stringify() function.\r\n *\r\n * For example, to prevent the cleartext logging of 'text' fields within Nodes:\r\n *\r\n *    import { Scrubber } from 'slate';\r\n *    Scrubber.setScrubber((key, val) => {\r\n *      if (key === 'text') return '...scrubbed...'\r\n *      return val\r\n *    });\r\n *\r\n */\n// eslint-disable-next-line no-redeclare\n\nvar Scrubber = {\n  setScrubber(scrubber) {\n    _scrubber = scrubber;\n  },\n  stringify(value) {\n    return JSON.stringify(value, _scrubber);\n  }\n};\nvar _excluded$2 = [\"text\"],\n  _excluded2$2 = [\"anchor\", \"focus\"];\nfunction ownKeys$a(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$a(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$a(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$a(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar Text = {\n  equals(text, another) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      loose = false\n    } = options;\n    function omitText(obj) {\n      var rest = _objectWithoutProperties(obj, _excluded$2);\n      return rest;\n    }\n    return isDeepEqual(loose ? omitText(text) : text, loose ? omitText(another) : another);\n  },\n  isText(value) {\n    return isPlainObject(value) && typeof value.text === 'string';\n  },\n  isTextList(value) {\n    return Array.isArray(value) && value.every(val => Text.isText(val));\n  },\n  isTextProps(props) {\n    return props.text !== undefined;\n  },\n  matches(text, props) {\n    for (var key in props) {\n      if (key === 'text') {\n        continue;\n      }\n      if (!text.hasOwnProperty(key) || text[key] !== props[key]) {\n        return false;\n      }\n    }\n    return true;\n  },\n  decorations(node, decorations) {\n    var leaves = [_objectSpread$a({}, node)];\n    for (var dec of decorations) {\n      var rest = _objectWithoutProperties(dec, _excluded2$2);\n      var [start, end] = Range.edges(dec);\n      var next = [];\n      var leafEnd = 0;\n      var decorationStart = start.offset;\n      var decorationEnd = end.offset;\n      for (var leaf of leaves) {\n        var {\n          length\n        } = leaf.text;\n        var leafStart = leafEnd;\n        leafEnd += length; // If the range encompasses the entire leaf, add the range.\n\n        if (decorationStart <= leafStart && leafEnd <= decorationEnd) {\n          Object.assign(leaf, rest);\n          next.push(leaf);\n          continue;\n        } // If the range expanded and match the leaf, or starts after, or ends before it, continue.\n\n        if (decorationStart !== decorationEnd && (decorationStart === leafEnd || decorationEnd === leafStart) || decorationStart > leafEnd || decorationEnd < leafStart || decorationEnd === leafStart && leafStart !== 0) {\n          next.push(leaf);\n          continue;\n        } // Otherwise we need to split the leaf, at the start, end, or both,\n        // and add the range to the middle intersecting section. Do the end\n        // split first since we don't need to update the offset that way.\n\n        var middle = leaf;\n        var before = void 0;\n        var after = void 0;\n        if (decorationEnd < leafEnd) {\n          var off = decorationEnd - leafStart;\n          after = _objectSpread$a(_objectSpread$a({}, middle), {}, {\n            text: middle.text.slice(off)\n          });\n          middle = _objectSpread$a(_objectSpread$a({}, middle), {}, {\n            text: middle.text.slice(0, off)\n          });\n        }\n        if (decorationStart > leafStart) {\n          var _off = decorationStart - leafStart;\n          before = _objectSpread$a(_objectSpread$a({}, middle), {}, {\n            text: middle.text.slice(0, _off)\n          });\n          middle = _objectSpread$a(_objectSpread$a({}, middle), {}, {\n            text: middle.text.slice(_off)\n          });\n        }\n        Object.assign(middle, rest);\n        if (before) {\n          next.push(before);\n        }\n        next.push(middle);\n        if (after) {\n          next.push(after);\n        }\n      }\n      leaves = next;\n    }\n    return leaves;\n  }\n};\n\n/**\r\n * Get the default location to insert content into the editor.\r\n * By default, use the selection as the target location. But if there is\r\n * no selection, insert at the end of the document since that is such a\r\n * common use case when inserting from a non-selected state.\r\n */\n\nvar getDefaultInsertLocation = editor => {\n  if (editor.selection) {\n    return editor.selection;\n  } else if (editor.children.length > 0) {\n    return Editor.end(editor, []);\n  } else {\n    return [0];\n  }\n};\nvar matchPath = (editor, path) => {\n  var [node] = Editor.node(editor, path);\n  return n => n === node;\n};\n\n// Character (grapheme cluster) boundaries are determined according to\n// the default grapheme cluster boundary specification, extended grapheme clusters variant[1].\n//\n// References:\n//\n// [1] https://www.unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table\n// [2] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt\n// [3] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.html\n// [4] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.txt\n\n/**\r\n * Get the distance to the end of the first character in a string of text.\r\n */\nvar getCharacterDistance = function getCharacterDistance(str) {\n  var isRTL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var isLTR = !isRTL;\n  var codepoints = isRTL ? codepointsIteratorRTL(str) : str;\n  var left = CodepointType.None;\n  var right = CodepointType.None;\n  var distance = 0; // Evaluation of these conditions are deferred.\n\n  var gb11 = null; // Is GB11 applicable?\n\n  var gb12Or13 = null; // Is GB12 or GB13 applicable?\n\n  for (var char of codepoints) {\n    var code = char.codePointAt(0);\n    if (!code) break;\n    var type = getCodepointType(char, code);\n    [left, right] = isLTR ? [right, type] : [type, left];\n    if (intersects(left, CodepointType.ZWJ) && intersects(right, CodepointType.ExtPict)) {\n      if (isLTR) {\n        gb11 = endsWithEmojiZWJ(str.substring(0, distance));\n      } else {\n        gb11 = endsWithEmojiZWJ(str.substring(0, str.length - distance));\n      }\n      if (!gb11) break;\n    }\n    if (intersects(left, CodepointType.RI) && intersects(right, CodepointType.RI)) {\n      if (gb12Or13 !== null) {\n        gb12Or13 = !gb12Or13;\n      } else {\n        if (isLTR) {\n          gb12Or13 = true;\n        } else {\n          gb12Or13 = endsWithOddNumberOfRIs(str.substring(0, str.length - distance));\n        }\n      }\n      if (!gb12Or13) break;\n    }\n    if (left !== CodepointType.None && right !== CodepointType.None && isBoundaryPair(left, right)) {\n      break;\n    }\n    distance += char.length;\n  }\n  return distance || 1;\n};\nvar SPACE = /\\s/;\nvar PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/;\nvar CHAMELEON = /['\\u2018\\u2019]/;\n/**\r\n * Get the distance to the end of the first word in a string of text.\r\n */\n\nvar getWordDistance = function getWordDistance(text) {\n  var isRTL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var dist = 0;\n  var started = false;\n  while (text.length > 0) {\n    var charDist = getCharacterDistance(text, isRTL);\n    var [char, remaining] = splitByCharacterDistance(text, charDist, isRTL);\n    if (isWordCharacter(char, remaining, isRTL)) {\n      started = true;\n      dist += charDist;\n    } else if (!started) {\n      dist += charDist;\n    } else {\n      break;\n    }\n    text = remaining;\n  }\n  return dist;\n};\n/**\r\n * Split a string in two parts at a given distance starting from the end when\r\n * `isRTL` is set to `true`.\r\n */\n\nvar splitByCharacterDistance = (str, dist, isRTL) => {\n  if (isRTL) {\n    var at = str.length - dist;\n    return [str.slice(at, str.length), str.slice(0, at)];\n  }\n  return [str.slice(0, dist), str.slice(dist)];\n};\n/**\r\n * Check if a character is a word character. The `remaining` argument is used\r\n * because sometimes you must read subsequent characters to truly determine it.\r\n */\n\nvar isWordCharacter = function isWordCharacter(char, remaining) {\n  var isRTL = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (SPACE.test(char)) {\n    return false;\n  } // Chameleons count as word characters as long as they're in a word, so\n  // recurse to see if the next one is a word character or not.\n\n  if (CHAMELEON.test(char)) {\n    var charDist = getCharacterDistance(remaining, isRTL);\n    var [nextChar, nextRemaining] = splitByCharacterDistance(remaining, charDist, isRTL);\n    if (isWordCharacter(nextChar, nextRemaining, isRTL)) {\n      return true;\n    }\n  }\n  if (PUNCTUATION.test(char)) {\n    return false;\n  }\n  return true;\n};\n/**\r\n * Iterate on codepoints from right to left.\r\n */\n\nvar codepointsIteratorRTL = function* codepointsIteratorRTL(str) {\n  var end = str.length - 1;\n  for (var i = 0; i < str.length; i++) {\n    var char1 = str.charAt(end - i);\n    if (isLowSurrogate(char1.charCodeAt(0))) {\n      var char2 = str.charAt(end - i - 1);\n      if (isHighSurrogate(char2.charCodeAt(0))) {\n        yield char2 + char1;\n        i++;\n        continue;\n      }\n    }\n    yield char1;\n  }\n};\n/**\r\n * Is `charCode` a high surrogate.\r\n *\r\n * https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\r\n */\n\nvar isHighSurrogate = charCode => {\n  return charCode >= 0xd800 && charCode <= 0xdbff;\n};\n/**\r\n * Is `charCode` a low surrogate.\r\n *\r\n * https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\r\n */\n\nvar isLowSurrogate = charCode => {\n  return charCode >= 0xdc00 && charCode <= 0xdfff;\n};\nvar CodepointType;\n(function (CodepointType) {\n  CodepointType[CodepointType[\"None\"] = 0] = \"None\";\n  CodepointType[CodepointType[\"Extend\"] = 1] = \"Extend\";\n  CodepointType[CodepointType[\"ZWJ\"] = 2] = \"ZWJ\";\n  CodepointType[CodepointType[\"RI\"] = 4] = \"RI\";\n  CodepointType[CodepointType[\"Prepend\"] = 8] = \"Prepend\";\n  CodepointType[CodepointType[\"SpacingMark\"] = 16] = \"SpacingMark\";\n  CodepointType[CodepointType[\"L\"] = 32] = \"L\";\n  CodepointType[CodepointType[\"V\"] = 64] = \"V\";\n  CodepointType[CodepointType[\"T\"] = 128] = \"T\";\n  CodepointType[CodepointType[\"LV\"] = 256] = \"LV\";\n  CodepointType[CodepointType[\"LVT\"] = 512] = \"LVT\";\n  CodepointType[CodepointType[\"ExtPict\"] = 1024] = \"ExtPict\";\n  CodepointType[CodepointType[\"Any\"] = 2048] = \"Any\";\n})(CodepointType || (CodepointType = {}));\nvar reExtend = /^(?:[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09BE\\u09C1-\\u09C4\\u09CD\\u09D7\\u09E2\\u09E3\\u09FE\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3E\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE\\u0BC0\\u0BCD\\u0BD7\\u0C00\\u0C04\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC2\\u0CC6\\u0CCC\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D00\\u0D01\\u0D3B\\u0D3C\\u0D3E\\u0D41-\\u0D44\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D81\\u0DCA\\u0DCF\\u0DD2-\\u0DD4\\u0DD6\\u0DDF\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1AC0\\u1B00-\\u1B03\\u1B34-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u200C\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA82C\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9BD\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFF9E\\uFF9F]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD803[\\uDD24-\\uDD27\\uDEAB\\uDEAC\\uDF46-\\uDF50]|\\uD804[\\uDC01\\uDC38-\\uDC46\\uDC7F-\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD2B\\uDD2D-\\uDD34\\uDD73\\uDD80\\uDD81\\uDDB6-\\uDDBE\\uDDC9-\\uDDCC\\uDDCF\\uDE2F-\\uDE31\\uDE34\\uDE36\\uDE37\\uDE3E\\uDEDF\\uDEE3-\\uDEEA\\uDF00\\uDF01\\uDF3B\\uDF3C\\uDF3E\\uDF40\\uDF57\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC38-\\uDC3F\\uDC42-\\uDC44\\uDC46\\uDC5E\\uDCB0\\uDCB3-\\uDCB8\\uDCBA\\uDCBD\\uDCBF\\uDCC0\\uDCC2\\uDCC3\\uDDAF\\uDDB2-\\uDDB5\\uDDBC\\uDDBD\\uDDBF\\uDDC0\\uDDDC\\uDDDD\\uDE33-\\uDE3A\\uDE3D\\uDE3F\\uDE40\\uDEAB\\uDEAD\\uDEB0-\\uDEB5\\uDEB7\\uDF1D-\\uDF1F\\uDF22-\\uDF25\\uDF27-\\uDF2B]|\\uD806[\\uDC2F-\\uDC37\\uDC39\\uDC3A\\uDD30\\uDD3B\\uDD3C\\uDD3E\\uDD43\\uDDD4-\\uDDD7\\uDDDA\\uDDDB\\uDDE0\\uDE01-\\uDE0A\\uDE33-\\uDE38\\uDE3B-\\uDE3E\\uDE47\\uDE51-\\uDE56\\uDE59-\\uDE5B\\uDE8A-\\uDE96\\uDE98\\uDE99]|\\uD807[\\uDC30-\\uDC36\\uDC38-\\uDC3D\\uDC3F\\uDC92-\\uDCA7\\uDCAA-\\uDCB0\\uDCB2\\uDCB3\\uDCB5\\uDCB6\\uDD31-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD45\\uDD47\\uDD90\\uDD91\\uDD95\\uDD97\\uDEF3\\uDEF4]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF4F\\uDF8F-\\uDF92\\uDFE4]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65\\uDD67-\\uDD69\\uDD6E-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A\\uDD30-\\uDD36\\uDEEC-\\uDEEF]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A]|\\uD83C[\\uDFFB-\\uDFFF]|\\uDB40[\\uDC20-\\uDC7F\\uDD00-\\uDDEF])$/;\nvar rePrepend = /^(?:[\\u0600-\\u0605\\u06DD\\u070F\\u0890\\u0891\\u08E2\\u0D4E]|\\uD804[\\uDCBD\\uDCCD\\uDDC2\\uDDC3]|\\uD806[\\uDD3F\\uDD41\\uDE3A\\uDE84-\\uDE89]|\\uD807\\uDD46)$/;\nvar reSpacingMark = /^(?:[\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u094F\\u0982\\u0983\\u09BF\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0\\u0CC1\\u0CC3\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0D02\\u0D03\\u0D3F\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D82\\u0D83\\u0DD0\\u0DD1\\u0DD8-\\u0DDE\\u0DF2\\u0DF3\\u0E33\\u0EB3\\u0F3E\\u0F3F\\u0F7F\\u1031\\u103B\\u103C\\u1056\\u1057\\u1084\\u1715\\u1734\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u1A19\\u1A1A\\u1A55\\u1A57\\u1A6D-\\u1A72\\u1B04\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF7\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BE-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAAEB\\uAAEE\\uAAEF\\uAAF5\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC]|\\uD804[\\uDC00\\uDC02\\uDC82\\uDCB0-\\uDCB2\\uDCB7\\uDCB8\\uDD2C\\uDD45\\uDD46\\uDD82\\uDDB3-\\uDDB5\\uDDBF\\uDDC0\\uDDCE\\uDE2C-\\uDE2E\\uDE32\\uDE33\\uDE35\\uDEE0-\\uDEE2\\uDF02\\uDF03\\uDF3F\\uDF41-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF62\\uDF63]|\\uD805[\\uDC35-\\uDC37\\uDC40\\uDC41\\uDC45\\uDCB1\\uDCB2\\uDCB9\\uDCBB\\uDCBC\\uDCBE\\uDCC1\\uDDB0\\uDDB1\\uDDB8-\\uDDBB\\uDDBE\\uDE30-\\uDE32\\uDE3B\\uDE3C\\uDE3E\\uDEAC\\uDEAE\\uDEAF\\uDEB6\\uDF26]|\\uD806[\\uDC2C-\\uDC2E\\uDC38\\uDD31-\\uDD35\\uDD37\\uDD38\\uDD3D\\uDD40\\uDD42\\uDDD1-\\uDDD3\\uDDDC-\\uDDDF\\uDDE4\\uDE39\\uDE57\\uDE58\\uDE97]|\\uD807[\\uDC2F\\uDC3E\\uDCA9\\uDCB1\\uDCB4\\uDD8A-\\uDD8E\\uDD93\\uDD94\\uDD96\\uDEF5\\uDEF6]|\\uD81B[\\uDF51-\\uDF87\\uDFF0\\uDFF1]|\\uD834[\\uDD66\\uDD6D])$/;\nvar reL = /^[\\u1100-\\u115F\\uA960-\\uA97C]$/;\nvar reV = /^[\\u1160-\\u11A7\\uD7B0-\\uD7C6]$/;\nvar reT = /^[\\u11A8-\\u11FF\\uD7CB-\\uD7FB]$/;\nvar reLV = /^[\\uAC00\\uAC1C\\uAC38\\uAC54\\uAC70\\uAC8C\\uACA8\\uACC4\\uACE0\\uACFC\\uAD18\\uAD34\\uAD50\\uAD6C\\uAD88\\uADA4\\uADC0\\uADDC\\uADF8\\uAE14\\uAE30\\uAE4C\\uAE68\\uAE84\\uAEA0\\uAEBC\\uAED8\\uAEF4\\uAF10\\uAF2C\\uAF48\\uAF64\\uAF80\\uAF9C\\uAFB8\\uAFD4\\uAFF0\\uB00C\\uB028\\uB044\\uB060\\uB07C\\uB098\\uB0B4\\uB0D0\\uB0EC\\uB108\\uB124\\uB140\\uB15C\\uB178\\uB194\\uB1B0\\uB1CC\\uB1E8\\uB204\\uB220\\uB23C\\uB258\\uB274\\uB290\\uB2AC\\uB2C8\\uB2E4\\uB300\\uB31C\\uB338\\uB354\\uB370\\uB38C\\uB3A8\\uB3C4\\uB3E0\\uB3FC\\uB418\\uB434\\uB450\\uB46C\\uB488\\uB4A4\\uB4C0\\uB4DC\\uB4F8\\uB514\\uB530\\uB54C\\uB568\\uB584\\uB5A0\\uB5BC\\uB5D8\\uB5F4\\uB610\\uB62C\\uB648\\uB664\\uB680\\uB69C\\uB6B8\\uB6D4\\uB6F0\\uB70C\\uB728\\uB744\\uB760\\uB77C\\uB798\\uB7B4\\uB7D0\\uB7EC\\uB808\\uB824\\uB840\\uB85C\\uB878\\uB894\\uB8B0\\uB8CC\\uB8E8\\uB904\\uB920\\uB93C\\uB958\\uB974\\uB990\\uB9AC\\uB9C8\\uB9E4\\uBA00\\uBA1C\\uBA38\\uBA54\\uBA70\\uBA8C\\uBAA8\\uBAC4\\uBAE0\\uBAFC\\uBB18\\uBB34\\uBB50\\uBB6C\\uBB88\\uBBA4\\uBBC0\\uBBDC\\uBBF8\\uBC14\\uBC30\\uBC4C\\uBC68\\uBC84\\uBCA0\\uBCBC\\uBCD8\\uBCF4\\uBD10\\uBD2C\\uBD48\\uBD64\\uBD80\\uBD9C\\uBDB8\\uBDD4\\uBDF0\\uBE0C\\uBE28\\uBE44\\uBE60\\uBE7C\\uBE98\\uBEB4\\uBED0\\uBEEC\\uBF08\\uBF24\\uBF40\\uBF5C\\uBF78\\uBF94\\uBFB0\\uBFCC\\uBFE8\\uC004\\uC020\\uC03C\\uC058\\uC074\\uC090\\uC0AC\\uC0C8\\uC0E4\\uC100\\uC11C\\uC138\\uC154\\uC170\\uC18C\\uC1A8\\uC1C4\\uC1E0\\uC1FC\\uC218\\uC234\\uC250\\uC26C\\uC288\\uC2A4\\uC2C0\\uC2DC\\uC2F8\\uC314\\uC330\\uC34C\\uC368\\uC384\\uC3A0\\uC3BC\\uC3D8\\uC3F4\\uC410\\uC42C\\uC448\\uC464\\uC480\\uC49C\\uC4B8\\uC4D4\\uC4F0\\uC50C\\uC528\\uC544\\uC560\\uC57C\\uC598\\uC5B4\\uC5D0\\uC5EC\\uC608\\uC624\\uC640\\uC65C\\uC678\\uC694\\uC6B0\\uC6CC\\uC6E8\\uC704\\uC720\\uC73C\\uC758\\uC774\\uC790\\uC7AC\\uC7C8\\uC7E4\\uC800\\uC81C\\uC838\\uC854\\uC870\\uC88C\\uC8A8\\uC8C4\\uC8E0\\uC8FC\\uC918\\uC934\\uC950\\uC96C\\uC988\\uC9A4\\uC9C0\\uC9DC\\uC9F8\\uCA14\\uCA30\\uCA4C\\uCA68\\uCA84\\uCAA0\\uCABC\\uCAD8\\uCAF4\\uCB10\\uCB2C\\uCB48\\uCB64\\uCB80\\uCB9C\\uCBB8\\uCBD4\\uCBF0\\uCC0C\\uCC28\\uCC44\\uCC60\\uCC7C\\uCC98\\uCCB4\\uCCD0\\uCCEC\\uCD08\\uCD24\\uCD40\\uCD5C\\uCD78\\uCD94\\uCDB0\\uCDCC\\uCDE8\\uCE04\\uCE20\\uCE3C\\uCE58\\uCE74\\uCE90\\uCEAC\\uCEC8\\uCEE4\\uCF00\\uCF1C\\uCF38\\uCF54\\uCF70\\uCF8C\\uCFA8\\uCFC4\\uCFE0\\uCFFC\\uD018\\uD034\\uD050\\uD06C\\uD088\\uD0A4\\uD0C0\\uD0DC\\uD0F8\\uD114\\uD130\\uD14C\\uD168\\uD184\\uD1A0\\uD1BC\\uD1D8\\uD1F4\\uD210\\uD22C\\uD248\\uD264\\uD280\\uD29C\\uD2B8\\uD2D4\\uD2F0\\uD30C\\uD328\\uD344\\uD360\\uD37C\\uD398\\uD3B4\\uD3D0\\uD3EC\\uD408\\uD424\\uD440\\uD45C\\uD478\\uD494\\uD4B0\\uD4CC\\uD4E8\\uD504\\uD520\\uD53C\\uD558\\uD574\\uD590\\uD5AC\\uD5C8\\uD5E4\\uD600\\uD61C\\uD638\\uD654\\uD670\\uD68C\\uD6A8\\uD6C4\\uD6E0\\uD6FC\\uD718\\uD734\\uD750\\uD76C\\uD788]$/;\nvar reLVT = /^[\\uAC01-\\uAC1B\\uAC1D-\\uAC37\\uAC39-\\uAC53\\uAC55-\\uAC6F\\uAC71-\\uAC8B\\uAC8D-\\uACA7\\uACA9-\\uACC3\\uACC5-\\uACDF\\uACE1-\\uACFB\\uACFD-\\uAD17\\uAD19-\\uAD33\\uAD35-\\uAD4F\\uAD51-\\uAD6B\\uAD6D-\\uAD87\\uAD89-\\uADA3\\uADA5-\\uADBF\\uADC1-\\uADDB\\uADDD-\\uADF7\\uADF9-\\uAE13\\uAE15-\\uAE2F\\uAE31-\\uAE4B\\uAE4D-\\uAE67\\uAE69-\\uAE83\\uAE85-\\uAE9F\\uAEA1-\\uAEBB\\uAEBD-\\uAED7\\uAED9-\\uAEF3\\uAEF5-\\uAF0F\\uAF11-\\uAF2B\\uAF2D-\\uAF47\\uAF49-\\uAF63\\uAF65-\\uAF7F\\uAF81-\\uAF9B\\uAF9D-\\uAFB7\\uAFB9-\\uAFD3\\uAFD5-\\uAFEF\\uAFF1-\\uB00B\\uB00D-\\uB027\\uB029-\\uB043\\uB045-\\uB05F\\uB061-\\uB07B\\uB07D-\\uB097\\uB099-\\uB0B3\\uB0B5-\\uB0CF\\uB0D1-\\uB0EB\\uB0ED-\\uB107\\uB109-\\uB123\\uB125-\\uB13F\\uB141-\\uB15B\\uB15D-\\uB177\\uB179-\\uB193\\uB195-\\uB1AF\\uB1B1-\\uB1CB\\uB1CD-\\uB1E7\\uB1E9-\\uB203\\uB205-\\uB21F\\uB221-\\uB23B\\uB23D-\\uB257\\uB259-\\uB273\\uB275-\\uB28F\\uB291-\\uB2AB\\uB2AD-\\uB2C7\\uB2C9-\\uB2E3\\uB2E5-\\uB2FF\\uB301-\\uB31B\\uB31D-\\uB337\\uB339-\\uB353\\uB355-\\uB36F\\uB371-\\uB38B\\uB38D-\\uB3A7\\uB3A9-\\uB3C3\\uB3C5-\\uB3DF\\uB3E1-\\uB3FB\\uB3FD-\\uB417\\uB419-\\uB433\\uB435-\\uB44F\\uB451-\\uB46B\\uB46D-\\uB487\\uB489-\\uB4A3\\uB4A5-\\uB4BF\\uB4C1-\\uB4DB\\uB4DD-\\uB4F7\\uB4F9-\\uB513\\uB515-\\uB52F\\uB531-\\uB54B\\uB54D-\\uB567\\uB569-\\uB583\\uB585-\\uB59F\\uB5A1-\\uB5BB\\uB5BD-\\uB5D7\\uB5D9-\\uB5F3\\uB5F5-\\uB60F\\uB611-\\uB62B\\uB62D-\\uB647\\uB649-\\uB663\\uB665-\\uB67F\\uB681-\\uB69B\\uB69D-\\uB6B7\\uB6B9-\\uB6D3\\uB6D5-\\uB6EF\\uB6F1-\\uB70B\\uB70D-\\uB727\\uB729-\\uB743\\uB745-\\uB75F\\uB761-\\uB77B\\uB77D-\\uB797\\uB799-\\uB7B3\\uB7B5-\\uB7CF\\uB7D1-\\uB7EB\\uB7ED-\\uB807\\uB809-\\uB823\\uB825-\\uB83F\\uB841-\\uB85B\\uB85D-\\uB877\\uB879-\\uB893\\uB895-\\uB8AF\\uB8B1-\\uB8CB\\uB8CD-\\uB8E7\\uB8E9-\\uB903\\uB905-\\uB91F\\uB921-\\uB93B\\uB93D-\\uB957\\uB959-\\uB973\\uB975-\\uB98F\\uB991-\\uB9AB\\uB9AD-\\uB9C7\\uB9C9-\\uB9E3\\uB9E5-\\uB9FF\\uBA01-\\uBA1B\\uBA1D-\\uBA37\\uBA39-\\uBA53\\uBA55-\\uBA6F\\uBA71-\\uBA8B\\uBA8D-\\uBAA7\\uBAA9-\\uBAC3\\uBAC5-\\uBADF\\uBAE1-\\uBAFB\\uBAFD-\\uBB17\\uBB19-\\uBB33\\uBB35-\\uBB4F\\uBB51-\\uBB6B\\uBB6D-\\uBB87\\uBB89-\\uBBA3\\uBBA5-\\uBBBF\\uBBC1-\\uBBDB\\uBBDD-\\uBBF7\\uBBF9-\\uBC13\\uBC15-\\uBC2F\\uBC31-\\uBC4B\\uBC4D-\\uBC67\\uBC69-\\uBC83\\uBC85-\\uBC9F\\uBCA1-\\uBCBB\\uBCBD-\\uBCD7\\uBCD9-\\uBCF3\\uBCF5-\\uBD0F\\uBD11-\\uBD2B\\uBD2D-\\uBD47\\uBD49-\\uBD63\\uBD65-\\uBD7F\\uBD81-\\uBD9B\\uBD9D-\\uBDB7\\uBDB9-\\uBDD3\\uBDD5-\\uBDEF\\uBDF1-\\uBE0B\\uBE0D-\\uBE27\\uBE29-\\uBE43\\uBE45-\\uBE5F\\uBE61-\\uBE7B\\uBE7D-\\uBE97\\uBE99-\\uBEB3\\uBEB5-\\uBECF\\uBED1-\\uBEEB\\uBEED-\\uBF07\\uBF09-\\uBF23\\uBF25-\\uBF3F\\uBF41-\\uBF5B\\uBF5D-\\uBF77\\uBF79-\\uBF93\\uBF95-\\uBFAF\\uBFB1-\\uBFCB\\uBFCD-\\uBFE7\\uBFE9-\\uC003\\uC005-\\uC01F\\uC021-\\uC03B\\uC03D-\\uC057\\uC059-\\uC073\\uC075-\\uC08F\\uC091-\\uC0AB\\uC0AD-\\uC0C7\\uC0C9-\\uC0E3\\uC0E5-\\uC0FF\\uC101-\\uC11B\\uC11D-\\uC137\\uC139-\\uC153\\uC155-\\uC16F\\uC171-\\uC18B\\uC18D-\\uC1A7\\uC1A9-\\uC1C3\\uC1C5-\\uC1DF\\uC1E1-\\uC1FB\\uC1FD-\\uC217\\uC219-\\uC233\\uC235-\\uC24F\\uC251-\\uC26B\\uC26D-\\uC287\\uC289-\\uC2A3\\uC2A5-\\uC2BF\\uC2C1-\\uC2DB\\uC2DD-\\uC2F7\\uC2F9-\\uC313\\uC315-\\uC32F\\uC331-\\uC34B\\uC34D-\\uC367\\uC369-\\uC383\\uC385-\\uC39F\\uC3A1-\\uC3BB\\uC3BD-\\uC3D7\\uC3D9-\\uC3F3\\uC3F5-\\uC40F\\uC411-\\uC42B\\uC42D-\\uC447\\uC449-\\uC463\\uC465-\\uC47F\\uC481-\\uC49B\\uC49D-\\uC4B7\\uC4B9-\\uC4D3\\uC4D5-\\uC4EF\\uC4F1-\\uC50B\\uC50D-\\uC527\\uC529-\\uC543\\uC545-\\uC55F\\uC561-\\uC57B\\uC57D-\\uC597\\uC599-\\uC5B3\\uC5B5-\\uC5CF\\uC5D1-\\uC5EB\\uC5ED-\\uC607\\uC609-\\uC623\\uC625-\\uC63F\\uC641-\\uC65B\\uC65D-\\uC677\\uC679-\\uC693\\uC695-\\uC6AF\\uC6B1-\\uC6CB\\uC6CD-\\uC6E7\\uC6E9-\\uC703\\uC705-\\uC71F\\uC721-\\uC73B\\uC73D-\\uC757\\uC759-\\uC773\\uC775-\\uC78F\\uC791-\\uC7AB\\uC7AD-\\uC7C7\\uC7C9-\\uC7E3\\uC7E5-\\uC7FF\\uC801-\\uC81B\\uC81D-\\uC837\\uC839-\\uC853\\uC855-\\uC86F\\uC871-\\uC88B\\uC88D-\\uC8A7\\uC8A9-\\uC8C3\\uC8C5-\\uC8DF\\uC8E1-\\uC8FB\\uC8FD-\\uC917\\uC919-\\uC933\\uC935-\\uC94F\\uC951-\\uC96B\\uC96D-\\uC987\\uC989-\\uC9A3\\uC9A5-\\uC9BF\\uC9C1-\\uC9DB\\uC9DD-\\uC9F7\\uC9F9-\\uCA13\\uCA15-\\uCA2F\\uCA31-\\uCA4B\\uCA4D-\\uCA67\\uCA69-\\uCA83\\uCA85-\\uCA9F\\uCAA1-\\uCABB\\uCABD-\\uCAD7\\uCAD9-\\uCAF3\\uCAF5-\\uCB0F\\uCB11-\\uCB2B\\uCB2D-\\uCB47\\uCB49-\\uCB63\\uCB65-\\uCB7F\\uCB81-\\uCB9B\\uCB9D-\\uCBB7\\uCBB9-\\uCBD3\\uCBD5-\\uCBEF\\uCBF1-\\uCC0B\\uCC0D-\\uCC27\\uCC29-\\uCC43\\uCC45-\\uCC5F\\uCC61-\\uCC7B\\uCC7D-\\uCC97\\uCC99-\\uCCB3\\uCCB5-\\uCCCF\\uCCD1-\\uCCEB\\uCCED-\\uCD07\\uCD09-\\uCD23\\uCD25-\\uCD3F\\uCD41-\\uCD5B\\uCD5D-\\uCD77\\uCD79-\\uCD93\\uCD95-\\uCDAF\\uCDB1-\\uCDCB\\uCDCD-\\uCDE7\\uCDE9-\\uCE03\\uCE05-\\uCE1F\\uCE21-\\uCE3B\\uCE3D-\\uCE57\\uCE59-\\uCE73\\uCE75-\\uCE8F\\uCE91-\\uCEAB\\uCEAD-\\uCEC7\\uCEC9-\\uCEE3\\uCEE5-\\uCEFF\\uCF01-\\uCF1B\\uCF1D-\\uCF37\\uCF39-\\uCF53\\uCF55-\\uCF6F\\uCF71-\\uCF8B\\uCF8D-\\uCFA7\\uCFA9-\\uCFC3\\uCFC5-\\uCFDF\\uCFE1-\\uCFFB\\uCFFD-\\uD017\\uD019-\\uD033\\uD035-\\uD04F\\uD051-\\uD06B\\uD06D-\\uD087\\uD089-\\uD0A3\\uD0A5-\\uD0BF\\uD0C1-\\uD0DB\\uD0DD-\\uD0F7\\uD0F9-\\uD113\\uD115-\\uD12F\\uD131-\\uD14B\\uD14D-\\uD167\\uD169-\\uD183\\uD185-\\uD19F\\uD1A1-\\uD1BB\\uD1BD-\\uD1D7\\uD1D9-\\uD1F3\\uD1F5-\\uD20F\\uD211-\\uD22B\\uD22D-\\uD247\\uD249-\\uD263\\uD265-\\uD27F\\uD281-\\uD29B\\uD29D-\\uD2B7\\uD2B9-\\uD2D3\\uD2D5-\\uD2EF\\uD2F1-\\uD30B\\uD30D-\\uD327\\uD329-\\uD343\\uD345-\\uD35F\\uD361-\\uD37B\\uD37D-\\uD397\\uD399-\\uD3B3\\uD3B5-\\uD3CF\\uD3D1-\\uD3EB\\uD3ED-\\uD407\\uD409-\\uD423\\uD425-\\uD43F\\uD441-\\uD45B\\uD45D-\\uD477\\uD479-\\uD493\\uD495-\\uD4AF\\uD4B1-\\uD4CB\\uD4CD-\\uD4E7\\uD4E9-\\uD503\\uD505-\\uD51F\\uD521-\\uD53B\\uD53D-\\uD557\\uD559-\\uD573\\uD575-\\uD58F\\uD591-\\uD5AB\\uD5AD-\\uD5C7\\uD5C9-\\uD5E3\\uD5E5-\\uD5FF\\uD601-\\uD61B\\uD61D-\\uD637\\uD639-\\uD653\\uD655-\\uD66F\\uD671-\\uD68B\\uD68D-\\uD6A7\\uD6A9-\\uD6C3\\uD6C5-\\uD6DF\\uD6E1-\\uD6FB\\uD6FD-\\uD717\\uD719-\\uD733\\uD735-\\uD74F\\uD751-\\uD76B\\uD76D-\\uD787\\uD789-\\uD7A3]$/;\nvar reExtPict = /^(?:[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u2388\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2605\\u2607-\\u2612\\u2614-\\u2685\\u2690-\\u2705\\u2708-\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763-\\u2767\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC00-\\uDCFF\\uDD0D-\\uDD0F\\uDD2F\\uDD6C-\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDAD-\\uDDE5\\uDE01-\\uDE0F\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE3C-\\uDE3F\\uDE49-\\uDFFA]|\\uD83D[\\uDC00-\\uDD3D\\uDD46-\\uDE4F\\uDE80-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDCFF\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDEFF]|\\uD83F[\\uDC00-\\uDFFD])$/;\nvar getCodepointType = (char, code) => {\n  var type = CodepointType.Any;\n  if (char.search(reExtend) !== -1) {\n    type |= CodepointType.Extend;\n  }\n  if (code === 0x200d) {\n    type |= CodepointType.ZWJ;\n  }\n  if (code >= 0x1f1e6 && code <= 0x1f1ff) {\n    type |= CodepointType.RI;\n  }\n  if (char.search(rePrepend) !== -1) {\n    type |= CodepointType.Prepend;\n  }\n  if (char.search(reSpacingMark) !== -1) {\n    type |= CodepointType.SpacingMark;\n  }\n  if (char.search(reL) !== -1) {\n    type |= CodepointType.L;\n  }\n  if (char.search(reV) !== -1) {\n    type |= CodepointType.V;\n  }\n  if (char.search(reT) !== -1) {\n    type |= CodepointType.T;\n  }\n  if (char.search(reLV) !== -1) {\n    type |= CodepointType.LV;\n  }\n  if (char.search(reLVT) !== -1) {\n    type |= CodepointType.LVT;\n  }\n  if (char.search(reExtPict) !== -1) {\n    type |= CodepointType.ExtPict;\n  }\n  return type;\n};\nfunction intersects(x, y) {\n  return (x & y) !== 0;\n}\nvar NonBoundaryPairs = [\n// GB6\n[CodepointType.L, CodepointType.L | CodepointType.V | CodepointType.LV | CodepointType.LVT],\n// GB7\n[CodepointType.LV | CodepointType.V, CodepointType.V | CodepointType.T],\n// GB8\n[CodepointType.LVT | CodepointType.T, CodepointType.T],\n// GB9\n[CodepointType.Any, CodepointType.Extend | CodepointType.ZWJ],\n// GB9a\n[CodepointType.Any, CodepointType.SpacingMark],\n// GB9b\n[CodepointType.Prepend, CodepointType.Any],\n// GB11\n[CodepointType.ZWJ, CodepointType.ExtPict],\n// GB12 and GB13\n[CodepointType.RI, CodepointType.RI]];\nfunction isBoundaryPair(left, right) {\n  return NonBoundaryPairs.findIndex(r => intersects(left, r[0]) && intersects(right, r[1])) === -1;\n}\nvar endingEmojiZWJ = /(?:[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u2388\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2605\\u2607-\\u2612\\u2614-\\u2685\\u2690-\\u2705\\u2708-\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763-\\u2767\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC00-\\uDCFF\\uDD0D-\\uDD0F\\uDD2F\\uDD6C-\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDAD-\\uDDE5\\uDE01-\\uDE0F\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE3C-\\uDE3F\\uDE49-\\uDFFA]|\\uD83D[\\uDC00-\\uDD3D\\uDD46-\\uDE4F\\uDE80-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDCFF\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDEFF]|\\uD83F[\\uDC00-\\uDFFD])(?:[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09BE\\u09C1-\\u09C4\\u09CD\\u09D7\\u09E2\\u09E3\\u09FE\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3E\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE\\u0BC0\\u0BCD\\u0BD7\\u0C00\\u0C04\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC2\\u0CC6\\u0CCC\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D00\\u0D01\\u0D3B\\u0D3C\\u0D3E\\u0D41-\\u0D44\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D81\\u0DCA\\u0DCF\\u0DD2-\\u0DD4\\u0DD6\\u0DDF\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1AC0\\u1B00-\\u1B03\\u1B34-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u200C\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA82C\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9BD\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFF9E\\uFF9F]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD803[\\uDD24-\\uDD27\\uDEAB\\uDEAC\\uDF46-\\uDF50]|\\uD804[\\uDC01\\uDC38-\\uDC46\\uDC7F-\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD2B\\uDD2D-\\uDD34\\uDD73\\uDD80\\uDD81\\uDDB6-\\uDDBE\\uDDC9-\\uDDCC\\uDDCF\\uDE2F-\\uDE31\\uDE34\\uDE36\\uDE37\\uDE3E\\uDEDF\\uDEE3-\\uDEEA\\uDF00\\uDF01\\uDF3B\\uDF3C\\uDF3E\\uDF40\\uDF57\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC38-\\uDC3F\\uDC42-\\uDC44\\uDC46\\uDC5E\\uDCB0\\uDCB3-\\uDCB8\\uDCBA\\uDCBD\\uDCBF\\uDCC0\\uDCC2\\uDCC3\\uDDAF\\uDDB2-\\uDDB5\\uDDBC\\uDDBD\\uDDBF\\uDDC0\\uDDDC\\uDDDD\\uDE33-\\uDE3A\\uDE3D\\uDE3F\\uDE40\\uDEAB\\uDEAD\\uDEB0-\\uDEB5\\uDEB7\\uDF1D-\\uDF1F\\uDF22-\\uDF25\\uDF27-\\uDF2B]|\\uD806[\\uDC2F-\\uDC37\\uDC39\\uDC3A\\uDD30\\uDD3B\\uDD3C\\uDD3E\\uDD43\\uDDD4-\\uDDD7\\uDDDA\\uDDDB\\uDDE0\\uDE01-\\uDE0A\\uDE33-\\uDE38\\uDE3B-\\uDE3E\\uDE47\\uDE51-\\uDE56\\uDE59-\\uDE5B\\uDE8A-\\uDE96\\uDE98\\uDE99]|\\uD807[\\uDC30-\\uDC36\\uDC38-\\uDC3D\\uDC3F\\uDC92-\\uDCA7\\uDCAA-\\uDCB0\\uDCB2\\uDCB3\\uDCB5\\uDCB6\\uDD31-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD45\\uDD47\\uDD90\\uDD91\\uDD95\\uDD97\\uDEF3\\uDEF4]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF4F\\uDF8F-\\uDF92\\uDFE4]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65\\uDD67-\\uDD69\\uDD6E-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A\\uDD30-\\uDD36\\uDEEC-\\uDEEF]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A]|\\uD83C[\\uDFFB-\\uDFFF]|\\uDB40[\\uDC20-\\uDC7F\\uDD00-\\uDDEF])*\\u200D$/;\nvar endsWithEmojiZWJ = str => {\n  return str.search(endingEmojiZWJ) !== -1;\n};\nvar endingRIs = /(?:\\uD83C[\\uDDE6-\\uDDFF])+$/g;\nvar endsWithOddNumberOfRIs = str => {\n  var match = str.match(endingRIs);\n  if (match === null) {\n    return false;\n  } else {\n    // A RI is represented by a surrogate pair.\n    var numRIs = match[0].length / 2;\n    return numRIs % 2 === 1;\n  }\n};\nvar TextTransforms = {\n  delete(editor, options) {\n    editor.delete(options);\n  },\n  insertFragment(editor, fragment, options) {\n    editor.insertFragment(fragment, options);\n  },\n  insertText(editor, text) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        voids = false\n      } = options;\n      var {\n        at = getDefaultInsertLocation(editor)\n      } = options;\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at);\n      }\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor;\n        } else {\n          var end = Range.end(at);\n          if (!voids && Editor.void(editor, {\n            at: end\n          })) {\n            return;\n          }\n          var start = Range.start(at);\n          var startRef = Editor.pointRef(editor, start);\n          var endRef = Editor.pointRef(editor, end);\n          Transforms.delete(editor, {\n            at,\n            voids\n          });\n          var startPoint = startRef.unref();\n          var endPoint = endRef.unref();\n          at = startPoint || endPoint;\n          Transforms.setSelection(editor, {\n            anchor: at,\n            focus: at\n          });\n        }\n      }\n      if (!voids && Editor.void(editor, {\n        at\n      }) || Editor.elementReadOnly(editor, {\n        at\n      })) {\n        return;\n      }\n      var {\n        path,\n        offset\n      } = at;\n      if (text.length > 0) editor.apply({\n        type: 'insert_text',\n        path,\n        offset,\n        text\n      });\n    });\n  }\n};\nfunction ownKeys$9(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$9(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$9(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$9(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar Transforms = _objectSpread$9(_objectSpread$9(_objectSpread$9(_objectSpread$9({}, GeneralTransforms), NodeTransforms), SelectionTransforms), TextTransforms);\nvar apply = (editor, op) => {\n  for (var ref of Editor.pathRefs(editor)) {\n    PathRef.transform(ref, op);\n  }\n  for (var _ref of Editor.pointRefs(editor)) {\n    PointRef.transform(_ref, op);\n  }\n  for (var _ref2 of Editor.rangeRefs(editor)) {\n    RangeRef.transform(_ref2, op);\n  }\n  var oldDirtyPaths = DIRTY_PATHS.get(editor) || [];\n  var oldDirtyPathKeys = DIRTY_PATH_KEYS.get(editor) || new Set();\n  var dirtyPaths;\n  var dirtyPathKeys;\n  var add = path => {\n    if (path) {\n      var key = path.join(',');\n      if (!dirtyPathKeys.has(key)) {\n        dirtyPathKeys.add(key);\n        dirtyPaths.push(path);\n      }\n    }\n  };\n  if (Path.operationCanTransformPath(op)) {\n    dirtyPaths = [];\n    dirtyPathKeys = new Set();\n    for (var path of oldDirtyPaths) {\n      var newPath = Path.transform(path, op);\n      add(newPath);\n    }\n  } else {\n    dirtyPaths = oldDirtyPaths;\n    dirtyPathKeys = oldDirtyPathKeys;\n  }\n  var newDirtyPaths = editor.getDirtyPaths(op);\n  for (var _path of newDirtyPaths) {\n    add(_path);\n  }\n  DIRTY_PATHS.set(editor, dirtyPaths);\n  DIRTY_PATH_KEYS.set(editor, dirtyPathKeys);\n  Transforms.transform(editor, op);\n  editor.operations.push(op);\n  Editor.normalize(editor, {\n    operation: op\n  }); // Clear any formats applied to the cursor if the selection changes.\n\n  if (op.type === 'set_selection') {\n    editor.marks = null;\n  }\n  if (!FLUSHING.get(editor)) {\n    FLUSHING.set(editor, true);\n    Promise.resolve().then(() => {\n      FLUSHING.set(editor, false);\n      editor.onChange({\n        operation: op\n      });\n      editor.operations = [];\n    });\n  }\n};\n\n/**\r\n * Get the \"dirty\" paths generated from an operation.\r\n */\n\nvar getDirtyPaths = (editor, op) => {\n  switch (op.type) {\n    case 'insert_text':\n    case 'remove_text':\n    case 'set_node':\n      {\n        var {\n          path\n        } = op;\n        return Path.levels(path);\n      }\n    case 'insert_node':\n      {\n        var {\n          node,\n          path: _path\n        } = op;\n        var levels = Path.levels(_path);\n        var descendants = Text.isText(node) ? [] : Array.from(Node.nodes(node), _ref => {\n          var [, p] = _ref;\n          return _path.concat(p);\n        });\n        return [...levels, ...descendants];\n      }\n    case 'merge_node':\n      {\n        var {\n          path: _path2\n        } = op;\n        var ancestors = Path.ancestors(_path2);\n        var previousPath = Path.previous(_path2);\n        return [...ancestors, previousPath];\n      }\n    case 'move_node':\n      {\n        var {\n          path: _path3,\n          newPath\n        } = op;\n        if (Path.equals(_path3, newPath)) {\n          return [];\n        }\n        var oldAncestors = [];\n        var newAncestors = [];\n        for (var ancestor of Path.ancestors(_path3)) {\n          var p = Path.transform(ancestor, op);\n          oldAncestors.push(p);\n        }\n        for (var _ancestor of Path.ancestors(newPath)) {\n          var _p = Path.transform(_ancestor, op);\n          newAncestors.push(_p);\n        }\n        var newParent = newAncestors[newAncestors.length - 1];\n        var newIndex = newPath[newPath.length - 1];\n        var resultPath = newParent.concat(newIndex);\n        return [...oldAncestors, ...newAncestors, resultPath];\n      }\n    case 'remove_node':\n      {\n        var {\n          path: _path4\n        } = op;\n        var _ancestors = Path.ancestors(_path4);\n        return [..._ancestors];\n      }\n    case 'split_node':\n      {\n        var {\n          path: _path5\n        } = op;\n        var _levels = Path.levels(_path5);\n        var nextPath = Path.next(_path5);\n        return [..._levels, nextPath];\n      }\n    default:\n      {\n        return [];\n      }\n  }\n};\nvar getFragment = editor => {\n  var {\n    selection\n  } = editor;\n  if (selection) {\n    return Node.fragment(editor, selection);\n  }\n  return [];\n};\nvar normalizeNode = (editor, entry) => {\n  var [node, path] = entry; // There are no core normalizations for text nodes.\n\n  if (Text.isText(node)) {\n    return;\n  } // Ensure that block and inline nodes have at least one text child.\n\n  if (Element.isElement(node) && node.children.length === 0) {\n    var child = {\n      text: ''\n    };\n    Transforms.insertNodes(editor, child, {\n      at: path.concat(0),\n      voids: true\n    });\n    return;\n  } // Determine whether the node should have block or inline children.\n\n  var shouldHaveInlines = Editor.isEditor(node) ? false : Element.isElement(node) && (editor.isInline(node) || node.children.length === 0 || Text.isText(node.children[0]) || editor.isInline(node.children[0])); // Since we'll be applying operations while iterating, keep track of an\n  // index that accounts for any added/removed nodes.\n\n  var n = 0;\n  for (var i = 0; i < node.children.length; i++, n++) {\n    var currentNode = Node.get(editor, path);\n    if (Text.isText(currentNode)) continue;\n    var _child = currentNode.children[n];\n    var prev = currentNode.children[n - 1];\n    var isLast = i === node.children.length - 1;\n    var isInlineOrText = Text.isText(_child) || Element.isElement(_child) && editor.isInline(_child); // Only allow block nodes in the top-level children and parent blocks\n    // that only contain block nodes. Similarly, only allow inline nodes in\n    // other inline nodes, or parent blocks that only contain inlines and\n    // text.\n\n    if (isInlineOrText !== shouldHaveInlines) {\n      Transforms.removeNodes(editor, {\n        at: path.concat(n),\n        voids: true\n      });\n      n--;\n    } else if (Element.isElement(_child)) {\n      // Ensure that inline nodes are surrounded by text nodes.\n      if (editor.isInline(_child)) {\n        if (prev == null || !Text.isText(prev)) {\n          var newChild = {\n            text: ''\n          };\n          Transforms.insertNodes(editor, newChild, {\n            at: path.concat(n),\n            voids: true\n          });\n          n++;\n        } else if (isLast) {\n          var _newChild = {\n            text: ''\n          };\n          Transforms.insertNodes(editor, _newChild, {\n            at: path.concat(n + 1),\n            voids: true\n          });\n          n++;\n        }\n      }\n    } else {\n      // Merge adjacent text nodes that are empty or match.\n      if (prev != null && Text.isText(prev)) {\n        if (Text.equals(_child, prev, {\n          loose: true\n        })) {\n          Transforms.mergeNodes(editor, {\n            at: path.concat(n),\n            voids: true\n          });\n          n--;\n        } else if (prev.text === '') {\n          Transforms.removeNodes(editor, {\n            at: path.concat(n - 1),\n            voids: true\n          });\n          n--;\n        } else if (_child.text === '') {\n          Transforms.removeNodes(editor, {\n            at: path.concat(n),\n            voids: true\n          });\n          n--;\n        }\n      }\n    }\n  }\n};\nvar shouldNormalize = (editor, _ref) => {\n  var {\n    iteration,\n    initialDirtyPathsLength\n  } = _ref;\n  var maxIterations = initialDirtyPathsLength * 42; // HACK: better way?\n\n  if (iteration > maxIterations) {\n    throw new Error(\"Could not completely normalize the editor after \".concat(maxIterations, \" iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\"));\n  }\n  return true;\n};\nvar above = function above(editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var {\n    voids = false,\n    mode = 'lowest',\n    at = editor.selection,\n    match\n  } = options;\n  if (!at) {\n    return;\n  }\n  var path = Editor.path(editor, at);\n  var reverse = mode === 'lowest';\n  for (var [n, p] of Editor.levels(editor, {\n    at: path,\n    voids,\n    match,\n    reverse\n  })) {\n    if (Text.isText(n)) continue;\n    if (Range.isRange(at)) {\n      if (Path.isAncestor(p, at.anchor.path) && Path.isAncestor(p, at.focus.path)) {\n        return [n, p];\n      }\n    } else {\n      if (!Path.equals(path, p)) {\n        return [n, p];\n      }\n    }\n  }\n};\nfunction ownKeys$8(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$8(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$8(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$8(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar addMark = (editor, key, value) => {\n  var {\n    selection\n  } = editor;\n  if (selection) {\n    var match = (node, path) => {\n      if (!Text.isText(node)) {\n        return false; // marks can only be applied to text\n      }\n      var [parentNode, parentPath] = Editor.parent(editor, path);\n      return !editor.isVoid(parentNode) || editor.markableVoid(parentNode);\n    };\n    var expandedSelection = Range.isExpanded(selection);\n    var markAcceptingVoidSelected = false;\n    if (!expandedSelection) {\n      var [selectedNode, selectedPath] = Editor.node(editor, selection);\n      if (selectedNode && match(selectedNode, selectedPath)) {\n        var [parentNode] = Editor.parent(editor, selectedPath);\n        markAcceptingVoidSelected = parentNode && editor.markableVoid(parentNode);\n      }\n    }\n    if (expandedSelection || markAcceptingVoidSelected) {\n      Transforms.setNodes(editor, {\n        [key]: value\n      }, {\n        match,\n        split: true,\n        voids: true\n      });\n    } else {\n      var marks = _objectSpread$8(_objectSpread$8({}, Editor.marks(editor) || {}), {}, {\n        [key]: value\n      });\n      editor.marks = marks;\n      if (!FLUSHING.get(editor)) {\n        editor.onChange();\n      }\n    }\n  }\n};\nfunction ownKeys$7(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$7(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$7(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$7(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar after = function after(editor, at) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var anchor = Editor.point(editor, at, {\n    edge: 'end'\n  });\n  var focus = Editor.end(editor, []);\n  var range = {\n    anchor,\n    focus\n  };\n  var {\n    distance = 1\n  } = options;\n  var d = 0;\n  var target;\n  for (var p of Editor.positions(editor, _objectSpread$7(_objectSpread$7({}, options), {}, {\n    at: range\n  }))) {\n    if (d > distance) {\n      break;\n    }\n    if (d !== 0) {\n      target = p;\n    }\n    d++;\n  }\n  return target;\n};\nfunction ownKeys$6(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$6(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$6(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$6(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar before = function before(editor, at) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var anchor = Editor.start(editor, []);\n  var focus = Editor.point(editor, at, {\n    edge: 'start'\n  });\n  var range = {\n    anchor,\n    focus\n  };\n  var {\n    distance = 1\n  } = options;\n  var d = 0;\n  var target;\n  for (var p of Editor.positions(editor, _objectSpread$6(_objectSpread$6({}, options), {}, {\n    at: range,\n    reverse: true\n  }))) {\n    if (d > distance) {\n      break;\n    }\n    if (d !== 0) {\n      target = p;\n    }\n    d++;\n  }\n  return target;\n};\nvar deleteBackward = (editor, unit) => {\n  var {\n    selection\n  } = editor;\n  if (selection && Range.isCollapsed(selection)) {\n    Transforms.delete(editor, {\n      unit,\n      reverse: true\n    });\n  }\n};\nvar deleteForward = (editor, unit) => {\n  var {\n    selection\n  } = editor;\n  if (selection && Range.isCollapsed(selection)) {\n    Transforms.delete(editor, {\n      unit\n    });\n  }\n};\nvar deleteFragment = function deleteFragment(editor) {\n  var {\n    direction = 'forward'\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var {\n    selection\n  } = editor;\n  if (selection && Range.isExpanded(selection)) {\n    Transforms.delete(editor, {\n      reverse: direction === 'backward'\n    });\n  }\n};\nvar edges = (editor, at) => {\n  return [Editor.start(editor, at), Editor.end(editor, at)];\n};\nfunction ownKeys$5(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$5(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$5(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$5(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar elementReadOnly = function elementReadOnly(editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Editor.above(editor, _objectSpread$5(_objectSpread$5({}, options), {}, {\n    match: n => Element.isElement(n) && Editor.isElementReadOnly(editor, n)\n  }));\n};\nvar end = (editor, at) => {\n  return Editor.point(editor, at, {\n    edge: 'end'\n  });\n};\nvar first = (editor, at) => {\n  var path = Editor.path(editor, at, {\n    edge: 'start'\n  });\n  return Editor.node(editor, path);\n};\nvar fragment = (editor, at) => {\n  var range = Editor.range(editor, at);\n  return Node.fragment(editor, range);\n};\nfunction ownKeys$4(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$4(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$4(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$4(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar getVoid = function getVoid(editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Editor.above(editor, _objectSpread$4(_objectSpread$4({}, options), {}, {\n    match: n => Element.isElement(n) && Editor.isVoid(editor, n)\n  }));\n};\nvar hasBlocks = (editor, element) => {\n  return element.children.some(n => Element.isElement(n) && Editor.isBlock(editor, n));\n};\nvar hasInlines = (editor, element) => {\n  return element.children.some(n => Text.isText(n) || Editor.isInline(editor, n));\n};\nvar hasPath = (editor, path) => {\n  return Node.has(editor, path);\n};\nvar hasTexts = (editor, element) => {\n  return element.children.every(n => Text.isText(n));\n};\nvar insertBreak = editor => {\n  Transforms.splitNodes(editor, {\n    always: true\n  });\n};\nvar insertNode = (editor, node, options) => {\n  Transforms.insertNodes(editor, node, options);\n};\nvar insertSoftBreak = editor => {\n  Transforms.splitNodes(editor, {\n    always: true\n  });\n};\nfunction ownKeys$3(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$3(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$3(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$3(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar insertText = function insertText(editor, text) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var {\n    selection,\n    marks\n  } = editor;\n  if (selection) {\n    if (marks) {\n      var node = _objectSpread$3({\n        text\n      }, marks);\n      Transforms.insertNodes(editor, node, {\n        at: options.at,\n        voids: options.voids\n      });\n    } else {\n      Transforms.insertText(editor, text, options);\n    }\n    editor.marks = null;\n  }\n};\nvar isBlock = (editor, value) => {\n  return !editor.isInline(value);\n};\nvar isEdge = (editor, point, at) => {\n  return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at);\n};\nvar isEmpty = (editor, element) => {\n  var {\n    children\n  } = element;\n  var [first] = children;\n  return children.length === 0 || children.length === 1 && Text.isText(first) && first.text === '' && !editor.isVoid(element);\n};\nvar isEnd = (editor, point, at) => {\n  var end = Editor.end(editor, at);\n  return Point.equals(point, end);\n};\nvar isNormalizing = editor => {\n  var isNormalizing = NORMALIZING.get(editor);\n  return isNormalizing === undefined ? true : isNormalizing;\n};\nvar isStart = (editor, point, at) => {\n  // PERF: If the offset isn't `0` we know it's not the start.\n  if (point.offset !== 0) {\n    return false;\n  }\n  var start = Editor.start(editor, at);\n  return Point.equals(point, start);\n};\nvar last = (editor, at) => {\n  var path = Editor.path(editor, at, {\n    edge: 'end'\n  });\n  return Editor.node(editor, path);\n};\nvar leaf = function leaf(editor, at) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var path = Editor.path(editor, at, options);\n  var node = Node.leaf(editor, path);\n  return [node, path];\n};\nfunction* levels(editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var {\n    at = editor.selection,\n    reverse = false,\n    voids = false\n  } = options;\n  var {\n    match\n  } = options;\n  if (match == null) {\n    match = () => true;\n  }\n  if (!at) {\n    return;\n  }\n  var levels = [];\n  var path = Editor.path(editor, at);\n  for (var [n, p] of Node.levels(editor, path)) {\n    if (!match(n, p)) {\n      continue;\n    }\n    levels.push([n, p]);\n    if (!voids && Element.isElement(n) && Editor.isVoid(editor, n)) {\n      break;\n    }\n  }\n  if (reverse) {\n    levels.reverse();\n  }\n  yield* levels;\n}\nvar _excluded$1 = [\"text\"],\n  _excluded2$1 = [\"text\"];\nvar marks = function marks(editor) {\n  var {\n    marks,\n    selection\n  } = editor;\n  if (!selection) {\n    return null;\n  }\n  if (marks) {\n    return marks;\n  }\n  if (Range.isExpanded(selection)) {\n    var [match] = Editor.nodes(editor, {\n      match: Text.isText\n    });\n    if (match) {\n      var [_node] = match;\n      var _rest = _objectWithoutProperties(_node, _excluded$1);\n      return _rest;\n    } else {\n      return {};\n    }\n  }\n  var {\n    anchor\n  } = selection;\n  var {\n    path\n  } = anchor;\n  var [node] = Editor.leaf(editor, path);\n  if (anchor.offset === 0) {\n    var prev = Editor.previous(editor, {\n      at: path,\n      match: Text.isText\n    });\n    var markedVoid = Editor.above(editor, {\n      match: n => Element.isElement(n) && Editor.isVoid(editor, n) && editor.markableVoid(n)\n    });\n    if (!markedVoid) {\n      var block = Editor.above(editor, {\n        match: n => Element.isElement(n) && Editor.isBlock(editor, n)\n      });\n      if (prev && block) {\n        var [prevNode, prevPath] = prev;\n        var [, blockPath] = block;\n        if (Path.isAncestor(blockPath, prevPath)) {\n          node = prevNode;\n        }\n      }\n    }\n  }\n  var rest = _objectWithoutProperties(node, _excluded2$1);\n  return rest;\n};\nvar next = function next(editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var {\n    mode = 'lowest',\n    voids = false\n  } = options;\n  var {\n    match,\n    at = editor.selection\n  } = options;\n  if (!at) {\n    return;\n  }\n  var pointAfterLocation = Editor.after(editor, at, {\n    voids\n  });\n  if (!pointAfterLocation) return;\n  var [, to] = Editor.last(editor, []);\n  var span = [pointAfterLocation.path, to];\n  if (Path.isPath(at) && at.length === 0) {\n    throw new Error(\"Cannot get the next node from the root node!\");\n  }\n  if (match == null) {\n    if (Path.isPath(at)) {\n      var [parent] = Editor.parent(editor, at);\n      match = n => parent.children.includes(n);\n    } else {\n      match = () => true;\n    }\n  }\n  var [next] = Editor.nodes(editor, {\n    at: span,\n    match,\n    mode,\n    voids\n  });\n  return next;\n};\nvar node = function node(editor, at) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var path = Editor.path(editor, at, options);\n  var node = Node.get(editor, path);\n  return [node, path];\n};\nfunction* nodes(editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var {\n    at = editor.selection,\n    mode = 'all',\n    universal = false,\n    reverse = false,\n    voids = false,\n    ignoreNonSelectable = false\n  } = options;\n  var {\n    match\n  } = options;\n  if (!match) {\n    match = () => true;\n  }\n  if (!at) {\n    return;\n  }\n  var from;\n  var to;\n  if (Span.isSpan(at)) {\n    from = at[0];\n    to = at[1];\n  } else {\n    var first = Editor.path(editor, at, {\n      edge: 'start'\n    });\n    var last = Editor.path(editor, at, {\n      edge: 'end'\n    });\n    from = reverse ? last : first;\n    to = reverse ? first : last;\n  }\n  var nodeEntries = Node.nodes(editor, {\n    reverse,\n    from,\n    to,\n    pass: _ref => {\n      var [node] = _ref;\n      if (!Element.isElement(node)) return false;\n      if (!voids && (Editor.isVoid(editor, node) || Editor.isElementReadOnly(editor, node))) return true;\n      if (ignoreNonSelectable && !Editor.isSelectable(editor, node)) return true;\n      return false;\n    }\n  });\n  var matches = [];\n  var hit;\n  for (var [node, path] of nodeEntries) {\n    if (ignoreNonSelectable && Element.isElement(node) && !Editor.isSelectable(editor, node)) {\n      continue;\n    }\n    var isLower = hit && Path.compare(path, hit[1]) === 0; // In highest mode any node lower than the last hit is not a match.\n\n    if (mode === 'highest' && isLower) {\n      continue;\n    }\n    if (!match(node, path)) {\n      // If we've arrived at a leaf text node that is not lower than the last\n      // hit, then we've found a branch that doesn't include a match, which\n      // means the match is not universal.\n      if (universal && !isLower && Text.isText(node)) {\n        return;\n      } else {\n        continue;\n      }\n    } // If there's a match and it's lower than the last, update the hit.\n\n    if (mode === 'lowest' && isLower) {\n      hit = [node, path];\n      continue;\n    } // In lowest mode we emit the last hit, once it's guaranteed lowest.\n\n    var emit = mode === 'lowest' ? hit : [node, path];\n    if (emit) {\n      if (universal) {\n        matches.push(emit);\n      } else {\n        yield emit;\n      }\n    }\n    hit = [node, path];\n  } // Since lowest is always emitting one behind, catch up at the end.\n\n  if (mode === 'lowest' && hit) {\n    if (universal) {\n      matches.push(hit);\n    } else {\n      yield hit;\n    }\n  } // Universal defers to ensure that the match occurs in every branch, so we\n  // yield all of the matches after iterating.\n\n  if (universal) {\n    yield* matches;\n  }\n}\nvar normalize = function normalize(editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var {\n    force = false,\n    operation\n  } = options;\n  var getDirtyPaths = editor => {\n    return DIRTY_PATHS.get(editor) || [];\n  };\n  var getDirtyPathKeys = editor => {\n    return DIRTY_PATH_KEYS.get(editor) || new Set();\n  };\n  var popDirtyPath = editor => {\n    var path = getDirtyPaths(editor).pop();\n    var key = path.join(',');\n    getDirtyPathKeys(editor).delete(key);\n    return path;\n  };\n  if (!Editor.isNormalizing(editor)) {\n    return;\n  }\n  if (force) {\n    var allPaths = Array.from(Node.nodes(editor), _ref => {\n      var [, p] = _ref;\n      return p;\n    });\n    var allPathKeys = new Set(allPaths.map(p => p.join(',')));\n    DIRTY_PATHS.set(editor, allPaths);\n    DIRTY_PATH_KEYS.set(editor, allPathKeys);\n  }\n  if (getDirtyPaths(editor).length === 0) {\n    return;\n  }\n  Editor.withoutNormalizing(editor, () => {\n    /*\r\n      Fix dirty elements with no children.\r\n      editor.normalizeNode() does fix this, but some normalization fixes also require it to work.\r\n      Running an initial pass avoids the catch-22 race condition.\r\n    */\n    for (var dirtyPath of getDirtyPaths(editor)) {\n      if (Node.has(editor, dirtyPath)) {\n        var entry = Editor.node(editor, dirtyPath);\n        var [node, _] = entry;\n        /*\r\n          The default normalizer inserts an empty text node in this scenario, but it can be customised.\r\n          So there is some risk here.\r\n                   As long as the normalizer only inserts child nodes for this case it is safe to do in any order;\r\n          by definition adding children to an empty node can't cause other paths to change.\r\n        */\n\n        if (Element.isElement(node) && node.children.length === 0) {\n          editor.normalizeNode(entry, {\n            operation\n          });\n        }\n      }\n    }\n    var dirtyPaths = getDirtyPaths(editor);\n    var initialDirtyPathsLength = dirtyPaths.length;\n    var iteration = 0;\n    while (dirtyPaths.length !== 0) {\n      if (!editor.shouldNormalize({\n        dirtyPaths,\n        iteration,\n        initialDirtyPathsLength,\n        operation\n      })) {\n        return;\n      }\n      var _dirtyPath = popDirtyPath(editor); // If the node doesn't exist in the tree, it does not need to be normalized.\n\n      if (Node.has(editor, _dirtyPath)) {\n        var _entry = Editor.node(editor, _dirtyPath);\n        editor.normalizeNode(_entry, {\n          operation\n        });\n      }\n      iteration++;\n      dirtyPaths = getDirtyPaths(editor);\n    }\n  });\n};\nvar parent = function parent(editor, at) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var path = Editor.path(editor, at, options);\n  var parentPath = Path.parent(path);\n  var entry = Editor.node(editor, parentPath);\n  return entry;\n};\nvar pathRef = function pathRef(editor, path) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var {\n    affinity = 'forward'\n  } = options;\n  var ref = {\n    current: path,\n    affinity,\n    unref() {\n      var {\n        current\n      } = ref;\n      var pathRefs = Editor.pathRefs(editor);\n      pathRefs.delete(ref);\n      ref.current = null;\n      return current;\n    }\n  };\n  var refs = Editor.pathRefs(editor);\n  refs.add(ref);\n  return ref;\n};\nvar pathRefs = editor => {\n  var refs = PATH_REFS.get(editor);\n  if (!refs) {\n    refs = new Set();\n    PATH_REFS.set(editor, refs);\n  }\n  return refs;\n};\nvar path = function path(editor, at) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var {\n    depth,\n    edge\n  } = options;\n  if (Path.isPath(at)) {\n    if (edge === 'start') {\n      var [, firstPath] = Node.first(editor, at);\n      at = firstPath;\n    } else if (edge === 'end') {\n      var [, lastPath] = Node.last(editor, at);\n      at = lastPath;\n    }\n  }\n  if (Range.isRange(at)) {\n    if (edge === 'start') {\n      at = Range.start(at);\n    } else if (edge === 'end') {\n      at = Range.end(at);\n    } else {\n      at = Path.common(at.anchor.path, at.focus.path);\n    }\n  }\n  if (Point.isPoint(at)) {\n    at = at.path;\n  }\n  if (depth != null) {\n    at = at.slice(0, depth);\n  }\n  return at;\n};\nvar pointRef = function pointRef(editor, point) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var {\n    affinity = 'forward'\n  } = options;\n  var ref = {\n    current: point,\n    affinity,\n    unref() {\n      var {\n        current\n      } = ref;\n      var pointRefs = Editor.pointRefs(editor);\n      pointRefs.delete(ref);\n      ref.current = null;\n      return current;\n    }\n  };\n  var refs = Editor.pointRefs(editor);\n  refs.add(ref);\n  return ref;\n};\nvar pointRefs = editor => {\n  var refs = POINT_REFS.get(editor);\n  if (!refs) {\n    refs = new Set();\n    POINT_REFS.set(editor, refs);\n  }\n  return refs;\n};\nvar point = function point(editor, at) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var {\n    edge = 'start'\n  } = options;\n  if (Path.isPath(at)) {\n    var path;\n    if (edge === 'end') {\n      var [, lastPath] = Node.last(editor, at);\n      path = lastPath;\n    } else {\n      var [, firstPath] = Node.first(editor, at);\n      path = firstPath;\n    }\n    var node = Node.get(editor, path);\n    if (!Text.isText(node)) {\n      throw new Error(\"Cannot get the \".concat(edge, \" point in the node at path [\").concat(at, \"] because it has no \").concat(edge, \" text node.\"));\n    }\n    return {\n      path,\n      offset: edge === 'end' ? node.text.length : 0\n    };\n  }\n  if (Range.isRange(at)) {\n    var [start, end] = Range.edges(at);\n    return edge === 'start' ? start : end;\n  }\n  return at;\n};\nfunction* positions(editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var {\n    at = editor.selection,\n    unit = 'offset',\n    reverse = false,\n    voids = false,\n    ignoreNonSelectable = false\n  } = options;\n  if (!at) {\n    return;\n  }\n  /**\r\n   * Algorithm notes:\r\n   *\r\n   * Each step `distance` is dynamic depending on the underlying text\r\n   * and the `unit` specified.  Each step, e.g., a line or word, may\r\n   * span multiple text nodes, so we iterate through the text both on\r\n   * two levels in step-sync:\r\n   *\r\n   * `leafText` stores the text on a text leaf level, and is advanced\r\n   * through using the counters `leafTextOffset` and `leafTextRemaining`.\r\n   *\r\n   * `blockText` stores the text on a block level, and is shortened\r\n   * by `distance` every time it is advanced.\r\n   *\r\n   * We only maintain a window of one blockText and one leafText because\r\n   * a block node always appears before all of its leaf nodes.\r\n   */\n\n  var range = Editor.range(editor, at);\n  var [start, end] = Range.edges(range);\n  var first = reverse ? end : start;\n  var isNewBlock = false;\n  var blockText = '';\n  var distance = 0; // Distance for leafText to catch up to blockText.\n\n  var leafTextRemaining = 0;\n  var leafTextOffset = 0; // Iterate through all nodes in range, grabbing entire textual content\n  // of block nodes in blockText, and text nodes in leafText.\n  // Exploits the fact that nodes are sequenced in such a way that we first\n  // encounter the block node, then all of its text nodes, so when iterating\n  // through the blockText and leafText we just need to remember a window of\n  // one block node and leaf node, respectively.\n\n  for (var [node, path] of Editor.nodes(editor, {\n    at,\n    reverse,\n    voids,\n    ignoreNonSelectable\n  })) {\n    /*\r\n     * ELEMENT NODE - Yield position(s) for voids, collect blockText for blocks\r\n     */\n    if (Element.isElement(node)) {\n      // Void nodes are a special case, so by default we will always\n      // yield their first point. If the `voids` option is set to true,\n      // then we will iterate over their content.\n      if (!voids && (editor.isVoid(node) || editor.isElementReadOnly(node))) {\n        yield Editor.start(editor, path);\n        continue;\n      } // Inline element nodes are ignored as they don't themselves\n      // contribute to `blockText` or `leafText` - their parent and\n      // children do.\n\n      if (editor.isInline(node)) continue; // Block element node - set `blockText` to its text content.\n\n      if (Editor.hasInlines(editor, node)) {\n        // We always exhaust block nodes before encountering a new one:\n        //   console.assert(blockText === '',\n        //     `blockText='${blockText}' - `+\n        //     `not exhausted before new block node`, path)\n        // Ensure range considered is capped to `range`, in the\n        // start/end edge cases where block extends beyond range.\n        // Equivalent to this, but presumably more performant:\n        //   blockRange = Editor.range(editor, ...Editor.edges(editor, path))\n        //   blockRange = Range.intersection(range, blockRange) // intersect\n        //   blockText = Editor.string(editor, blockRange, { voids })\n        var e = Path.isAncestor(path, end.path) ? end : Editor.end(editor, path);\n        var s = Path.isAncestor(path, start.path) ? start : Editor.start(editor, path);\n        blockText = Editor.string(editor, {\n          anchor: s,\n          focus: e\n        }, {\n          voids\n        });\n        isNewBlock = true;\n      }\n    }\n    /*\r\n     * TEXT LEAF NODE - Iterate through text content, yielding\r\n     * positions every `distance` offset according to `unit`.\r\n     */\n\n    if (Text.isText(node)) {\n      var isFirst = Path.equals(path, first.path); // Proof that we always exhaust text nodes before encountering a new one:\n      //   console.assert(leafTextRemaining <= 0,\n      //     `leafTextRemaining=${leafTextRemaining} - `+\n      //     `not exhausted before new leaf text node`, path)\n      // Reset `leafText` counters for new text node.\n\n      if (isFirst) {\n        leafTextRemaining = reverse ? first.offset : node.text.length - first.offset;\n        leafTextOffset = first.offset; // Works for reverse too.\n      } else {\n        leafTextRemaining = node.text.length;\n        leafTextOffset = reverse ? leafTextRemaining : 0;\n      } // Yield position at the start of node (potentially).\n\n      if (isFirst || isNewBlock || unit === 'offset') {\n        yield {\n          path,\n          offset: leafTextOffset\n        };\n        isNewBlock = false;\n      } // Yield positions every (dynamically calculated) `distance` offset.\n\n      while (true) {\n        // If `leafText` has caught up with `blockText` (distance=0),\n        // and if blockText is exhausted, break to get another block node,\n        // otherwise advance blockText forward by the new `distance`.\n        if (distance === 0) {\n          if (blockText === '') break;\n          distance = calcDistance(blockText, unit, reverse); // Split the string at the previously found distance and use the\n          // remaining string for the next iteration.\n\n          blockText = splitByCharacterDistance(blockText, distance, reverse)[1];\n        } // Advance `leafText` by the current `distance`.\n\n        leafTextOffset = reverse ? leafTextOffset - distance : leafTextOffset + distance;\n        leafTextRemaining = leafTextRemaining - distance; // If `leafText` is exhausted, break to get a new leaf node\n        // and set distance to the overflow amount, so we'll (maybe)\n        // catch up to blockText in the next leaf text node.\n\n        if (leafTextRemaining < 0) {\n          distance = -leafTextRemaining;\n          break;\n        } // Successfully walked `distance` offsets through `leafText`\n        // to catch up with `blockText`, so we can reset `distance`\n        // and yield this position in this node.\n\n        distance = 0;\n        yield {\n          path,\n          offset: leafTextOffset\n        };\n      }\n    }\n  } // Proof that upon completion, we've exahusted both leaf and block text:\n  //   console.assert(leafTextRemaining <= 0, \"leafText wasn't exhausted\")\n  //   console.assert(blockText === '', \"blockText wasn't exhausted\")\n  // Helper:\n  // Return the distance in offsets for a step of size `unit` on given string.\n\n  function calcDistance(text, unit, reverse) {\n    if (unit === 'character') {\n      return getCharacterDistance(text, reverse);\n    } else if (unit === 'word') {\n      return getWordDistance(text, reverse);\n    } else if (unit === 'line' || unit === 'block') {\n      return text.length;\n    }\n    return 1;\n  }\n}\nvar previous = function previous(editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var {\n    mode = 'lowest',\n    voids = false\n  } = options;\n  var {\n    match,\n    at = editor.selection\n  } = options;\n  if (!at) {\n    return;\n  }\n  var pointBeforeLocation = Editor.before(editor, at, {\n    voids\n  });\n  if (!pointBeforeLocation) {\n    return;\n  }\n  var [, to] = Editor.first(editor, []); // The search location is from the start of the document to the path of\n  // the point before the location passed in\n\n  var span = [pointBeforeLocation.path, to];\n  if (Path.isPath(at) && at.length === 0) {\n    throw new Error(\"Cannot get the previous node from the root node!\");\n  }\n  if (match == null) {\n    if (Path.isPath(at)) {\n      var [parent] = Editor.parent(editor, at);\n      match = n => parent.children.includes(n);\n    } else {\n      match = () => true;\n    }\n  }\n  var [previous] = Editor.nodes(editor, {\n    reverse: true,\n    at: span,\n    match,\n    mode,\n    voids\n  });\n  return previous;\n};\nvar rangeRef = function rangeRef(editor, range) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var {\n    affinity = 'forward'\n  } = options;\n  var ref = {\n    current: range,\n    affinity,\n    unref() {\n      var {\n        current\n      } = ref;\n      var rangeRefs = Editor.rangeRefs(editor);\n      rangeRefs.delete(ref);\n      ref.current = null;\n      return current;\n    }\n  };\n  var refs = Editor.rangeRefs(editor);\n  refs.add(ref);\n  return ref;\n};\nvar rangeRefs = editor => {\n  var refs = RANGE_REFS.get(editor);\n  if (!refs) {\n    refs = new Set();\n    RANGE_REFS.set(editor, refs);\n  }\n  return refs;\n};\nvar range = (editor, at, to) => {\n  if (Range.isRange(at) && !to) {\n    return at;\n  }\n  var start = Editor.start(editor, at);\n  var end = Editor.end(editor, to || at);\n  return {\n    anchor: start,\n    focus: end\n  };\n};\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$2(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$2(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar removeMark = (editor, key) => {\n  var {\n    selection\n  } = editor;\n  if (selection) {\n    var match = (node, path) => {\n      if (!Text.isText(node)) {\n        return false; // marks can only be applied to text\n      }\n      var [parentNode, parentPath] = Editor.parent(editor, path);\n      return !editor.isVoid(parentNode) || editor.markableVoid(parentNode);\n    };\n    var expandedSelection = Range.isExpanded(selection);\n    var markAcceptingVoidSelected = false;\n    if (!expandedSelection) {\n      var [selectedNode, selectedPath] = Editor.node(editor, selection);\n      if (selectedNode && match(selectedNode, selectedPath)) {\n        var [parentNode] = Editor.parent(editor, selectedPath);\n        markAcceptingVoidSelected = parentNode && editor.markableVoid(parentNode);\n      }\n    }\n    if (expandedSelection || markAcceptingVoidSelected) {\n      Transforms.unsetNodes(editor, key, {\n        match,\n        split: true,\n        voids: true\n      });\n    } else {\n      var marks = _objectSpread$2({}, Editor.marks(editor) || {});\n      delete marks[key];\n      editor.marks = marks;\n      if (!FLUSHING.get(editor)) {\n        editor.onChange();\n      }\n    }\n  }\n};\nvar setNormalizing = (editor, isNormalizing) => {\n  NORMALIZING.set(editor, isNormalizing);\n};\nvar start = (editor, at) => {\n  return Editor.point(editor, at, {\n    edge: 'start'\n  });\n};\nvar string = function string(editor, at) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var {\n    voids = false\n  } = options;\n  var range = Editor.range(editor, at);\n  var [start, end] = Range.edges(range);\n  var text = '';\n  for (var [node, path] of Editor.nodes(editor, {\n    at: range,\n    match: Text.isText,\n    voids\n  })) {\n    var t = node.text;\n    if (Path.equals(path, end.path)) {\n      t = t.slice(0, end.offset);\n    }\n    if (Path.equals(path, start.path)) {\n      t = t.slice(start.offset);\n    }\n    text += t;\n  }\n  return text;\n};\nvar unhangRange = function unhangRange(editor, range) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var {\n    voids = false\n  } = options;\n  var [start, end] = Range.edges(range); // PERF: exit early if we can guarantee that the range isn't hanging.\n\n  if (start.offset !== 0 || end.offset !== 0 || Range.isCollapsed(range) || Path.hasPrevious(end.path)) {\n    return range;\n  }\n  var endBlock = Editor.above(editor, {\n    at: end,\n    match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n    voids\n  });\n  var blockPath = endBlock ? endBlock[1] : [];\n  var first = Editor.start(editor, start);\n  var before = {\n    anchor: first,\n    focus: end\n  };\n  var skip = true;\n  for (var [node, path] of Editor.nodes(editor, {\n    at: before,\n    match: Text.isText,\n    reverse: true,\n    voids\n  })) {\n    if (skip) {\n      skip = false;\n      continue;\n    }\n    if (node.text !== '' || Path.isBefore(path, blockPath)) {\n      end = {\n        path,\n        offset: node.text.length\n      };\n      break;\n    }\n  }\n  return {\n    anchor: start,\n    focus: end\n  };\n};\nvar withoutNormalizing = (editor, fn) => {\n  var value = Editor.isNormalizing(editor);\n  Editor.setNormalizing(editor, false);\n  try {\n    fn();\n  } finally {\n    Editor.setNormalizing(editor, value);\n  }\n  Editor.normalize(editor);\n};\nvar deleteText = function deleteText(editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  Editor.withoutNormalizing(editor, () => {\n    var _Editor$void, _Editor$void2;\n    var {\n      reverse = false,\n      unit = 'character',\n      distance = 1,\n      voids = false\n    } = options;\n    var {\n      at = editor.selection,\n      hanging = false\n    } = options;\n    if (!at) {\n      return;\n    }\n    var isCollapsed = false;\n    if (Range.isRange(at) && Range.isCollapsed(at)) {\n      isCollapsed = true;\n      at = at.anchor;\n    }\n    if (Point.isPoint(at)) {\n      var furthestVoid = Editor.void(editor, {\n        at,\n        mode: 'highest'\n      });\n      if (!voids && furthestVoid) {\n        var [, voidPath] = furthestVoid;\n        at = voidPath;\n      } else {\n        var opts = {\n          unit,\n          distance\n        };\n        var target = reverse ? Editor.before(editor, at, opts) || Editor.start(editor, []) : Editor.after(editor, at, opts) || Editor.end(editor, []);\n        at = {\n          anchor: at,\n          focus: target\n        };\n        hanging = true;\n      }\n    }\n    if (Path.isPath(at)) {\n      Transforms.removeNodes(editor, {\n        at,\n        voids\n      });\n      return;\n    }\n    if (Range.isCollapsed(at)) {\n      return;\n    }\n    if (!hanging) {\n      var [, _end] = Range.edges(at);\n      var endOfDoc = Editor.end(editor, []);\n      if (!Point.equals(_end, endOfDoc)) {\n        at = Editor.unhangRange(editor, at, {\n          voids\n        });\n      }\n    }\n    var [start, end] = Range.edges(at);\n    var startBlock = Editor.above(editor, {\n      match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n      at: start,\n      voids\n    });\n    var endBlock = Editor.above(editor, {\n      match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n      at: end,\n      voids\n    });\n    var isAcrossBlocks = startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1]);\n    var isSingleText = Path.equals(start.path, end.path);\n    var startNonEditable = voids ? null : (_Editor$void = Editor.void(editor, {\n      at: start,\n      mode: 'highest'\n    })) !== null && _Editor$void !== void 0 ? _Editor$void : Editor.elementReadOnly(editor, {\n      at: start,\n      mode: 'highest'\n    });\n    var endNonEditable = voids ? null : (_Editor$void2 = Editor.void(editor, {\n      at: end,\n      mode: 'highest'\n    })) !== null && _Editor$void2 !== void 0 ? _Editor$void2 : Editor.elementReadOnly(editor, {\n      at: end,\n      mode: 'highest'\n    }); // If the start or end points are inside an inline void, nudge them out.\n\n    if (startNonEditable) {\n      var before = Editor.before(editor, start);\n      if (before && startBlock && Path.isAncestor(startBlock[1], before.path)) {\n        start = before;\n      }\n    }\n    if (endNonEditable) {\n      var after = Editor.after(editor, end);\n      if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {\n        end = after;\n      }\n    } // Get the highest nodes that are completely inside the range, as well as\n    // the start and end nodes.\n\n    var matches = [];\n    var lastPath;\n    for (var entry of Editor.nodes(editor, {\n      at,\n      voids\n    })) {\n      var [node, path] = entry;\n      if (lastPath && Path.compare(path, lastPath) === 0) {\n        continue;\n      }\n      if (!voids && Element.isElement(node) && (Editor.isVoid(editor, node) || Editor.isElementReadOnly(editor, node)) || !Path.isCommon(path, start.path) && !Path.isCommon(path, end.path)) {\n        matches.push(entry);\n        lastPath = path;\n      }\n    }\n    var pathRefs = Array.from(matches, _ref => {\n      var [, p] = _ref;\n      return Editor.pathRef(editor, p);\n    });\n    var startRef = Editor.pointRef(editor, start);\n    var endRef = Editor.pointRef(editor, end);\n    var removedText = '';\n    if (!isSingleText && !startNonEditable) {\n      var _point = startRef.current;\n      var [_node] = Editor.leaf(editor, _point);\n      var {\n        path: _path\n      } = _point;\n      var {\n        offset\n      } = start;\n      var text = _node.text.slice(offset);\n      if (text.length > 0) {\n        editor.apply({\n          type: 'remove_text',\n          path: _path,\n          offset,\n          text\n        });\n        removedText = text;\n      }\n    }\n    pathRefs.reverse().map(r => r.unref()).filter(r => r !== null).forEach(p => Transforms.removeNodes(editor, {\n      at: p,\n      voids\n    }));\n    if (!endNonEditable) {\n      var _point2 = endRef.current;\n      var [_node2] = Editor.leaf(editor, _point2);\n      var {\n        path: _path2\n      } = _point2;\n      var _offset = isSingleText ? start.offset : 0;\n      var _text = _node2.text.slice(_offset, end.offset);\n      if (_text.length > 0) {\n        editor.apply({\n          type: 'remove_text',\n          path: _path2,\n          offset: _offset,\n          text: _text\n        });\n        removedText = _text;\n      }\n    }\n    if (!isSingleText && isAcrossBlocks && endRef.current && startRef.current) {\n      Transforms.mergeNodes(editor, {\n        at: endRef.current,\n        hanging: true,\n        voids\n      });\n    } // For Thai script, deleting N character(s) backward should delete\n    // N code point(s) instead of an entire grapheme cluster.\n    // Therefore, the remaining code points should be inserted back.\n\n    if (isCollapsed && reverse && unit === 'character' && removedText.length > 1 && removedText.match(/[\\u0E00-\\u0E7F]+/)) {\n      Transforms.insertText(editor, removedText.slice(0, removedText.length - distance));\n    }\n    var startUnref = startRef.unref();\n    var endUnref = endRef.unref();\n    var point = reverse ? startUnref || endUnref : endUnref || startUnref;\n    if (options.at == null && point) {\n      Transforms.select(editor, point);\n    }\n  });\n};\nvar insertFragment = function insertFragment(editor, fragment) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Editor.withoutNormalizing(editor, () => {\n    var {\n      hanging = false,\n      voids = false\n    } = options;\n    var {\n      at = getDefaultInsertLocation(editor)\n    } = options;\n    if (!fragment.length) {\n      return;\n    }\n    if (Range.isRange(at)) {\n      if (!hanging) {\n        at = Editor.unhangRange(editor, at, {\n          voids\n        });\n      }\n      if (Range.isCollapsed(at)) {\n        at = at.anchor;\n      } else {\n        var [, end] = Range.edges(at);\n        if (!voids && Editor.void(editor, {\n          at: end\n        })) {\n          return;\n        }\n        var pointRef = Editor.pointRef(editor, end);\n        Transforms.delete(editor, {\n          at\n        });\n        at = pointRef.unref();\n      }\n    } else if (Path.isPath(at)) {\n      at = Editor.start(editor, at);\n    }\n    if (!voids && Editor.void(editor, {\n      at\n    })) {\n      return;\n    } // If the insert point is at the edge of an inline node, move it outside\n    // instead since it will need to be split otherwise.\n\n    var inlineElementMatch = Editor.above(editor, {\n      at,\n      match: n => Element.isElement(n) && Editor.isInline(editor, n),\n      mode: 'highest',\n      voids\n    });\n    if (inlineElementMatch) {\n      var [, _inlinePath] = inlineElementMatch;\n      if (Editor.isEnd(editor, at, _inlinePath)) {\n        var after = Editor.after(editor, _inlinePath);\n        at = after;\n      } else if (Editor.isStart(editor, at, _inlinePath)) {\n        var before = Editor.before(editor, _inlinePath);\n        at = before;\n      }\n    }\n    var blockMatch = Editor.above(editor, {\n      match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n      at,\n      voids\n    });\n    var [, blockPath] = blockMatch;\n    var isBlockStart = Editor.isStart(editor, at, blockPath);\n    var isBlockEnd = Editor.isEnd(editor, at, blockPath);\n    var isBlockEmpty = isBlockStart && isBlockEnd;\n    var mergeStart = !isBlockStart || isBlockStart && isBlockEnd;\n    var mergeEnd = !isBlockEnd;\n    var [, firstPath] = Node.first({\n      children: fragment\n    }, []);\n    var [, lastPath] = Node.last({\n      children: fragment\n    }, []);\n    var matches = [];\n    var matcher = _ref => {\n      var [n, p] = _ref;\n      var isRoot = p.length === 0;\n      if (isRoot) {\n        return false;\n      }\n      if (isBlockEmpty) {\n        return true;\n      }\n      if (mergeStart && Path.isAncestor(p, firstPath) && Element.isElement(n) && !editor.isVoid(n) && !editor.isInline(n)) {\n        return false;\n      }\n      if (mergeEnd && Path.isAncestor(p, lastPath) && Element.isElement(n) && !editor.isVoid(n) && !editor.isInline(n)) {\n        return false;\n      }\n      return true;\n    };\n    for (var entry of Node.nodes({\n      children: fragment\n    }, {\n      pass: matcher\n    })) {\n      if (matcher(entry)) {\n        matches.push(entry);\n      }\n    }\n    var starts = [];\n    var middles = [];\n    var ends = [];\n    var starting = true;\n    var hasBlocks = false;\n    for (var [node] of matches) {\n      if (Element.isElement(node) && !editor.isInline(node)) {\n        starting = false;\n        hasBlocks = true;\n        middles.push(node);\n      } else if (starting) {\n        starts.push(node);\n      } else {\n        ends.push(node);\n      }\n    }\n    var [inlineMatch] = Editor.nodes(editor, {\n      at,\n      match: n => Text.isText(n) || Editor.isInline(editor, n),\n      mode: 'highest',\n      voids\n    });\n    var [, inlinePath] = inlineMatch;\n    var isInlineStart = Editor.isStart(editor, at, inlinePath);\n    var isInlineEnd = Editor.isEnd(editor, at, inlinePath);\n    var middleRef = Editor.pathRef(editor, isBlockEnd && !ends.length ? Path.next(blockPath) : blockPath);\n    var endRef = Editor.pathRef(editor, isInlineEnd ? Path.next(inlinePath) : inlinePath);\n    Transforms.splitNodes(editor, {\n      at,\n      match: n => hasBlocks ? Element.isElement(n) && Editor.isBlock(editor, n) : Text.isText(n) || Editor.isInline(editor, n),\n      mode: hasBlocks ? 'lowest' : 'highest',\n      always: hasBlocks && (!isBlockStart || starts.length > 0) && (!isBlockEnd || ends.length > 0),\n      voids\n    });\n    var startRef = Editor.pathRef(editor, !isInlineStart || isInlineStart && isInlineEnd ? Path.next(inlinePath) : inlinePath);\n    Transforms.insertNodes(editor, starts, {\n      at: startRef.current,\n      match: n => Text.isText(n) || Editor.isInline(editor, n),\n      mode: 'highest',\n      voids\n    });\n    if (isBlockEmpty && !starts.length && middles.length && !ends.length) {\n      Transforms.delete(editor, {\n        at: blockPath,\n        voids\n      });\n    }\n    Transforms.insertNodes(editor, middles, {\n      at: middleRef.current,\n      match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n      mode: 'lowest',\n      voids\n    });\n    Transforms.insertNodes(editor, ends, {\n      at: endRef.current,\n      match: n => Text.isText(n) || Editor.isInline(editor, n),\n      mode: 'highest',\n      voids\n    });\n    if (!options.at) {\n      var path;\n      if (ends.length > 0 && endRef.current) {\n        path = Path.previous(endRef.current);\n      } else if (middles.length > 0 && middleRef.current) {\n        path = Path.previous(middleRef.current);\n      } else if (startRef.current) {\n        path = Path.previous(startRef.current);\n      }\n      if (path) {\n        var _end = Editor.end(editor, path);\n        Transforms.select(editor, _end);\n      }\n    }\n    startRef.unref();\n    middleRef.unref();\n    endRef.unref();\n  });\n};\nvar collapse = function collapse(editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var {\n    edge = 'anchor'\n  } = options;\n  var {\n    selection\n  } = editor;\n  if (!selection) {\n    return;\n  } else if (edge === 'anchor') {\n    Transforms.select(editor, selection.anchor);\n  } else if (edge === 'focus') {\n    Transforms.select(editor, selection.focus);\n  } else if (edge === 'start') {\n    var [start] = Range.edges(selection);\n    Transforms.select(editor, start);\n  } else if (edge === 'end') {\n    var [, end] = Range.edges(selection);\n    Transforms.select(editor, end);\n  }\n};\nvar deselect = editor => {\n  var {\n    selection\n  } = editor;\n  if (selection) {\n    editor.apply({\n      type: 'set_selection',\n      properties: selection,\n      newProperties: null\n    });\n  }\n};\nvar move = function move(editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var {\n    selection\n  } = editor;\n  var {\n    distance = 1,\n    unit = 'character',\n    reverse = false\n  } = options;\n  var {\n    edge = null\n  } = options;\n  if (!selection) {\n    return;\n  }\n  if (edge === 'start') {\n    edge = Range.isBackward(selection) ? 'focus' : 'anchor';\n  }\n  if (edge === 'end') {\n    edge = Range.isBackward(selection) ? 'anchor' : 'focus';\n  }\n  var {\n    anchor,\n    focus\n  } = selection;\n  var opts = {\n    distance,\n    unit,\n    ignoreNonSelectable: true\n  };\n  var props = {};\n  if (edge == null || edge === 'anchor') {\n    var point = reverse ? Editor.before(editor, anchor, opts) : Editor.after(editor, anchor, opts);\n    if (point) {\n      props.anchor = point;\n    }\n  }\n  if (edge == null || edge === 'focus') {\n    var _point = reverse ? Editor.before(editor, focus, opts) : Editor.after(editor, focus, opts);\n    if (_point) {\n      props.focus = _point;\n    }\n  }\n  Transforms.setSelection(editor, props);\n};\nvar select = (editor, target) => {\n  var {\n    selection\n  } = editor;\n  target = Editor.range(editor, target);\n  if (selection) {\n    Transforms.setSelection(editor, target);\n    return;\n  }\n  if (!Range.isRange(target)) {\n    throw new Error(\"When setting the selection and the current selection is `null` you must provide at least an `anchor` and `focus`, but you passed: \".concat(Scrubber.stringify(target)));\n  }\n  editor.apply({\n    type: 'set_selection',\n    properties: selection,\n    newProperties: target\n  });\n};\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$1(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$1(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar setPoint = function setPoint(editor, props) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var {\n    selection\n  } = editor;\n  var {\n    edge = 'both'\n  } = options;\n  if (!selection) {\n    return;\n  }\n  if (edge === 'start') {\n    edge = Range.isBackward(selection) ? 'focus' : 'anchor';\n  }\n  if (edge === 'end') {\n    edge = Range.isBackward(selection) ? 'anchor' : 'focus';\n  }\n  var {\n    anchor,\n    focus\n  } = selection;\n  var point = edge === 'anchor' ? anchor : focus;\n  Transforms.setSelection(editor, {\n    [edge === 'anchor' ? 'anchor' : 'focus']: _objectSpread$1(_objectSpread$1({}, point), props)\n  });\n};\nvar setSelection = (editor, props) => {\n  var {\n    selection\n  } = editor;\n  var oldProps = {};\n  var newProps = {};\n  if (!selection) {\n    return;\n  }\n  for (var k in props) {\n    if (k === 'anchor' && props.anchor != null && !Point.equals(props.anchor, selection.anchor) || k === 'focus' && props.focus != null && !Point.equals(props.focus, selection.focus) || k !== 'anchor' && k !== 'focus' && props[k] !== selection[k]) {\n      oldProps[k] = selection[k];\n      newProps[k] = props[k];\n    }\n  }\n  if (Object.keys(oldProps).length > 0) {\n    editor.apply({\n      type: 'set_selection',\n      properties: oldProps,\n      newProperties: newProps\n    });\n  }\n};\nvar insertNodes = function insertNodes(editor, nodes) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Editor.withoutNormalizing(editor, () => {\n    var {\n      hanging = false,\n      voids = false,\n      mode = 'lowest'\n    } = options;\n    var {\n      at,\n      match,\n      select\n    } = options;\n    if (Node.isNode(nodes)) {\n      nodes = [nodes];\n    }\n    if (nodes.length === 0) {\n      return;\n    }\n    var [node] = nodes;\n    if (!at) {\n      at = getDefaultInsertLocation(editor);\n      select = true;\n    }\n    if (select == null) {\n      select = false;\n    }\n    if (Range.isRange(at)) {\n      if (!hanging) {\n        at = Editor.unhangRange(editor, at, {\n          voids\n        });\n      }\n      if (Range.isCollapsed(at)) {\n        at = at.anchor;\n      } else {\n        var [, end] = Range.edges(at);\n        var pointRef = Editor.pointRef(editor, end);\n        Transforms.delete(editor, {\n          at\n        });\n        at = pointRef.unref();\n      }\n    }\n    if (Point.isPoint(at)) {\n      if (match == null) {\n        if (Text.isText(node)) {\n          match = n => Text.isText(n);\n        } else if (editor.isInline(node)) {\n          match = n => Text.isText(n) || Editor.isInline(editor, n);\n        } else {\n          match = n => Element.isElement(n) && Editor.isBlock(editor, n);\n        }\n      }\n      var [entry] = Editor.nodes(editor, {\n        at: at.path,\n        match,\n        mode,\n        voids\n      });\n      if (entry) {\n        var [, matchPath] = entry;\n        var pathRef = Editor.pathRef(editor, matchPath);\n        var isAtEnd = Editor.isEnd(editor, at, matchPath);\n        Transforms.splitNodes(editor, {\n          at,\n          match,\n          mode,\n          voids\n        });\n        var path = pathRef.unref();\n        at = isAtEnd ? Path.next(path) : path;\n      } else {\n        return;\n      }\n    }\n    var parentPath = Path.parent(at);\n    var index = at[at.length - 1];\n    if (!voids && Editor.void(editor, {\n      at: parentPath\n    })) {\n      return;\n    }\n    for (var _node of nodes) {\n      var _path = parentPath.concat(index);\n      index++;\n      editor.apply({\n        type: 'insert_node',\n        path: _path,\n        node: _node\n      });\n      at = Path.next(at);\n    }\n    at = Path.previous(at);\n    if (select) {\n      var point = Editor.end(editor, at);\n      if (point) {\n        Transforms.select(editor, point);\n      }\n    }\n  });\n};\nvar liftNodes = function liftNodes(editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  Editor.withoutNormalizing(editor, () => {\n    var {\n      at = editor.selection,\n      mode = 'lowest',\n      voids = false\n    } = options;\n    var {\n      match\n    } = options;\n    if (match == null) {\n      match = Path.isPath(at) ? matchPath(editor, at) : n => Element.isElement(n) && Editor.isBlock(editor, n);\n    }\n    if (!at) {\n      return;\n    }\n    var matches = Editor.nodes(editor, {\n      at,\n      match,\n      mode,\n      voids\n    });\n    var pathRefs = Array.from(matches, _ref => {\n      var [, p] = _ref;\n      return Editor.pathRef(editor, p);\n    });\n    for (var pathRef of pathRefs) {\n      var path = pathRef.unref();\n      if (path.length < 2) {\n        throw new Error(\"Cannot lift node at a path [\".concat(path, \"] because it has a depth of less than `2`.\"));\n      }\n      var parentNodeEntry = Editor.node(editor, Path.parent(path));\n      var [parent, parentPath] = parentNodeEntry;\n      var index = path[path.length - 1];\n      var {\n        length\n      } = parent.children;\n      if (length === 1) {\n        var toPath = Path.next(parentPath);\n        Transforms.moveNodes(editor, {\n          at: path,\n          to: toPath,\n          voids\n        });\n        Transforms.removeNodes(editor, {\n          at: parentPath,\n          voids\n        });\n      } else if (index === 0) {\n        Transforms.moveNodes(editor, {\n          at: path,\n          to: parentPath,\n          voids\n        });\n      } else if (index === length - 1) {\n        var _toPath = Path.next(parentPath);\n        Transforms.moveNodes(editor, {\n          at: path,\n          to: _toPath,\n          voids\n        });\n      } else {\n        var splitPath = Path.next(path);\n        var _toPath2 = Path.next(parentPath);\n        Transforms.splitNodes(editor, {\n          at: splitPath,\n          voids\n        });\n        Transforms.moveNodes(editor, {\n          at: path,\n          to: _toPath2,\n          voids\n        });\n      }\n    }\n  });\n};\nvar _excluded = [\"text\"],\n  _excluded2 = [\"children\"];\nvar hasSingleChildNest = (editor, node) => {\n  if (Element.isElement(node)) {\n    var element = node;\n    if (Editor.isVoid(editor, node)) {\n      return true;\n    } else if (element.children.length === 1) {\n      return hasSingleChildNest(editor, element.children[0]);\n    } else {\n      return false;\n    }\n  } else if (Editor.isEditor(node)) {\n    return false;\n  } else {\n    return true;\n  }\n};\nvar mergeNodes = function mergeNodes(editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  Editor.withoutNormalizing(editor, () => {\n    var {\n      match,\n      at = editor.selection\n    } = options;\n    var {\n      hanging = false,\n      voids = false,\n      mode = 'lowest'\n    } = options;\n    if (!at) {\n      return;\n    }\n    if (match == null) {\n      if (Path.isPath(at)) {\n        var [parent] = Editor.parent(editor, at);\n        match = n => parent.children.includes(n);\n      } else {\n        match = n => Element.isElement(n) && Editor.isBlock(editor, n);\n      }\n    }\n    if (!hanging && Range.isRange(at)) {\n      at = Editor.unhangRange(editor, at, {\n        voids\n      });\n    }\n    if (Range.isRange(at)) {\n      if (Range.isCollapsed(at)) {\n        at = at.anchor;\n      } else {\n        var [, end] = Range.edges(at);\n        var pointRef = Editor.pointRef(editor, end);\n        Transforms.delete(editor, {\n          at\n        });\n        at = pointRef.unref();\n        if (options.at == null) {\n          Transforms.select(editor, at);\n        }\n      }\n    }\n    var [current] = Editor.nodes(editor, {\n      at,\n      match,\n      voids,\n      mode\n    });\n    var prev = Editor.previous(editor, {\n      at,\n      match,\n      voids,\n      mode\n    });\n    if (!current || !prev) {\n      return;\n    }\n    var [node, path] = current;\n    var [prevNode, prevPath] = prev;\n    if (path.length === 0 || prevPath.length === 0) {\n      return;\n    }\n    var newPath = Path.next(prevPath);\n    var commonPath = Path.common(path, prevPath);\n    var isPreviousSibling = Path.isSibling(path, prevPath);\n    var levels = Array.from(Editor.levels(editor, {\n      at: path\n    }), _ref => {\n      var [n] = _ref;\n      return n;\n    }).slice(commonPath.length).slice(0, -1); // Determine if the merge will leave an ancestor of the path empty as a\n    // result, in which case we'll want to remove it after merging.\n\n    var emptyAncestor = Editor.above(editor, {\n      at: path,\n      mode: 'highest',\n      match: n => levels.includes(n) && hasSingleChildNest(editor, n)\n    });\n    var emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1]);\n    var properties;\n    var position; // Ensure that the nodes are equivalent, and figure out what the position\n    // and extra properties of the merge will be.\n\n    if (Text.isText(node) && Text.isText(prevNode)) {\n      var rest = _objectWithoutProperties(node, _excluded);\n      position = prevNode.text.length;\n      properties = rest;\n    } else if (Element.isElement(node) && Element.isElement(prevNode)) {\n      var rest = _objectWithoutProperties(node, _excluded2);\n      position = prevNode.children.length;\n      properties = rest;\n    } else {\n      throw new Error(\"Cannot merge the node at path [\".concat(path, \"] with the previous sibling because it is not the same kind: \").concat(Scrubber.stringify(node), \" \").concat(Scrubber.stringify(prevNode)));\n    } // If the node isn't already the next sibling of the previous node, move\n    // it so that it is before merging.\n\n    if (!isPreviousSibling) {\n      Transforms.moveNodes(editor, {\n        at: path,\n        to: newPath,\n        voids\n      });\n    } // If there was going to be an empty ancestor of the node that was merged,\n    // we remove it from the tree.\n\n    if (emptyRef) {\n      Transforms.removeNodes(editor, {\n        at: emptyRef.current,\n        voids\n      });\n    } // If the target node that we're merging with is empty, remove it instead\n    // of merging the two. This is a common rich text editor behavior to\n    // prevent losing formatting when deleting entire nodes when you have a\n    // hanging selection.\n    // if prevNode is first child in parent,don't remove it.\n\n    if (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode) || Text.isText(prevNode) && prevNode.text === '' && prevPath[prevPath.length - 1] !== 0) {\n      Transforms.removeNodes(editor, {\n        at: prevPath,\n        voids\n      });\n    } else {\n      editor.apply({\n        type: 'merge_node',\n        path: newPath,\n        position,\n        properties\n      });\n    }\n    if (emptyRef) {\n      emptyRef.unref();\n    }\n  });\n};\nvar moveNodes = (editor, options) => {\n  Editor.withoutNormalizing(editor, () => {\n    var {\n      to,\n      at = editor.selection,\n      mode = 'lowest',\n      voids = false\n    } = options;\n    var {\n      match\n    } = options;\n    if (!at) {\n      return;\n    }\n    if (match == null) {\n      match = Path.isPath(at) ? matchPath(editor, at) : n => Element.isElement(n) && Editor.isBlock(editor, n);\n    }\n    var toRef = Editor.pathRef(editor, to);\n    var targets = Editor.nodes(editor, {\n      at,\n      match,\n      mode,\n      voids\n    });\n    var pathRefs = Array.from(targets, _ref => {\n      var [, p] = _ref;\n      return Editor.pathRef(editor, p);\n    });\n    for (var pathRef of pathRefs) {\n      var path = pathRef.unref();\n      var newPath = toRef.current;\n      if (path.length !== 0) {\n        editor.apply({\n          type: 'move_node',\n          path,\n          newPath\n        });\n      }\n      if (toRef.current && Path.isSibling(newPath, path) && Path.isAfter(newPath, path)) {\n        // When performing a sibling move to a later index, the path at the destination is shifted\n        // to before the insertion point instead of after. To ensure our group of nodes are inserted\n        // in the correct order we increment toRef to account for that\n        toRef.current = Path.next(toRef.current);\n      }\n    }\n    toRef.unref();\n  });\n};\nvar removeNodes = function removeNodes(editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  Editor.withoutNormalizing(editor, () => {\n    var {\n      hanging = false,\n      voids = false,\n      mode = 'lowest'\n    } = options;\n    var {\n      at = editor.selection,\n      match\n    } = options;\n    if (!at) {\n      return;\n    }\n    if (match == null) {\n      match = Path.isPath(at) ? matchPath(editor, at) : n => Element.isElement(n) && Editor.isBlock(editor, n);\n    }\n    if (!hanging && Range.isRange(at)) {\n      at = Editor.unhangRange(editor, at, {\n        voids\n      });\n    }\n    var depths = Editor.nodes(editor, {\n      at,\n      match,\n      mode,\n      voids\n    });\n    var pathRefs = Array.from(depths, _ref => {\n      var [, p] = _ref;\n      return Editor.pathRef(editor, p);\n    });\n    for (var pathRef of pathRefs) {\n      var path = pathRef.unref();\n      if (path) {\n        var [node] = Editor.node(editor, path);\n        editor.apply({\n          type: 'remove_node',\n          path,\n          node\n        });\n      }\n    }\n  });\n};\nvar setNodes = function setNodes(editor, props) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Editor.withoutNormalizing(editor, () => {\n    var {\n      match,\n      at = editor.selection,\n      compare,\n      merge\n    } = options;\n    var {\n      hanging = false,\n      mode = 'lowest',\n      split = false,\n      voids = false\n    } = options;\n    if (!at) {\n      return;\n    }\n    if (match == null) {\n      match = Path.isPath(at) ? matchPath(editor, at) : n => Element.isElement(n) && Editor.isBlock(editor, n);\n    }\n    if (!hanging && Range.isRange(at)) {\n      at = Editor.unhangRange(editor, at, {\n        voids\n      });\n    }\n    if (split && Range.isRange(at)) {\n      if (Range.isCollapsed(at) && Editor.leaf(editor, at.anchor)[0].text.length > 0) {\n        // If the range is collapsed in a non-empty node and 'split' is true, there's nothing to\n        // set that won't get normalized away\n        return;\n      }\n      var rangeRef = Editor.rangeRef(editor, at, {\n        affinity: 'inward'\n      });\n      var [start, end] = Range.edges(at);\n      var splitMode = mode === 'lowest' ? 'lowest' : 'highest';\n      var endAtEndOfNode = Editor.isEnd(editor, end, end.path);\n      Transforms.splitNodes(editor, {\n        at: end,\n        match,\n        mode: splitMode,\n        voids,\n        always: !endAtEndOfNode\n      });\n      var startAtStartOfNode = Editor.isStart(editor, start, start.path);\n      Transforms.splitNodes(editor, {\n        at: start,\n        match,\n        mode: splitMode,\n        voids,\n        always: !startAtStartOfNode\n      });\n      at = rangeRef.unref();\n      if (options.at == null) {\n        Transforms.select(editor, at);\n      }\n    }\n    if (!compare) {\n      compare = (prop, nodeProp) => prop !== nodeProp;\n    }\n    for (var [node, path] of Editor.nodes(editor, {\n      at,\n      match,\n      mode,\n      voids\n    })) {\n      var properties = {};\n      var newProperties = {}; // You can't set properties on the editor node.\n\n      if (path.length === 0) {\n        continue;\n      }\n      var hasChanges = false;\n      for (var k in props) {\n        if (k === 'children' || k === 'text') {\n          continue;\n        }\n        if (compare(props[k], node[k])) {\n          hasChanges = true; // Omit new properties from the old properties list\n\n          if (node.hasOwnProperty(k)) properties[k] = node[k]; // Omit properties that have been removed from the new properties list\n\n          if (merge) {\n            if (props[k] != null) newProperties[k] = merge(node[k], props[k]);\n          } else {\n            if (props[k] != null) newProperties[k] = props[k];\n          }\n        }\n      }\n      if (hasChanges) {\n        editor.apply({\n          type: 'set_node',\n          path,\n          properties,\n          newProperties\n        });\n      }\n    }\n  });\n};\n\n/**\r\n * Convert a range into a point by deleting it's content.\r\n */\n\nvar deleteRange = (editor, range) => {\n  if (Range.isCollapsed(range)) {\n    return range.anchor;\n  } else {\n    var [, end] = Range.edges(range);\n    var pointRef = Editor.pointRef(editor, end);\n    Transforms.delete(editor, {\n      at: range\n    });\n    return pointRef.unref();\n  }\n};\nvar splitNodes = function splitNodes(editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  Editor.withoutNormalizing(editor, () => {\n    var {\n      mode = 'lowest',\n      voids = false\n    } = options;\n    var {\n      match,\n      at = editor.selection,\n      height = 0,\n      always = false\n    } = options;\n    if (match == null) {\n      match = n => Element.isElement(n) && Editor.isBlock(editor, n);\n    }\n    if (Range.isRange(at)) {\n      at = deleteRange(editor, at);\n    } // If the target is a path, the default height-skipping and position\n    // counters need to account for us potentially splitting at a non-leaf.\n\n    if (Path.isPath(at)) {\n      var path = at;\n      var point = Editor.point(editor, path);\n      var [parent] = Editor.parent(editor, path);\n      match = n => n === parent;\n      height = point.path.length - path.length + 1;\n      at = point;\n      always = true;\n    }\n    if (!at) {\n      return;\n    }\n    var beforeRef = Editor.pointRef(editor, at, {\n      affinity: 'backward'\n    });\n    var afterRef;\n    try {\n      var [highest] = Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids\n      });\n      if (!highest) {\n        return;\n      }\n      var voidMatch = Editor.void(editor, {\n        at,\n        mode: 'highest'\n      });\n      var nudge = 0;\n      if (!voids && voidMatch) {\n        var [voidNode, voidPath] = voidMatch;\n        if (Element.isElement(voidNode) && editor.isInline(voidNode)) {\n          var after = Editor.after(editor, voidPath);\n          if (!after) {\n            var text = {\n              text: ''\n            };\n            var afterPath = Path.next(voidPath);\n            Transforms.insertNodes(editor, text, {\n              at: afterPath,\n              voids\n            });\n            after = Editor.point(editor, afterPath);\n          }\n          at = after;\n          always = true;\n        }\n        var siblingHeight = at.path.length - voidPath.length;\n        height = siblingHeight + 1;\n        always = true;\n      }\n      afterRef = Editor.pointRef(editor, at);\n      var depth = at.path.length - height;\n      var [, highestPath] = highest;\n      var lowestPath = at.path.slice(0, depth);\n      var position = height === 0 ? at.offset : at.path[depth] + nudge;\n      for (var [node, _path] of Editor.levels(editor, {\n        at: lowestPath,\n        reverse: true,\n        voids\n      })) {\n        var split = false;\n        if (_path.length < highestPath.length || _path.length === 0 || !voids && Element.isElement(node) && Editor.isVoid(editor, node)) {\n          break;\n        }\n        var _point = beforeRef.current;\n        var isEnd = Editor.isEnd(editor, _point, _path);\n        if (always || !beforeRef || !Editor.isEdge(editor, _point, _path)) {\n          split = true;\n          var properties = Node.extractProps(node);\n          editor.apply({\n            type: 'split_node',\n            path: _path,\n            position,\n            properties\n          });\n        }\n        position = _path[_path.length - 1] + (split || isEnd ? 1 : 0);\n      }\n      if (options.at == null) {\n        var _point2 = afterRef.current || Editor.end(editor, []);\n        Transforms.select(editor, _point2);\n      }\n    } finally {\n      var _afterRef;\n      beforeRef.unref();\n      (_afterRef = afterRef) === null || _afterRef === void 0 ? void 0 : _afterRef.unref();\n    }\n  });\n};\nvar unsetNodes = function unsetNodes(editor, props) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (!Array.isArray(props)) {\n    props = [props];\n  }\n  var obj = {};\n  for (var key of props) {\n    obj[key] = null;\n  }\n  Transforms.setNodes(editor, obj, options);\n};\nvar unwrapNodes = function unwrapNodes(editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  Editor.withoutNormalizing(editor, () => {\n    var {\n      mode = 'lowest',\n      split = false,\n      voids = false\n    } = options;\n    var {\n      at = editor.selection,\n      match\n    } = options;\n    if (!at) {\n      return;\n    }\n    if (match == null) {\n      match = Path.isPath(at) ? matchPath(editor, at) : n => Element.isElement(n) && Editor.isBlock(editor, n);\n    }\n    if (Path.isPath(at)) {\n      at = Editor.range(editor, at);\n    }\n    var rangeRef = Range.isRange(at) ? Editor.rangeRef(editor, at) : null;\n    var matches = Editor.nodes(editor, {\n      at,\n      match,\n      mode,\n      voids\n    });\n    var pathRefs = Array.from(matches, _ref => {\n      var [, p] = _ref;\n      return Editor.pathRef(editor, p);\n    } // unwrapNode will call liftNode which does not support splitting the node when nested.\n    // If we do not reverse the order and call it from top to the bottom, it will remove all blocks\n    // that wrap target node. So we reverse the order.\n    ).reverse();\n    var _loop = function _loop(pathRef) {\n      var path = pathRef.unref();\n      var [node] = Editor.node(editor, path);\n      var range = Editor.range(editor, path);\n      if (split && rangeRef) {\n        range = Range.intersection(rangeRef.current, range);\n      }\n      Transforms.liftNodes(editor, {\n        at: range,\n        match: n => Element.isAncestor(node) && node.children.includes(n),\n        voids\n      });\n    };\n    for (var pathRef of pathRefs) {\n      _loop(pathRef);\n    }\n    if (rangeRef) {\n      rangeRef.unref();\n    }\n  });\n};\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar wrapNodes = function wrapNodes(editor, element) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Editor.withoutNormalizing(editor, () => {\n    var {\n      mode = 'lowest',\n      split = false,\n      voids = false\n    } = options;\n    var {\n      match,\n      at = editor.selection\n    } = options;\n    if (!at) {\n      return;\n    }\n    if (match == null) {\n      if (Path.isPath(at)) {\n        match = matchPath(editor, at);\n      } else if (editor.isInline(element)) {\n        match = n => Element.isElement(n) && Editor.isInline(editor, n) || Text.isText(n);\n      } else {\n        match = n => Element.isElement(n) && Editor.isBlock(editor, n);\n      }\n    }\n    if (split && Range.isRange(at)) {\n      var [start, end] = Range.edges(at);\n      var rangeRef = Editor.rangeRef(editor, at, {\n        affinity: 'inward'\n      });\n      Transforms.splitNodes(editor, {\n        at: end,\n        match,\n        voids\n      });\n      Transforms.splitNodes(editor, {\n        at: start,\n        match,\n        voids\n      });\n      at = rangeRef.unref();\n      if (options.at == null) {\n        Transforms.select(editor, at);\n      }\n    }\n    var roots = Array.from(Editor.nodes(editor, {\n      at,\n      match: editor.isInline(element) ? n => Element.isElement(n) && Editor.isBlock(editor, n) : n => Editor.isEditor(n),\n      mode: 'lowest',\n      voids\n    }));\n    for (var [, rootPath] of roots) {\n      var a = Range.isRange(at) ? Range.intersection(at, Editor.range(editor, rootPath)) : at;\n      if (!a) {\n        continue;\n      }\n      var matches = Array.from(Editor.nodes(editor, {\n        at: a,\n        match,\n        mode,\n        voids\n      }));\n      if (matches.length > 0) {\n        var _ret = function () {\n          var [first] = matches;\n          var last = matches[matches.length - 1];\n          var [, firstPath] = first;\n          var [, lastPath] = last;\n          if (firstPath.length === 0 && lastPath.length === 0) {\n            // if there's no matching parent - usually means the node is an editor - don't do anything\n            return \"continue\";\n          }\n          var commonPath = Path.equals(firstPath, lastPath) ? Path.parent(firstPath) : Path.common(firstPath, lastPath);\n          var range = Editor.range(editor, firstPath, lastPath);\n          var commonNodeEntry = Editor.node(editor, commonPath);\n          var [commonNode] = commonNodeEntry;\n          var depth = commonPath.length + 1;\n          var wrapperPath = Path.next(lastPath.slice(0, depth));\n          var wrapper = _objectSpread(_objectSpread({}, element), {}, {\n            children: []\n          });\n          Transforms.insertNodes(editor, wrapper, {\n            at: wrapperPath,\n            voids\n          });\n          Transforms.moveNodes(editor, {\n            at: range,\n            match: n => Element.isAncestor(commonNode) && commonNode.children.includes(n),\n            to: wrapperPath.concat(0),\n            voids\n          });\n        }();\n        if (_ret === \"continue\") continue;\n      }\n    }\n  });\n};\n\n/**\r\n * Create a new Slate `Editor` object.\r\n */\n\nvar createEditor = () => {\n  var editor = {\n    children: [],\n    operations: [],\n    selection: null,\n    marks: null,\n    isElementReadOnly: () => false,\n    isInline: () => false,\n    isSelectable: () => true,\n    isVoid: () => false,\n    markableVoid: () => false,\n    onChange: () => {},\n    // Core\n    apply: function apply$1() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return apply(editor, ...args);\n    },\n    // Editor\n    addMark: function addMark$1() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return addMark(editor, ...args);\n    },\n    deleteBackward: function deleteBackward$1() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      return deleteBackward(editor, ...args);\n    },\n    deleteForward: function deleteForward$1() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      return deleteForward(editor, ...args);\n    },\n    deleteFragment: function deleteFragment$1() {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      return deleteFragment(editor, ...args);\n    },\n    getFragment: function getFragment$1() {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      return getFragment(editor, ...args);\n    },\n    insertBreak: function insertBreak$1() {\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n      return insertBreak(editor, ...args);\n    },\n    insertSoftBreak: function insertSoftBreak$1() {\n      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n      return insertSoftBreak(editor, ...args);\n    },\n    insertFragment: function insertFragment$1() {\n      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        args[_key9] = arguments[_key9];\n      }\n      return insertFragment(editor, ...args);\n    },\n    insertNode: function insertNode$1() {\n      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n        args[_key10] = arguments[_key10];\n      }\n      return insertNode(editor, ...args);\n    },\n    insertText: function insertText$1() {\n      for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n        args[_key11] = arguments[_key11];\n      }\n      return insertText(editor, ...args);\n    },\n    normalizeNode: function normalizeNode$1() {\n      for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n        args[_key12] = arguments[_key12];\n      }\n      return normalizeNode(editor, ...args);\n    },\n    removeMark: function removeMark$1() {\n      for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n        args[_key13] = arguments[_key13];\n      }\n      return removeMark(editor, ...args);\n    },\n    getDirtyPaths: function getDirtyPaths$1() {\n      for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {\n        args[_key14] = arguments[_key14];\n      }\n      return getDirtyPaths(editor, ...args);\n    },\n    shouldNormalize: function shouldNormalize$1() {\n      for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {\n        args[_key15] = arguments[_key15];\n      }\n      return shouldNormalize(editor, ...args);\n    },\n    // Editor interface\n    above: function above$1() {\n      for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {\n        args[_key16] = arguments[_key16];\n      }\n      return above(editor, ...args);\n    },\n    after: function after$1() {\n      for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {\n        args[_key17] = arguments[_key17];\n      }\n      return after(editor, ...args);\n    },\n    before: function before$1() {\n      for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {\n        args[_key18] = arguments[_key18];\n      }\n      return before(editor, ...args);\n    },\n    collapse: function collapse$1() {\n      for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {\n        args[_key19] = arguments[_key19];\n      }\n      return collapse(editor, ...args);\n    },\n    delete: function _delete() {\n      for (var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {\n        args[_key20] = arguments[_key20];\n      }\n      return deleteText(editor, ...args);\n    },\n    deselect: function deselect$1() {\n      for (var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {\n        args[_key21] = arguments[_key21];\n      }\n      return deselect(editor, ...args);\n    },\n    edges: function edges$1() {\n      for (var _len22 = arguments.length, args = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {\n        args[_key22] = arguments[_key22];\n      }\n      return edges(editor, ...args);\n    },\n    elementReadOnly: function elementReadOnly$1() {\n      for (var _len23 = arguments.length, args = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {\n        args[_key23] = arguments[_key23];\n      }\n      return elementReadOnly(editor, ...args);\n    },\n    end: function end$1() {\n      for (var _len24 = arguments.length, args = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {\n        args[_key24] = arguments[_key24];\n      }\n      return end(editor, ...args);\n    },\n    first: function first$1() {\n      for (var _len25 = arguments.length, args = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {\n        args[_key25] = arguments[_key25];\n      }\n      return first(editor, ...args);\n    },\n    fragment: function fragment$1() {\n      for (var _len26 = arguments.length, args = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {\n        args[_key26] = arguments[_key26];\n      }\n      return fragment(editor, ...args);\n    },\n    getMarks: function getMarks() {\n      for (var _len27 = arguments.length, args = new Array(_len27), _key27 = 0; _key27 < _len27; _key27++) {\n        args[_key27] = arguments[_key27];\n      }\n      return marks(editor, ...args);\n    },\n    hasBlocks: function hasBlocks$1() {\n      for (var _len28 = arguments.length, args = new Array(_len28), _key28 = 0; _key28 < _len28; _key28++) {\n        args[_key28] = arguments[_key28];\n      }\n      return hasBlocks(editor, ...args);\n    },\n    hasInlines: function hasInlines$1() {\n      for (var _len29 = arguments.length, args = new Array(_len29), _key29 = 0; _key29 < _len29; _key29++) {\n        args[_key29] = arguments[_key29];\n      }\n      return hasInlines(editor, ...args);\n    },\n    hasPath: function hasPath$1() {\n      for (var _len30 = arguments.length, args = new Array(_len30), _key30 = 0; _key30 < _len30; _key30++) {\n        args[_key30] = arguments[_key30];\n      }\n      return hasPath(editor, ...args);\n    },\n    hasTexts: function hasTexts$1() {\n      for (var _len31 = arguments.length, args = new Array(_len31), _key31 = 0; _key31 < _len31; _key31++) {\n        args[_key31] = arguments[_key31];\n      }\n      return hasTexts(editor, ...args);\n    },\n    insertNodes: function insertNodes$1() {\n      for (var _len32 = arguments.length, args = new Array(_len32), _key32 = 0; _key32 < _len32; _key32++) {\n        args[_key32] = arguments[_key32];\n      }\n      return insertNodes(editor, ...args);\n    },\n    isBlock: function isBlock$1() {\n      for (var _len33 = arguments.length, args = new Array(_len33), _key33 = 0; _key33 < _len33; _key33++) {\n        args[_key33] = arguments[_key33];\n      }\n      return isBlock(editor, ...args);\n    },\n    isEdge: function isEdge$1() {\n      for (var _len34 = arguments.length, args = new Array(_len34), _key34 = 0; _key34 < _len34; _key34++) {\n        args[_key34] = arguments[_key34];\n      }\n      return isEdge(editor, ...args);\n    },\n    isEmpty: function isEmpty$1() {\n      for (var _len35 = arguments.length, args = new Array(_len35), _key35 = 0; _key35 < _len35; _key35++) {\n        args[_key35] = arguments[_key35];\n      }\n      return isEmpty(editor, ...args);\n    },\n    isEnd: function isEnd$1() {\n      for (var _len36 = arguments.length, args = new Array(_len36), _key36 = 0; _key36 < _len36; _key36++) {\n        args[_key36] = arguments[_key36];\n      }\n      return isEnd(editor, ...args);\n    },\n    isNormalizing: function isNormalizing$1() {\n      for (var _len37 = arguments.length, args = new Array(_len37), _key37 = 0; _key37 < _len37; _key37++) {\n        args[_key37] = arguments[_key37];\n      }\n      return isNormalizing(editor, ...args);\n    },\n    isStart: function isStart$1() {\n      for (var _len38 = arguments.length, args = new Array(_len38), _key38 = 0; _key38 < _len38; _key38++) {\n        args[_key38] = arguments[_key38];\n      }\n      return isStart(editor, ...args);\n    },\n    last: function last$1() {\n      for (var _len39 = arguments.length, args = new Array(_len39), _key39 = 0; _key39 < _len39; _key39++) {\n        args[_key39] = arguments[_key39];\n      }\n      return last(editor, ...args);\n    },\n    leaf: function leaf$1() {\n      for (var _len40 = arguments.length, args = new Array(_len40), _key40 = 0; _key40 < _len40; _key40++) {\n        args[_key40] = arguments[_key40];\n      }\n      return leaf(editor, ...args);\n    },\n    levels: function levels$1() {\n      for (var _len41 = arguments.length, args = new Array(_len41), _key41 = 0; _key41 < _len41; _key41++) {\n        args[_key41] = arguments[_key41];\n      }\n      return levels(editor, ...args);\n    },\n    liftNodes: function liftNodes$1() {\n      for (var _len42 = arguments.length, args = new Array(_len42), _key42 = 0; _key42 < _len42; _key42++) {\n        args[_key42] = arguments[_key42];\n      }\n      return liftNodes(editor, ...args);\n    },\n    mergeNodes: function mergeNodes$1() {\n      for (var _len43 = arguments.length, args = new Array(_len43), _key43 = 0; _key43 < _len43; _key43++) {\n        args[_key43] = arguments[_key43];\n      }\n      return mergeNodes(editor, ...args);\n    },\n    move: function move$1() {\n      for (var _len44 = arguments.length, args = new Array(_len44), _key44 = 0; _key44 < _len44; _key44++) {\n        args[_key44] = arguments[_key44];\n      }\n      return move(editor, ...args);\n    },\n    moveNodes: function moveNodes$1() {\n      for (var _len45 = arguments.length, args = new Array(_len45), _key45 = 0; _key45 < _len45; _key45++) {\n        args[_key45] = arguments[_key45];\n      }\n      return moveNodes(editor, ...args);\n    },\n    next: function next$1() {\n      for (var _len46 = arguments.length, args = new Array(_len46), _key46 = 0; _key46 < _len46; _key46++) {\n        args[_key46] = arguments[_key46];\n      }\n      return next(editor, ...args);\n    },\n    node: function node$1() {\n      for (var _len47 = arguments.length, args = new Array(_len47), _key47 = 0; _key47 < _len47; _key47++) {\n        args[_key47] = arguments[_key47];\n      }\n      return node(editor, ...args);\n    },\n    nodes: function nodes$1() {\n      for (var _len48 = arguments.length, args = new Array(_len48), _key48 = 0; _key48 < _len48; _key48++) {\n        args[_key48] = arguments[_key48];\n      }\n      return nodes(editor, ...args);\n    },\n    normalize: function normalize$1() {\n      for (var _len49 = arguments.length, args = new Array(_len49), _key49 = 0; _key49 < _len49; _key49++) {\n        args[_key49] = arguments[_key49];\n      }\n      return normalize(editor, ...args);\n    },\n    parent: function parent$1() {\n      for (var _len50 = arguments.length, args = new Array(_len50), _key50 = 0; _key50 < _len50; _key50++) {\n        args[_key50] = arguments[_key50];\n      }\n      return parent(editor, ...args);\n    },\n    path: function path$1() {\n      for (var _len51 = arguments.length, args = new Array(_len51), _key51 = 0; _key51 < _len51; _key51++) {\n        args[_key51] = arguments[_key51];\n      }\n      return path(editor, ...args);\n    },\n    pathRef: function pathRef$1() {\n      for (var _len52 = arguments.length, args = new Array(_len52), _key52 = 0; _key52 < _len52; _key52++) {\n        args[_key52] = arguments[_key52];\n      }\n      return pathRef(editor, ...args);\n    },\n    pathRefs: function pathRefs$1() {\n      for (var _len53 = arguments.length, args = new Array(_len53), _key53 = 0; _key53 < _len53; _key53++) {\n        args[_key53] = arguments[_key53];\n      }\n      return pathRefs(editor, ...args);\n    },\n    point: function point$1() {\n      for (var _len54 = arguments.length, args = new Array(_len54), _key54 = 0; _key54 < _len54; _key54++) {\n        args[_key54] = arguments[_key54];\n      }\n      return point(editor, ...args);\n    },\n    pointRef: function pointRef$1() {\n      for (var _len55 = arguments.length, args = new Array(_len55), _key55 = 0; _key55 < _len55; _key55++) {\n        args[_key55] = arguments[_key55];\n      }\n      return pointRef(editor, ...args);\n    },\n    pointRefs: function pointRefs$1() {\n      for (var _len56 = arguments.length, args = new Array(_len56), _key56 = 0; _key56 < _len56; _key56++) {\n        args[_key56] = arguments[_key56];\n      }\n      return pointRefs(editor, ...args);\n    },\n    positions: function positions$1() {\n      for (var _len57 = arguments.length, args = new Array(_len57), _key57 = 0; _key57 < _len57; _key57++) {\n        args[_key57] = arguments[_key57];\n      }\n      return positions(editor, ...args);\n    },\n    previous: function previous$1() {\n      for (var _len58 = arguments.length, args = new Array(_len58), _key58 = 0; _key58 < _len58; _key58++) {\n        args[_key58] = arguments[_key58];\n      }\n      return previous(editor, ...args);\n    },\n    range: function range$1() {\n      for (var _len59 = arguments.length, args = new Array(_len59), _key59 = 0; _key59 < _len59; _key59++) {\n        args[_key59] = arguments[_key59];\n      }\n      return range(editor, ...args);\n    },\n    rangeRef: function rangeRef$1() {\n      for (var _len60 = arguments.length, args = new Array(_len60), _key60 = 0; _key60 < _len60; _key60++) {\n        args[_key60] = arguments[_key60];\n      }\n      return rangeRef(editor, ...args);\n    },\n    rangeRefs: function rangeRefs$1() {\n      for (var _len61 = arguments.length, args = new Array(_len61), _key61 = 0; _key61 < _len61; _key61++) {\n        args[_key61] = arguments[_key61];\n      }\n      return rangeRefs(editor, ...args);\n    },\n    removeNodes: function removeNodes$1() {\n      for (var _len62 = arguments.length, args = new Array(_len62), _key62 = 0; _key62 < _len62; _key62++) {\n        args[_key62] = arguments[_key62];\n      }\n      return removeNodes(editor, ...args);\n    },\n    select: function select$1() {\n      for (var _len63 = arguments.length, args = new Array(_len63), _key63 = 0; _key63 < _len63; _key63++) {\n        args[_key63] = arguments[_key63];\n      }\n      return select(editor, ...args);\n    },\n    setNodes: function setNodes$1() {\n      for (var _len64 = arguments.length, args = new Array(_len64), _key64 = 0; _key64 < _len64; _key64++) {\n        args[_key64] = arguments[_key64];\n      }\n      return setNodes(editor, ...args);\n    },\n    setNormalizing: function setNormalizing$1() {\n      for (var _len65 = arguments.length, args = new Array(_len65), _key65 = 0; _key65 < _len65; _key65++) {\n        args[_key65] = arguments[_key65];\n      }\n      return setNormalizing(editor, ...args);\n    },\n    setPoint: function setPoint$1() {\n      for (var _len66 = arguments.length, args = new Array(_len66), _key66 = 0; _key66 < _len66; _key66++) {\n        args[_key66] = arguments[_key66];\n      }\n      return setPoint(editor, ...args);\n    },\n    setSelection: function setSelection$1() {\n      for (var _len67 = arguments.length, args = new Array(_len67), _key67 = 0; _key67 < _len67; _key67++) {\n        args[_key67] = arguments[_key67];\n      }\n      return setSelection(editor, ...args);\n    },\n    splitNodes: function splitNodes$1() {\n      for (var _len68 = arguments.length, args = new Array(_len68), _key68 = 0; _key68 < _len68; _key68++) {\n        args[_key68] = arguments[_key68];\n      }\n      return splitNodes(editor, ...args);\n    },\n    start: function start$1() {\n      for (var _len69 = arguments.length, args = new Array(_len69), _key69 = 0; _key69 < _len69; _key69++) {\n        args[_key69] = arguments[_key69];\n      }\n      return start(editor, ...args);\n    },\n    string: function string$1() {\n      for (var _len70 = arguments.length, args = new Array(_len70), _key70 = 0; _key70 < _len70; _key70++) {\n        args[_key70] = arguments[_key70];\n      }\n      return string(editor, ...args);\n    },\n    unhangRange: function unhangRange$1() {\n      for (var _len71 = arguments.length, args = new Array(_len71), _key71 = 0; _key71 < _len71; _key71++) {\n        args[_key71] = arguments[_key71];\n      }\n      return unhangRange(editor, ...args);\n    },\n    unsetNodes: function unsetNodes$1() {\n      for (var _len72 = arguments.length, args = new Array(_len72), _key72 = 0; _key72 < _len72; _key72++) {\n        args[_key72] = arguments[_key72];\n      }\n      return unsetNodes(editor, ...args);\n    },\n    unwrapNodes: function unwrapNodes$1() {\n      for (var _len73 = arguments.length, args = new Array(_len73), _key73 = 0; _key73 < _len73; _key73++) {\n        args[_key73] = arguments[_key73];\n      }\n      return unwrapNodes(editor, ...args);\n    },\n    void: function _void() {\n      for (var _len74 = arguments.length, args = new Array(_len74), _key74 = 0; _key74 < _len74; _key74++) {\n        args[_key74] = arguments[_key74];\n      }\n      return getVoid(editor, ...args);\n    },\n    withoutNormalizing: function withoutNormalizing$1() {\n      for (var _len75 = arguments.length, args = new Array(_len75), _key75 = 0; _key75 < _len75; _key75++) {\n        args[_key75] = arguments[_key75];\n      }\n      return withoutNormalizing(editor, ...args);\n    },\n    wrapNodes: function wrapNodes$1() {\n      for (var _len76 = arguments.length, args = new Array(_len76), _key76 = 0; _key76 < _len76; _key76++) {\n        args[_key76] = arguments[_key76];\n      }\n      return wrapNodes(editor, ...args);\n    }\n  };\n  return editor;\n};\nexport { Editor, Element, Location, Node, Operation, Path, PathRef, Point, PointRef, Range, RangeRef, Scrubber, Span, Text, Transforms, above, addMark, after, apply, before, collapse, createEditor, deleteBackward, deleteForward, deleteFragment, deleteText, deselect, edges, elementReadOnly, end, first, fragment, getDirtyPaths, getFragment, getVoid, hasBlocks, hasInlines, hasPath, hasTexts, insertBreak, insertFragment, insertNode, insertNodes, insertSoftBreak, insertText, isBlock, isEdge, isEditor, isEmpty, isEnd, isNormalizing, isStart, last, leaf, levels, liftNodes, marks, mergeNodes, move, moveNodes, next, node, nodes, normalize, normalizeNode, parent, path, pathRef, pathRefs, point, pointRef, pointRefs, positions, previous, range, rangeRef, rangeRefs, removeMark, removeNodes, select, setNodes, setNormalizing, setPoint, setSelection, shouldNormalize, splitNodes, start, string, unhangRange, unsetNodes, unwrapNodes, withoutNormalizing, wrapNodes };","map":{"version":3,"names":["PathRef","transform","ref","op","current","affinity","path","Path","unref","PointRef","point","Point","RangeRef","Range","DIRTY_PATHS","WeakMap","DIRTY_PATH_KEYS","FLUSHING","NORMALIZING","PATH_REFS","POINT_REFS","RANGE_REFS","ancestors","options","arguments","length","undefined","reverse","paths","levels","slice","common","another","i","av","bv","push","compare","min","Math","endsAfter","as","bs","equals","endsAt","endsBefore","every","n","hasPrevious","isAfter","isAncestor","isBefore","isChild","isCommon","isDescendant","isParent","isPath","value","Array","isArray","isSibling","al","bl","list","next","Error","concat","last","operationCanTransformPath","operation","type","parent","previous","relative","ancestor","p","_op","_op2","position","_op3","_position","_op4","newPath","onp","copy","_defineProperty","obj","key","Object","defineProperty","enumerable","configurable","writable","applyToDraft","editor","selection","node","Node","index","children","splice","points","_path","offset","text","_node","leaf","before","after","_point","_key","_path2","_node2","get","prevPath","prev","_parent","_index","Text","isText","Scrubber","stringify","_point2","_key2","_path3","_node3","_parent2","_index2","truePath","newParent","newIndex","_point3","_key3","_path4","_index3","_parent3","_point4","_key4","result","_prev","texts","preferNext","_path5","_offset","_text","_node4","_before","_after","_point5","_key5","_path6","properties","newProperties","_node5","_key6","_key7","hasOwnProperty","_newProperties","isRange","_objectSpread$e","_key8","_value","_path7","_properties","_node6","_parent4","_index4","newNode","_before2","_after2","_before3","_after3","_point6","_key9","GeneralTransforms","createDraft","finishDraft","isDraft","NodeTransforms","insertNodes","nodes","liftNodes","mergeNodes","moveNodes","removeNodes","setNodes","props","splitNodes","unsetNodes","unwrapNodes","wrapNodes","element","SelectionTransforms","collapse","deselect","move","select","target","setPoint","setSelection","isDeepEqual","a","b","isPlainObject","_objectWithoutPropertiesLoose","source","excluded","sourceKeys","keys","indexOf","_objectWithoutProperties","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","edges","range","anchor","focus","isBackward","end","includes","rs","re","ts","te","start","isAfterStart","isBeforeEnd","isPoint","intersection","rest","_excluded$4","s1","e1","s2","e2","_objectSpread$d","isCollapsed","isExpanded","isForward","produce","r","affinityAnchor","affinityFocus","isElement","isNodeList","Editor","isEditor","Element","isElementList","val","isElementProps","isElementType","elementVal","elementKey","matches","IS_NODE_LIST_CACHE","root","entry","child","c","childPath","descendant","descendants","elements","extractProps","_excluded$3","_excluded2$3","first","fragment","newRoot","nodeEntries","pass","_ref","_leaf","has","isNode","cachedResult","set","isTextProps","from","to","visited","Set","add","nextIndex","_newPath","parentPath","string","map","join","Operation","isNodeOperation","isOperation","endsWith","isOperationList","isSelectionOperation","isTextOperation","inverse","_objectSpread$c","inversePath","inverseNewPath","IS_EDITOR_CACHE","cachedIsEditor","addMark","apply","deleteFragment","insertBreak","insertSoftBreak","insertFragment","insertNode","insertText","isElementReadOnly","isInline","isSelectable","isVoid","normalizeNode","onChange","removeMark","getDirtyPaths","marks","operations","above","at","deleteBackward","unit","deleteForward","elementReadOnly","hasBlocks","hasInlines","hasPath","hasTexts","isBlock","isEdge","isEmpty","isEnd","isNormalizing","isStart","getMarks","normalize","pathRef","pathRefs","pointRef","pointRefs","positions","rangeRef","rangeRefs","setNormalizing","unhangRange","void","withoutNormalizing","fn","Location","isLocation","Span","isSpan","_objectSpread$b","_scrubber","setScrubber","scrubber","JSON","loose","omitText","_excluded$2","isTextList","decorations","leaves","_objectSpread$a","dec","_excluded2$2","leafEnd","decorationStart","decorationEnd","leafStart","assign","middle","off","_off","getDefaultInsertLocation","matchPath","getCharacterDistance","str","isRTL","isLTR","codepoints","codepointsIteratorRTL","left","CodepointType","None","right","distance","gb11","gb12Or13","char","code","codePointAt","getCodepointType","intersects","ZWJ","ExtPict","endsWithEmojiZWJ","substring","RI","endsWithOddNumberOfRIs","isBoundaryPair","SPACE","PUNCTUATION","CHAMELEON","getWordDistance","dist","started","charDist","remaining","splitByCharacterDistance","isWordCharacter","test","nextChar","nextRemaining","char1","charAt","isLowSurrogate","charCodeAt","char2","isHighSurrogate","charCode","reExtend","rePrepend","reSpacingMark","reL","reV","reT","reLV","reLVT","reExtPict","Any","search","Extend","Prepend","SpacingMark","L","V","T","LV","LVT","x","y","NonBoundaryPairs","findIndex","endingEmojiZWJ","endingRIs","match","numRIs","TextTransforms","delete","voids","startRef","endRef","Transforms","startPoint","endPoint","_objectSpread$9","_ref2","oldDirtyPaths","oldDirtyPathKeys","dirtyPaths","dirtyPathKeys","newDirtyPaths","Promise","resolve","then","previousPath","oldAncestors","newAncestors","_ancestor","_p","resultPath","_ancestors","_levels","nextPath","getFragment","shouldHaveInlines","currentNode","_child","isLast","isInlineOrText","newChild","_newChild","shouldNormalize","iteration","initialDirtyPathsLength","maxIterations","mode","parentNode","markableVoid","expandedSelection","markAcceptingVoidSelected","selectedNode","selectedPath","split","_objectSpread$8","edge","d","_objectSpread$7","_objectSpread$6","direction","_objectSpread$5","getVoid","_objectSpread$4","some","always","_objectSpread$3","_rest","_excluded$1","markedVoid","block","prevNode","blockPath","_excluded2$1","pointAfterLocation","span","universal","ignoreNonSelectable","hit","isLower","emit","force","getDirtyPathKeys","popDirtyPath","pop","allPaths","allPathKeys","dirtyPath","_","_dirtyPath","_entry","refs","depth","firstPath","lastPath","isNewBlock","blockText","leafTextRemaining","leafTextOffset","e","s","isFirst","calcDistance","pointBeforeLocation","_objectSpread$2","t","endBlock","skip","deleteText","hanging","furthestVoid","voidPath","opts","_end","endOfDoc","startBlock","isAcrossBlocks","isSingleText","startNonEditable","_Editor$void","endNonEditable","_Editor$void2","removedText","filter","forEach","startUnref","endUnref","inlineElementMatch","_inlinePath","blockMatch","isBlockStart","isBlockEnd","isBlockEmpty","mergeStart","mergeEnd","matcher","isRoot","starts","middles","ends","starting","inlineMatch","inlinePath","isInlineStart","isInlineEnd","middleRef","_objectSpread$1","oldProps","newProps","k","isAtEnd","parentNodeEntry","toPath","_toPath","splitPath","_toPath2","hasSingleChildNest","commonPath","isPreviousSibling","emptyAncestor","emptyRef","_excluded","_excluded2","toRef","targets","depths","merge","splitMode","endAtEndOfNode","startAtStartOfNode","prop","nodeProp","hasChanges","deleteRange","height","beforeRef","afterRef","highest","voidMatch","nudge","voidNode","afterPath","siblingHeight","highestPath","lowestPath","_afterRef","_loop","roots","rootPath","_ret","commonNodeEntry","commonNode","wrapperPath","wrapper","_objectSpread","createEditor","apply$1","_len","args","addMark$1","_len2","deleteBackward$1","_len3","deleteForward$1","_len4","deleteFragment$1","_len5","getFragment$1","_len6","insertBreak$1","_len7","insertSoftBreak$1","_len8","insertFragment$1","_len9","insertNode$1","_len10","_key10","insertText$1","_len11","_key11","normalizeNode$1","_len12","_key12","removeMark$1","_len13","_key13","getDirtyPaths$1","_len14","_key14","shouldNormalize$1","_len15","_key15","above$1","_len16","_key16","after$1","_len17","_key17","before$1","_len18","_key18","collapse$1","_len19","_key19","_delete","_len20","_key20","deselect$1","_len21","_key21","edges$1","_len22","_key22","elementReadOnly$1","_len23","_key23","end$1","_len24","_key24","first$1","_len25","_key25","fragment$1","_len26","_key26","_len27","_key27","hasBlocks$1","_len28","_key28","hasInlines$1","_len29","_key29","hasPath$1","_len30","_key30","hasTexts$1","_len31","_key31","insertNodes$1","_len32","_key32","isBlock$1","_len33","_key33","isEdge$1","_len34","_key34","isEmpty$1","_len35","_key35","isEnd$1","_len36","_key36","isNormalizing$1","_len37","_key37","isStart$1","_len38","_key38","last$1","_len39","_key39","leaf$1","_len40","_key40","levels$1","_len41","_key41","liftNodes$1","_len42","_key42","mergeNodes$1","_len43","_key43","move$1","_len44","_key44","moveNodes$1","_len45","_key45","next$1","_len46","_key46","node$1","_len47","_key47","nodes$1","_len48","_key48","normalize$1","_len49","_key49","parent$1","_len50","_key50","path$1","_len51","_key51","pathRef$1","_len52","_key52","pathRefs$1","_len53","_key53","point$1","_len54","_key54","pointRef$1","_len55","_key55","pointRefs$1","_len56","_key56","positions$1","_len57","_key57","previous$1","_len58","_key58","range$1","_len59","_key59","rangeRef$1","_len60","_key60","rangeRefs$1","_len61","_key61","removeNodes$1","_len62","_key62","select$1","_len63","_key63","setNodes$1","_len64","_key64","setNormalizing$1","_len65","_key65","setPoint$1","_len66","_key66","setSelection$1","_len67","_key67","splitNodes$1","_len68","_key68","start$1","_len69","_key69","string$1","_len70","_key70","unhangRange$1","_len71","_key71","unsetNodes$1","_len72","_key72","unwrapNodes$1","_len73","_key73","_void","_len74","_key74","withoutNormalizing$1","_len75","_key75","wrapNodes$1","_len76","_key76"],"sources":["/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/interfaces/path-ref.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/interfaces/point-ref.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/interfaces/range-ref.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/utils/weak-maps.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/interfaces/path.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/.yarn/cache/@babel-runtime-npm-7.15.3-6333c71362-2f0b8d2d4e.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/interfaces/transforms/general.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/interfaces/transforms/node.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/interfaces/transforms/selection.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/utils/deep-equal.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/.yarn/cache/@babel-runtime-npm-7.15.3-6333c71362-2f0b8d2d4e.zip/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/.yarn/cache/@babel-runtime-npm-7.15.3-6333c71362-2f0b8d2d4e.zip/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/interfaces/range.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/interfaces/element.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/interfaces/node.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/interfaces/operation.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/is-editor.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/interfaces/editor.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/interfaces/location.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/interfaces/point.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/interfaces/scrubber.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/interfaces/text.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/utils/get-default-insert-location.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/utils/match-path.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/utils/string.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/interfaces/transforms/text.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/interfaces/transforms/index.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/core/apply.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/core/get-dirty-paths.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/core/get-fragment.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/core/normalize-node.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/core/should-normalize.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/above.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/add-mark.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/after.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/before.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/delete-backward.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/delete-forward.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/delete-fragment.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/edges.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/element-read-only.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/end.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/first.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/fragment.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/get-void.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/has-blocks.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/has-inlines.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/has-path.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/has-texts.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/insert-break.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/insert-node.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/insert-soft-break.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/insert-text.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/is-block.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/is-edge.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/is-empty.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/is-end.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/is-normalizing.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/is-start.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/last.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/leaf.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/levels.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/marks.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/next.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/node.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/nodes.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/normalize.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/parent.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/path-ref.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/path-refs.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/path.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/point-ref.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/point-refs.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/point.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/positions.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/previous.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/range-ref.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/range-refs.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/range.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/remove-mark.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/set-normalizing.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/start.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/string.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/unhang-range.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/editor/without-normalizing.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/transforms-text/delete-text.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/transforms-text/insert-fragment.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/transforms-selection/collapse.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/transforms-selection/deselect.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/transforms-selection/move.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/transforms-selection/select.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/transforms-selection/set-point.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/transforms-selection/set-selection.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/transforms-node/insert-nodes.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/transforms-node/lift-nodes.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/transforms-node/merge-nodes.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/transforms-node/move-nodes.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/transforms-node/remove-nodes.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/transforms-node/set-nodes.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/transforms-node/split-nodes.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/transforms-node/unset-nodes.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/transforms-node/unwrap-nodes.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/transforms-node/wrap-nodes.ts","/Users/ailuoku6/web_project/flxEditor/node_modules/.pnpm/slate@0.94.1/node_modules/slate/src/create-editor.ts"],"sourcesContent":["import { Operation, Path } from '..'\n\n/**\n * `PathRef` objects keep a specific path in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date path value.\n */\n\nexport interface PathRef {\n  current: Path | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Path | null\n}\n\nexport interface PathRefInterface {\n  /**\n   * Transform the path ref's current value by an operation.\n   */\n  transform: (ref: PathRef, op: Operation) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const PathRef: PathRefInterface = {\n  transform(ref: PathRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Path.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import { Operation, Point } from '..'\nimport { TextDirection } from '../types/types'\n\n/**\n * `PointRef` objects keep a specific point in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date point value.\n */\n\nexport interface PointRef {\n  current: Point | null\n  affinity: TextDirection | null\n  unref(): Point | null\n}\n\nexport interface PointRefInterface {\n  /**\n   * Transform the point ref's current value by an operation.\n   */\n  transform: (ref: PointRef, op: Operation) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const PointRef: PointRefInterface = {\n  transform(ref: PointRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const point = Point.transform(current, op, { affinity })\n    ref.current = point\n\n    if (point == null) {\n      ref.unref()\n    }\n  },\n}\n","import { Operation, Range } from '..'\n\n/**\n * `RangeRef` objects keep a specific range in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date range value.\n */\n\nexport interface RangeRef {\n  current: Range | null\n  affinity: 'forward' | 'backward' | 'outward' | 'inward' | null\n  unref(): Range | null\n}\n\nexport interface RangeRefInterface {\n  /**\n   * Transform the range ref's current value by an operation.\n   */\n  transform: (ref: RangeRef, op: Operation) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const RangeRef: RangeRefInterface = {\n  transform(ref: RangeRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Range.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import { Editor, Path, PathRef, PointRef, RangeRef } from '..'\n\nexport const DIRTY_PATHS: WeakMap<Editor, Path[]> = new WeakMap()\nexport const DIRTY_PATH_KEYS: WeakMap<Editor, Set<string>> = new WeakMap()\nexport const FLUSHING: WeakMap<Editor, boolean> = new WeakMap()\nexport const NORMALIZING: WeakMap<Editor, boolean> = new WeakMap()\nexport const PATH_REFS: WeakMap<Editor, Set<PathRef>> = new WeakMap()\nexport const POINT_REFS: WeakMap<Editor, Set<PointRef>> = new WeakMap()\nexport const RANGE_REFS: WeakMap<Editor, Set<RangeRef>> = new WeakMap()\n","import {\n  InsertNodeOperation,\n  MergeNodeOperation,\n  MoveNodeOperation,\n  Operation,\n  RemoveNodeOperation,\n  SplitNodeOperation,\n} from '..'\nimport { TextDirection } from '../types/types'\n\n/**\n * `Path` arrays are a list of indexes that describe a node's exact position in\n * a Slate node tree. Although they are usually relative to the root `Editor`\n * object, they can be relative to any `Node` object.\n */\n\nexport type Path = number[]\n\nexport interface PathAncestorsOptions {\n  reverse?: boolean\n}\n\nexport interface PathLevelsOptions {\n  reverse?: boolean\n}\n\nexport interface PathTransformOptions {\n  affinity?: TextDirection | null\n}\n\nexport interface PathInterface {\n  /**\n   * Get a list of ancestor paths for a given path.\n   *\n   * The paths are sorted from shallowest to deepest ancestor. However, if the\n   * `reverse: true` option is passed, they are reversed.\n   */\n  ancestors: (path: Path, options?: PathAncestorsOptions) => Path[]\n\n  /**\n   * Get the common ancestor path of two paths.\n   */\n  common: (path: Path, another: Path) => Path\n\n  /**\n   * Compare a path to another, returning an integer indicating whether the path\n   * was before, at, or after the other.\n   *\n   * Note: Two paths of unequal length can still receive a `0` result if one is\n   * directly above or below the other. If you want exact matching, use\n   * [[Path.equals]] instead.\n   */\n  compare: (path: Path, another: Path) => -1 | 0 | 1\n\n  /**\n   * Check if a path ends after one of the indexes in another.\n   */\n  endsAfter: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path ends at one of the indexes in another.\n   */\n  endsAt: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path ends before one of the indexes in another.\n   */\n  endsBefore: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is exactly equal to another.\n   */\n  equals: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if the path of previous sibling node exists\n   */\n  hasPrevious: (path: Path) => boolean\n\n  /**\n   * Check if a path is after another.\n   */\n  isAfter: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is an ancestor of another.\n   */\n  isAncestor: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is before another.\n   */\n  isBefore: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is a child of another.\n   */\n  isChild: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is equal to or an ancestor of another.\n   */\n  isCommon: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is a descendant of another.\n   */\n  isDescendant: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is the parent of another.\n   */\n  isParent: (path: Path, another: Path) => boolean\n\n  /**\n   * Check is a value implements the `Path` interface.\n   */\n  isPath: (value: any) => value is Path\n\n  /**\n   * Check if a path is a sibling of another.\n   */\n  isSibling: (path: Path, another: Path) => boolean\n\n  /**\n   * Get a list of paths at every level down to a path. Note: this is the same\n   * as `Path.ancestors`, but including the path itself.\n   *\n   * The paths are sorted from shallowest to deepest. However, if the `reverse:\n   * true` option is passed, they are reversed.\n   */\n  levels: (path: Path, options?: PathLevelsOptions) => Path[]\n\n  /**\n   * Given a path, get the path to the next sibling node.\n   */\n  next: (path: Path) => Path\n\n  /**\n   * Returns whether this operation can affect paths or not. Used as an\n   * optimization when updating dirty paths during normalization\n   *\n   * NOTE: This *must* be kept in sync with the implementation of 'transform'\n   * below\n   */\n  operationCanTransformPath: (\n    operation: Operation\n  ) => operation is\n    | InsertNodeOperation\n    | RemoveNodeOperation\n    | MergeNodeOperation\n    | SplitNodeOperation\n    | MoveNodeOperation\n\n  /**\n   * Given a path, return a new path referring to the parent node above it.\n   */\n  parent: (path: Path) => Path\n\n  /**\n   * Given a path, get the path to the previous sibling node.\n   */\n  previous: (path: Path) => Path\n\n  /**\n   * Get a path relative to an ancestor.\n   */\n  relative: (path: Path, ancestor: Path) => Path\n\n  /**\n   * Transform a path by an operation.\n   */\n  transform: (\n    path: Path,\n    operation: Operation,\n    options?: PathTransformOptions\n  ) => Path | null\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Path: PathInterface = {\n  ancestors(path: Path, options: PathAncestorsOptions = {}): Path[] {\n    const { reverse = false } = options\n    let paths = Path.levels(path, options)\n\n    if (reverse) {\n      paths = paths.slice(1)\n    } else {\n      paths = paths.slice(0, -1)\n    }\n\n    return paths\n  },\n\n  common(path: Path, another: Path): Path {\n    const common: Path = []\n\n    for (let i = 0; i < path.length && i < another.length; i++) {\n      const av = path[i]\n      const bv = another[i]\n\n      if (av !== bv) {\n        break\n      }\n\n      common.push(av)\n    }\n\n    return common\n  },\n\n  compare(path: Path, another: Path): -1 | 0 | 1 {\n    const min = Math.min(path.length, another.length)\n\n    for (let i = 0; i < min; i++) {\n      if (path[i] < another[i]) return -1\n      if (path[i] > another[i]) return 1\n    }\n\n    return 0\n  },\n\n  endsAfter(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av > bv\n  },\n\n  endsAt(path: Path, another: Path): boolean {\n    const i = path.length\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    return Path.equals(as, bs)\n  },\n\n  endsBefore(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av < bv\n  },\n\n  equals(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length && path.every((n, i) => n === another[i])\n    )\n  },\n\n  hasPrevious(path: Path): boolean {\n    return path[path.length - 1] > 0\n  },\n\n  isAfter(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === 1\n  },\n\n  isAncestor(path: Path, another: Path): boolean {\n    return path.length < another.length && Path.compare(path, another) === 0\n  },\n\n  isBefore(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === -1\n  },\n\n  isChild(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length + 1 && Path.compare(path, another) === 0\n    )\n  },\n\n  isCommon(path: Path, another: Path): boolean {\n    return path.length <= another.length && Path.compare(path, another) === 0\n  },\n\n  isDescendant(path: Path, another: Path): boolean {\n    return path.length > another.length && Path.compare(path, another) === 0\n  },\n\n  isParent(path: Path, another: Path): boolean {\n    return (\n      path.length + 1 === another.length && Path.compare(path, another) === 0\n    )\n  },\n\n  isPath(value: any): value is Path {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || typeof value[0] === 'number')\n    )\n  },\n\n  isSibling(path: Path, another: Path): boolean {\n    if (path.length !== another.length) {\n      return false\n    }\n\n    const as = path.slice(0, -1)\n    const bs = another.slice(0, -1)\n    const al = path[path.length - 1]\n    const bl = another[another.length - 1]\n    return al !== bl && Path.equals(as, bs)\n  },\n\n  levels(path: Path, options: PathLevelsOptions = {}): Path[] {\n    const { reverse = false } = options\n    const list: Path[] = []\n\n    for (let i = 0; i <= path.length; i++) {\n      list.push(path.slice(0, i))\n    }\n\n    if (reverse) {\n      list.reverse()\n    }\n\n    return list\n  },\n\n  next(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the next path of a root path [${path}], because it has no next index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n    return path.slice(0, -1).concat(last + 1)\n  },\n\n  operationCanTransformPath(\n    operation: Operation\n  ): operation is\n    | InsertNodeOperation\n    | RemoveNodeOperation\n    | MergeNodeOperation\n    | SplitNodeOperation\n    | MoveNodeOperation {\n    switch (operation.type) {\n      case 'insert_node':\n      case 'remove_node':\n      case 'merge_node':\n      case 'split_node':\n      case 'move_node':\n        return true\n      default:\n        return false\n    }\n  },\n\n  parent(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(`Cannot get the parent path of the root path [${path}].`)\n    }\n\n    return path.slice(0, -1)\n  },\n\n  previous(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the previous path of a root path [${path}], because it has no previous index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n\n    if (last <= 0) {\n      throw new Error(\n        `Cannot get the previous path of a first child path [${path}] because it would result in a negative index.`\n      )\n    }\n\n    return path.slice(0, -1).concat(last - 1)\n  },\n\n  relative(path: Path, ancestor: Path): Path {\n    if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {\n      throw new Error(\n        `Cannot get the relative path of [${path}] inside ancestor [${ancestor}], because it is not above or equal to the path.`\n      )\n    }\n\n    return path.slice(ancestor.length)\n  },\n\n  transform(\n    path: Path | null,\n    operation: Operation,\n    options: PathTransformOptions = {}\n  ): Path | null {\n    if (!path) return null\n\n    // PERF: use destructing instead of immer\n    const p = [...path]\n    const { affinity = 'forward' } = options\n\n    // PERF: Exit early if the operation is guaranteed not to have an effect.\n    if (path.length === 0) {\n      return p\n    }\n\n    switch (operation.type) {\n      case 'insert_node': {\n        const { path: op } = operation\n\n        if (\n          Path.equals(op, p) ||\n          Path.endsBefore(op, p) ||\n          Path.isAncestor(op, p)\n        ) {\n          p[op.length - 1] += 1\n        }\n\n        break\n      }\n\n      case 'remove_node': {\n        const { path: op } = operation\n\n        if (Path.equals(op, p) || Path.isAncestor(op, p)) {\n          return null\n        } else if (Path.endsBefore(op, p)) {\n          p[op.length - 1] -= 1\n        }\n\n        break\n      }\n\n      case 'merge_node': {\n        const { path: op, position } = operation\n\n        if (Path.equals(op, p) || Path.endsBefore(op, p)) {\n          p[op.length - 1] -= 1\n        } else if (Path.isAncestor(op, p)) {\n          p[op.length - 1] -= 1\n          p[op.length] += position\n        }\n\n        break\n      }\n\n      case 'split_node': {\n        const { path: op, position } = operation\n\n        if (Path.equals(op, p)) {\n          if (affinity === 'forward') {\n            p[p.length - 1] += 1\n          } else if (affinity === 'backward') {\n            // Nothing, because it still refers to the right path.\n          } else {\n            return null\n          }\n        } else if (Path.endsBefore(op, p)) {\n          p[op.length - 1] += 1\n        } else if (Path.isAncestor(op, p) && path[op.length] >= position) {\n          p[op.length - 1] += 1\n          p[op.length] -= position\n        }\n\n        break\n      }\n\n      case 'move_node': {\n        const { path: op, newPath: onp } = operation\n\n        // If the old and new path are the same, it's a no-op.\n        if (Path.equals(op, onp)) {\n          return p\n        }\n\n        if (Path.isAncestor(op, p) || Path.equals(op, p)) {\n          const copy = onp.slice()\n\n          if (Path.endsBefore(op, onp) && op.length < onp.length) {\n            copy[op.length - 1] -= 1\n          }\n\n          return copy.concat(p.slice(op.length))\n        } else if (\n          Path.isSibling(op, onp) &&\n          (Path.isAncestor(onp, p) || Path.equals(onp, p))\n        ) {\n          if (Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          } else {\n            p[op.length - 1] += 1\n          }\n        } else if (\n          Path.endsBefore(onp, p) ||\n          Path.equals(onp, p) ||\n          Path.isAncestor(onp, p)\n        ) {\n          if (Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          }\n\n          p[onp.length - 1] += 1\n        } else if (Path.endsBefore(op, p)) {\n          if (Path.equals(onp, p)) {\n            p[onp.length - 1] += 1\n          }\n\n          p[op.length - 1] -= 1\n        }\n\n        break\n      }\n    }\n\n    return p\n  },\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import { createDraft, finishDraft, isDraft } from 'immer'\nimport {\n  Ancestor,\n  Descendant,\n  Editor,\n  Element,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  Point,\n  Range,\n  Scrubber,\n  Selection,\n  Text,\n} from '../../index'\n\nexport interface GeneralTransforms {\n  /**\n   * Transform the editor by an operation.\n   */\n  transform: (editor: Editor, op: Operation) => void\n}\n\nconst applyToDraft = (editor: Editor, selection: Selection, op: Operation) => {\n  switch (op.type) {\n    case 'insert_node': {\n      const { path, node } = op\n      const parent = Node.parent(editor, path)\n      const index = path[path.length - 1]\n\n      if (index > parent.children.length) {\n        throw new Error(\n          `Cannot apply an \"insert_node\" operation at path [${path}] because the destination is past the end of the node.`\n        )\n      }\n\n      parent.children.splice(index, 0, node)\n\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          selection[key] = Point.transform(point, op)!\n        }\n      }\n\n      break\n    }\n\n    case 'insert_text': {\n      const { path, offset, text } = op\n      if (text.length === 0) break\n      const node = Node.leaf(editor, path)\n      const before = node.text.slice(0, offset)\n      const after = node.text.slice(offset)\n      node.text = before + text + after\n\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          selection[key] = Point.transform(point, op)!\n        }\n      }\n\n      break\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const node = Node.get(editor, path)\n      const prevPath = Path.previous(path)\n      const prev = Node.get(editor, prevPath)\n      const parent = Node.parent(editor, path)\n      const index = path[path.length - 1]\n\n      if (Text.isText(node) && Text.isText(prev)) {\n        prev.text += node.text\n      } else if (!Text.isText(node) && !Text.isText(prev)) {\n        prev.children.push(...node.children)\n      } else {\n        throw new Error(\n          `Cannot apply a \"merge_node\" operation at path [${path}] to nodes of different interfaces: ${Scrubber.stringify(\n            node\n          )} ${Scrubber.stringify(prev)}`\n        )\n      }\n\n      parent.children.splice(index, 1)\n\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          selection[key] = Point.transform(point, op)!\n        }\n      }\n\n      break\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n\n      if (Path.isAncestor(path, newPath)) {\n        throw new Error(\n          `Cannot move a path [${path}] to new path [${newPath}] because the destination is inside itself.`\n        )\n      }\n\n      const node = Node.get(editor, path)\n      const parent = Node.parent(editor, path)\n      const index = path[path.length - 1]\n\n      // This is tricky, but since the `path` and `newPath` both refer to\n      // the same snapshot in time, there's a mismatch. After either\n      // removing the original position, the second step's path can be out\n      // of date. So instead of using the `op.newPath` directly, we\n      // transform `op.path` to ascertain what the `newPath` would be after\n      // the operation was applied.\n      parent.children.splice(index, 1)\n      const truePath = Path.transform(path, op)!\n      const newParent = Node.get(editor, Path.parent(truePath)) as Ancestor\n      const newIndex = truePath[truePath.length - 1]\n\n      newParent.children.splice(newIndex, 0, node)\n\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          selection[key] = Point.transform(point, op)!\n        }\n      }\n\n      break\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const index = path[path.length - 1]\n      const parent = Node.parent(editor, path)\n      parent.children.splice(index, 1)\n\n      // Transform all of the points in the value, but if the point was in the\n      // node that was removed we need to update the range or remove it.\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          const result = Point.transform(point, op)\n\n          if (selection != null && result != null) {\n            selection[key] = result\n          } else {\n            let prev: NodeEntry<Text> | undefined\n            let next: NodeEntry<Text> | undefined\n\n            for (const [n, p] of Node.texts(editor)) {\n              if (Path.compare(p, path) === -1) {\n                prev = [n, p]\n              } else {\n                next = [n, p]\n                break\n              }\n            }\n\n            let preferNext = false\n            if (prev && next) {\n              if (Path.equals(next[1], path)) {\n                preferNext = !Path.hasPrevious(next[1])\n              } else {\n                preferNext =\n                  Path.common(prev[1], path).length <\n                  Path.common(next[1], path).length\n              }\n            }\n\n            if (prev && !preferNext) {\n              point.path = prev[1]\n              point.offset = prev[0].text.length\n            } else if (next) {\n              point.path = next[1]\n              point.offset = 0\n            } else {\n              selection = null\n            }\n          }\n        }\n      }\n\n      break\n    }\n\n    case 'remove_text': {\n      const { path, offset, text } = op\n      if (text.length === 0) break\n      const node = Node.leaf(editor, path)\n      const before = node.text.slice(0, offset)\n      const after = node.text.slice(offset + text.length)\n      node.text = before + after\n\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          selection[key] = Point.transform(point, op)!\n        }\n      }\n\n      break\n    }\n\n    case 'set_node': {\n      const { path, properties, newProperties } = op\n\n      if (path.length === 0) {\n        throw new Error(`Cannot set properties on the root node!`)\n      }\n\n      const node = Node.get(editor, path)\n\n      for (const key in newProperties) {\n        if (key === 'children' || key === 'text') {\n          throw new Error(`Cannot set the \"${key}\" property of nodes!`)\n        }\n\n        const value = newProperties[key]\n\n        if (value == null) {\n          delete node[key]\n        } else {\n          node[key] = value\n        }\n      }\n\n      // properties that were previously defined, but are now missing, must be deleted\n      for (const key in properties) {\n        if (!newProperties.hasOwnProperty(key)) {\n          delete node[key]\n        }\n      }\n\n      break\n    }\n\n    case 'set_selection': {\n      const { newProperties } = op\n\n      if (newProperties == null) {\n        selection = newProperties\n      } else {\n        if (selection == null) {\n          if (!Range.isRange(newProperties)) {\n            throw new Error(\n              `Cannot apply an incomplete \"set_selection\" operation properties ${Scrubber.stringify(\n                newProperties\n              )} when there is no current selection.`\n            )\n          }\n\n          selection = { ...newProperties }\n        }\n\n        for (const key in newProperties) {\n          const value = newProperties[key]\n\n          if (value == null) {\n            if (key === 'anchor' || key === 'focus') {\n              throw new Error(`Cannot remove the \"${key}\" selection property`)\n            }\n\n            delete selection[key]\n          } else {\n            selection[key] = value\n          }\n        }\n      }\n\n      break\n    }\n\n    case 'split_node': {\n      const { path, position, properties } = op\n\n      if (path.length === 0) {\n        throw new Error(\n          `Cannot apply a \"split_node\" operation at path [${path}] because the root node cannot be split.`\n        )\n      }\n\n      const node = Node.get(editor, path)\n      const parent = Node.parent(editor, path)\n      const index = path[path.length - 1]\n      let newNode: Descendant\n\n      if (Text.isText(node)) {\n        const before = node.text.slice(0, position)\n        const after = node.text.slice(position)\n        node.text = before\n        newNode = {\n          ...(properties as Partial<Text>),\n          text: after,\n        }\n      } else {\n        const before = node.children.slice(0, position)\n        const after = node.children.slice(position)\n        node.children = before\n\n        newNode = {\n          ...(properties as Partial<Element>),\n          children: after,\n        }\n      }\n\n      parent.children.splice(index + 1, 0, newNode)\n\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          selection[key] = Point.transform(point, op)!\n        }\n      }\n\n      break\n    }\n  }\n  return selection\n}\n\n// eslint-disable-next-line no-redeclare\nexport const GeneralTransforms: GeneralTransforms = {\n  transform(editor: Editor, op: Operation): void {\n    editor.children = createDraft(editor.children)\n    let selection = editor.selection && createDraft(editor.selection)\n\n    try {\n      selection = applyToDraft(editor, selection, op)\n    } finally {\n      editor.children = finishDraft(editor.children)\n\n      if (selection) {\n        editor.selection = isDraft(selection)\n          ? (finishDraft(selection) as Range)\n          : selection\n      } else {\n        editor.selection = null\n      }\n    }\n  },\n}\n","import { Editor, Element, Location, Node, Path } from '../../index'\nimport { NodeMatch, PropsCompare, PropsMerge } from '../editor'\nimport { MaximizeMode, RangeMode } from '../../types/types'\n\nexport interface NodeInsertNodesOptions<T extends Node> {\n  at?: Location\n  match?: NodeMatch<T>\n  mode?: RangeMode\n  hanging?: boolean\n  select?: boolean\n  voids?: boolean\n}\n\nexport interface NodeTransforms {\n  /**\n   * Insert nodes in the editor\n   * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.\n   */\n  insertNodes: <T extends Node>(\n    editor: Editor,\n    nodes: Node | Node[],\n    options?: NodeInsertNodesOptions<T>\n  ) => void\n\n  /**\n   * Lift nodes at a specific location upwards in the document tree, splitting\n   * their parent in two if necessary.\n   */\n  liftNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Merge a node at a location with the previous node of the same depth,\n   * removing any empty containing nodes after the merge if necessary.\n   */\n  mergeNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: RangeMode\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Move the nodes at a location to a new location.\n   */\n  moveNodes: <T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      to: Path\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Remove the nodes at a specific location in the document.\n   */\n  removeNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: RangeMode\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Set new properties on the nodes at a location.\n   */\n  setNodes: <T extends Node>(\n    editor: Editor,\n    props: Partial<T>,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n      compare?: PropsCompare\n      merge?: PropsMerge\n    }\n  ) => void\n\n  /**\n   * Split the nodes at a specific location.\n   */\n  splitNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: RangeMode\n      always?: boolean\n      height?: number\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Unset properties on the nodes at a location.\n   */\n  unsetNodes: <T extends Node>(\n    editor: Editor,\n    props: string | string[],\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Unwrap the nodes at a location from a parent node, splitting the parent if\n   * necessary to ensure that only the content in the range is unwrapped.\n   */\n  unwrapNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Wrap the nodes at a location in a new container node, splitting the edges\n   * of the range first to ensure that only the content in the range is wrapped.\n   */\n  wrapNodes: <T extends Node>(\n    editor: Editor,\n    element: Element,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const NodeTransforms: NodeTransforms = {\n  insertNodes(editor, nodes, options) {\n    editor.insertNodes(nodes, options)\n  },\n  liftNodes(editor, options) {\n    editor.liftNodes(options)\n  },\n  mergeNodes(editor, options) {\n    editor.mergeNodes(options)\n  },\n  moveNodes(editor, options) {\n    editor.moveNodes(options)\n  },\n  removeNodes(editor, options) {\n    editor.removeNodes(options)\n  },\n  setNodes(editor, props, options) {\n    editor.setNodes(props, options)\n  },\n  splitNodes(editor, options) {\n    editor.splitNodes(options)\n  },\n  unsetNodes(editor, props, options) {\n    editor.unsetNodes(props, options)\n  },\n  unwrapNodes(editor, options) {\n    editor.unwrapNodes(options)\n  },\n  wrapNodes(editor, element, options) {\n    editor.wrapNodes(element, options)\n  },\n}\n","import { Editor, Location, Point, Range } from '../../index'\nimport { MoveUnit, SelectionEdge } from '../../types/types'\n\nexport interface SelectionCollapseOptions {\n  edge?: SelectionEdge\n}\n\nexport interface SelectionMoveOptions {\n  distance?: number\n  unit?: MoveUnit\n  reverse?: boolean\n  edge?: SelectionEdge\n}\n\nexport interface SelectionSetPointOptions {\n  edge?: SelectionEdge\n}\n\nexport interface SelectionTransforms {\n  /**\n   * Collapse the selection.\n   */\n  collapse: (editor: Editor, options?: SelectionCollapseOptions) => void\n\n  /**\n   * Unset the selection.\n   */\n  deselect: (editor: Editor) => void\n\n  /**\n   * Move the selection's point forward or backward.\n   */\n  move: (editor: Editor, options?: SelectionMoveOptions) => void\n\n  /**\n   * Set the selection to a new value.\n   */\n  select: (editor: Editor, target: Location) => void\n\n  /**\n   * Set new properties on one of the selection's points.\n   */\n  setPoint: (\n    editor: Editor,\n    props: Partial<Point>,\n    options?: SelectionSetPointOptions\n  ) => void\n\n  /**\n   * Set new properties on the selection.\n   */\n  setSelection: (editor: Editor, props: Partial<Range>) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const SelectionTransforms: SelectionTransforms = {\n  collapse(editor, options) {\n    editor.collapse(options)\n  },\n  deselect(editor) {\n    editor.deselect()\n  },\n  move(editor, options) {\n    editor.move(options)\n  },\n  select(editor, target) {\n    editor.select(target)\n  },\n  setPoint(editor, props, options) {\n    editor.setPoint(props, options)\n  },\n  setSelection(editor, props) {\n    editor.setSelection(props)\n  },\n}\n","import { isPlainObject } from 'is-plain-object'\n\n/*\n  Custom deep equal comparison for Slate nodes.\n\n  We don't need general purpose deep equality;\n  Slate only supports plain values, Arrays, and nested objects.\n  Complex values nested inside Arrays are not supported.\n\n  Slate objects are designed to be serialised, so\n  missing keys are deliberately normalised to undefined.\n */\nexport const isDeepEqual = (\n  node: Record<string, any>,\n  another: Record<string, any>\n): boolean => {\n  for (const key in node) {\n    const a = node[key]\n    const b = another[key]\n    if (isPlainObject(a) && isPlainObject(b)) {\n      if (!isDeepEqual(a, b)) return false\n    } else if (Array.isArray(a) && Array.isArray(b)) {\n      if (a.length !== b.length) return false\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) return false\n      }\n    } else if (a !== b) {\n      return false\n    }\n  }\n\n  /*\n    Deep object equality is only necessary in one direction; in the reverse direction\n    we are only looking for keys that are missing.\n    As above, undefined keys are normalised to missing.\n  */\n\n  for (const key in another) {\n    if (node[key] === undefined && another[key] !== undefined) {\n      return false\n    }\n  }\n\n  return true\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","import { produce } from 'immer'\nimport { isPlainObject } from 'is-plain-object'\nimport { ExtendedType, Operation, Path, Point, PointEntry } from '..'\nimport { RangeDirection } from '../types/types'\n\n/**\n * `Range` objects are a set of points that refer to a specific span of a Slate\n * document. They can define a span inside a single node or a can span across\n * multiple nodes.\n */\n\nexport interface BaseRange {\n  anchor: Point\n  focus: Point\n}\n\nexport type Range = ExtendedType<'Range', BaseRange>\n\nexport interface RangeEdgesOptions {\n  reverse?: boolean\n}\n\nexport interface RangeTransformOptions {\n  affinity?: RangeDirection | null\n}\n\nexport interface RangeInterface {\n  /**\n   * Get the start and end points of a range, in the order in which they appear\n   * in the document.\n   */\n  edges: (range: Range, options?: RangeEdgesOptions) => [Point, Point]\n\n  /**\n   * Get the end point of a range.\n   */\n  end: (range: Range) => Point\n\n  /**\n   * Check if a range is exactly equal to another.\n   */\n  equals: (range: Range, another: Range) => boolean\n\n  /**\n   * Check if a range includes a path, a point or part of another range.\n   */\n  includes: (range: Range, target: Path | Point | Range) => boolean\n\n  /**\n   * Get the intersection of a range with another.\n   */\n  intersection: (range: Range, another: Range) => Range | null\n\n  /**\n   * Check if a range is backward, meaning that its anchor point appears in the\n   * document _after_ its focus point.\n   */\n  isBackward: (range: Range) => boolean\n\n  /**\n   * Check if a range is collapsed, meaning that both its anchor and focus\n   * points refer to the exact same position in the document.\n   */\n  isCollapsed: (range: Range) => boolean\n\n  /**\n   * Check if a range is expanded.\n   *\n   * This is the opposite of [[Range.isCollapsed]] and is provided for legibility.\n   */\n  isExpanded: (range: Range) => boolean\n\n  /**\n   * Check if a range is forward.\n   *\n   * This is the opposite of [[Range.isBackward]] and is provided for legibility.\n   */\n  isForward: (range: Range) => boolean\n\n  /**\n   * Check if a value implements the [[Range]] interface.\n   */\n  isRange: (value: any) => value is Range\n\n  /**\n   * Iterate through all of the point entries in a range.\n   */\n  points: (range: Range) => Generator<PointEntry, void, undefined>\n\n  /**\n   * Get the start point of a range.\n   */\n  start: (range: Range) => Point\n\n  /**\n   * Transform a range by an operation.\n   */\n  transform: (\n    range: Range,\n    op: Operation,\n    options?: RangeTransformOptions\n  ) => Range | null\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Range: RangeInterface = {\n  edges(range: Range, options: RangeEdgesOptions = {}): [Point, Point] {\n    const { reverse = false } = options\n    const { anchor, focus } = range\n    return Range.isBackward(range) === reverse\n      ? [anchor, focus]\n      : [focus, anchor]\n  },\n\n  end(range: Range): Point {\n    const [, end] = Range.edges(range)\n    return end\n  },\n\n  equals(range: Range, another: Range): boolean {\n    return (\n      Point.equals(range.anchor, another.anchor) &&\n      Point.equals(range.focus, another.focus)\n    )\n  },\n\n  includes(range: Range, target: Path | Point | Range): boolean {\n    if (Range.isRange(target)) {\n      if (\n        Range.includes(range, target.anchor) ||\n        Range.includes(range, target.focus)\n      ) {\n        return true\n      }\n\n      const [rs, re] = Range.edges(range)\n      const [ts, te] = Range.edges(target)\n      return Point.isBefore(rs, ts) && Point.isAfter(re, te)\n    }\n\n    const [start, end] = Range.edges(range)\n    let isAfterStart = false\n    let isBeforeEnd = false\n\n    if (Point.isPoint(target)) {\n      isAfterStart = Point.compare(target, start) >= 0\n      isBeforeEnd = Point.compare(target, end) <= 0\n    } else {\n      isAfterStart = Path.compare(target, start.path) >= 0\n      isBeforeEnd = Path.compare(target, end.path) <= 0\n    }\n\n    return isAfterStart && isBeforeEnd\n  },\n\n  intersection(range: Range, another: Range): Range | null {\n    const { anchor, focus, ...rest } = range\n    const [s1, e1] = Range.edges(range)\n    const [s2, e2] = Range.edges(another)\n    const start = Point.isBefore(s1, s2) ? s2 : s1\n    const end = Point.isBefore(e1, e2) ? e1 : e2\n\n    if (Point.isBefore(end, start)) {\n      return null\n    } else {\n      return { anchor: start, focus: end, ...rest }\n    }\n  },\n\n  isBackward(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.isAfter(anchor, focus)\n  },\n\n  isCollapsed(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.equals(anchor, focus)\n  },\n\n  isExpanded(range: Range): boolean {\n    return !Range.isCollapsed(range)\n  },\n\n  isForward(range: Range): boolean {\n    return !Range.isBackward(range)\n  },\n\n  isRange(value: any): value is Range {\n    return (\n      isPlainObject(value) &&\n      Point.isPoint(value.anchor) &&\n      Point.isPoint(value.focus)\n    )\n  },\n\n  *points(range: Range): Generator<PointEntry, void, undefined> {\n    yield [range.anchor, 'anchor']\n    yield [range.focus, 'focus']\n  },\n\n  start(range: Range): Point {\n    const [start] = Range.edges(range)\n    return start\n  },\n\n  transform(\n    range: Range | null,\n    op: Operation,\n    options: RangeTransformOptions = {}\n  ): Range | null {\n    return produce(range, r => {\n      if (r === null) {\n        return null\n      }\n      const { affinity = 'inward' } = options\n      let affinityAnchor: 'forward' | 'backward' | null\n      let affinityFocus: 'forward' | 'backward' | null\n\n      if (affinity === 'inward') {\n        // If the range is collapsed, make sure to use the same affinity to\n        // avoid the two points passing each other and expanding in the opposite\n        // direction\n        const isCollapsed = Range.isCollapsed(r)\n        if (Range.isForward(r)) {\n          affinityAnchor = 'forward'\n          affinityFocus = isCollapsed ? affinityAnchor : 'backward'\n        } else {\n          affinityAnchor = 'backward'\n          affinityFocus = isCollapsed ? affinityAnchor : 'forward'\n        }\n      } else if (affinity === 'outward') {\n        if (Range.isForward(r)) {\n          affinityAnchor = 'backward'\n          affinityFocus = 'forward'\n        } else {\n          affinityAnchor = 'forward'\n          affinityFocus = 'backward'\n        }\n      } else {\n        affinityAnchor = affinity\n        affinityFocus = affinity\n      }\n      const anchor = Point.transform(r.anchor, op, { affinity: affinityAnchor })\n      const focus = Point.transform(r.focus, op, { affinity: affinityFocus })\n\n      if (!anchor || !focus) {\n        return null\n      }\n\n      r.anchor = anchor\n      r.focus = focus\n    })\n  },\n}\n","import { isPlainObject } from 'is-plain-object'\nimport { Ancestor, Descendant, Editor, ExtendedType, Node, Path } from '..'\n\n/**\n * `Element` objects are a type of node in a Slate document that contain other\n * element nodes or text nodes. They can be either \"blocks\" or \"inlines\"\n * depending on the Slate editor's configuration.\n */\n\nexport interface BaseElement {\n  children: Descendant[]\n}\n\nexport type Element = ExtendedType<'Element', BaseElement>\n\nexport interface ElementInterface {\n  /**\n   * Check if a value implements the 'Ancestor' interface.\n   */\n  isAncestor: (value: any) => value is Ancestor\n\n  /**\n   * Check if a value implements the `Element` interface.\n   */\n  isElement: (value: any) => value is Element\n\n  /**\n   * Check if a value is an array of `Element` objects.\n   */\n  isElementList: (value: any) => value is Element[]\n\n  /**\n   * Check if a set of props is a partial of Element.\n   */\n  isElementProps: (props: any) => props is Partial<Element>\n\n  /**\n   * Check if a value implements the `Element` interface and has elementKey with selected value.\n   * Default it check to `type` key value\n   */\n  isElementType: <T extends Element>(\n    value: any,\n    elementVal: string,\n    elementKey?: string\n  ) => value is T\n\n  /**\n   * Check if an element matches set of properties.\n   *\n   * Note: this checks custom properties, and it does not ensure that any\n   * children are equivalent.\n   */\n  matches: (element: Element, props: Partial<Element>) => boolean\n}\n\n/**\n * Shared the function with isElementType utility\n */\nconst isElement = (value: any): value is Element => {\n  return (\n    isPlainObject(value) &&\n    Node.isNodeList(value.children) &&\n    !Editor.isEditor(value)\n  )\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Element: ElementInterface = {\n  isAncestor(value: any): value is Ancestor {\n    return isPlainObject(value) && Node.isNodeList(value.children)\n  },\n\n  isElement,\n\n  isElementList(value: any): value is Element[] {\n    return Array.isArray(value) && value.every(val => Element.isElement(val))\n  },\n\n  isElementProps(props: any): props is Partial<Element> {\n    return (props as Partial<Element>).children !== undefined\n  },\n\n  isElementType: <T extends Element>(\n    value: any,\n    elementVal: string,\n    elementKey: string = 'type'\n  ): value is T => {\n    return isElement(value) && value[elementKey] === elementVal\n  },\n\n  matches(element: Element, props: Partial<Element>): boolean {\n    for (const key in props) {\n      if (key === 'children') {\n        continue\n      }\n\n      if (element[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n}\n\n/**\n * `ElementEntry` objects refer to an `Element` and the `Path` where it can be\n * found inside a root node.\n */\nexport type ElementEntry = [Element, Path]\n","import { produce } from 'immer'\nimport { Editor, Path, Range, Scrubber, Text } from '..'\nimport { Element, ElementEntry } from './element'\n\n/**\n * The `Node` union type represents all of the different types of nodes that\n * occur in a Slate document tree.\n */\n\nexport type BaseNode = Editor | Element | Text\nexport type Node = Editor | Element | Text\n\nexport interface NodeAncestorsOptions {\n  reverse?: boolean\n}\n\nexport interface NodeChildrenOptions {\n  reverse?: boolean\n}\n\nexport interface NodeDescendantsOptions {\n  from?: Path\n  to?: Path\n  reverse?: boolean\n  pass?: (node: NodeEntry) => boolean\n}\n\nexport interface NodeElementsOptions {\n  from?: Path\n  to?: Path\n  reverse?: boolean\n  pass?: (node: NodeEntry) => boolean\n}\n\nexport interface NodeLevelsOptions {\n  reverse?: boolean\n}\n\nexport interface NodeNodesOptions {\n  from?: Path\n  to?: Path\n  reverse?: boolean\n  pass?: (entry: NodeEntry) => boolean\n}\n\nexport interface NodeTextsOptions {\n  from?: Path\n  to?: Path\n  reverse?: boolean\n  pass?: (node: NodeEntry) => boolean\n}\n\nexport interface NodeInterface {\n  /**\n   * Get the node at a specific path, asserting that it's an ancestor node.\n   */\n  ancestor: (root: Node, path: Path) => Ancestor\n\n  /**\n   * Return a generator of all the ancestor nodes above a specific path.\n   *\n   * By default the order is top-down, from highest to lowest ancestor in\n   * the tree, but you can pass the `reverse: true` option to go bottom-up.\n   */\n  ancestors: (\n    root: Node,\n    path: Path,\n    options?: NodeAncestorsOptions\n  ) => Generator<NodeEntry<Ancestor>, void, undefined>\n\n  /**\n   * Get the child of a node at a specific index.\n   */\n  child: (root: Node, index: number) => Descendant\n\n  /**\n   * Iterate over the children of a node at a specific path.\n   */\n  children: (\n    root: Node,\n    path: Path,\n    options?: NodeChildrenOptions\n  ) => Generator<NodeEntry<Descendant>, void, undefined>\n\n  /**\n   * Get an entry for the common ancesetor node of two paths.\n   */\n  common: (root: Node, path: Path, another: Path) => NodeEntry\n\n  /**\n   * Get the node at a specific path, asserting that it's a descendant node.\n   */\n  descendant: (root: Node, path: Path) => Descendant\n\n  /**\n   * Return a generator of all the descendant node entries inside a root node.\n   */\n  descendants: (\n    root: Node,\n    options?: NodeDescendantsOptions\n  ) => Generator<NodeEntry<Descendant>, void, undefined>\n\n  /**\n   * Return a generator of all the element nodes inside a root node. Each iteration\n   * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the\n   * root node is an element it will be included in the iteration as well.\n   */\n  elements: (\n    root: Node,\n    options?: NodeElementsOptions\n  ) => Generator<ElementEntry, void, undefined>\n\n  /**\n   * Extract props from a Node.\n   */\n  extractProps: (node: Node) => NodeProps\n\n  /**\n   * Get the first node entry in a root node from a path.\n   */\n  first: (root: Node, path: Path) => NodeEntry\n\n  /**\n   * Get the sliced fragment represented by a range inside a root node.\n   */\n  fragment: (root: Node, range: Range) => Descendant[]\n\n  /**\n   * Get the descendant node referred to by a specific path. If the path is an\n   * empty array, it refers to the root node itself.\n   */\n  get: (root: Node, path: Path) => Node\n\n  /**\n   * Check if a descendant node exists at a specific path.\n   */\n  has: (root: Node, path: Path) => boolean\n\n  /**\n   * Check if a value implements the `Node` interface.\n   */\n  isNode: (value: any) => value is Node\n\n  /**\n   * Check if a value is a list of `Node` objects.\n   */\n  isNodeList: (value: any) => value is Node[]\n\n  /**\n   * Get the last node entry in a root node from a path.\n   */\n  last: (root: Node, path: Path) => NodeEntry\n\n  /**\n   * Get the node at a specific path, ensuring it's a leaf text node.\n   */\n  leaf: (root: Node, path: Path) => Text\n\n  /**\n   * Return a generator of the in a branch of the tree, from a specific path.\n   *\n   * By default the order is top-down, from highest to lowest node in the tree,\n   * but you can pass the `reverse: true` option to go bottom-up.\n   */\n  levels: (\n    root: Node,\n    path: Path,\n    options?: NodeLevelsOptions\n  ) => Generator<NodeEntry, void, undefined>\n\n  /**\n   * Check if a node matches a set of props.\n   */\n  matches: (node: Node, props: Partial<Node>) => boolean\n\n  /**\n   * Return a generator of all the node entries of a root node. Each entry is\n   * returned as a `[Node, Path]` tuple, with the path referring to the node's\n   * position inside the root node.\n   */\n  nodes: (\n    root: Node,\n    options?: NodeNodesOptions\n  ) => Generator<NodeEntry, void, undefined>\n\n  /**\n   * Get the parent of a node at a specific path.\n   */\n  parent: (root: Node, path: Path) => Ancestor\n\n  /**\n   * Get the concatenated text string of a node's content.\n   *\n   * Note that this will not include spaces or line breaks between block nodes.\n   * It is not a user-facing string, but a string for performing offset-related\n   * computations for a node.\n   */\n  string: (node: Node) => string\n\n  /**\n   * Return a generator of all leaf text nodes in a root node.\n   */\n  texts: (\n    root: Node,\n    options?: NodeTextsOptions\n  ) => Generator<NodeEntry<Text>, void, undefined>\n}\n\nconst IS_NODE_LIST_CACHE = new WeakMap<any[], boolean>()\n\n// eslint-disable-next-line no-redeclare\nexport const Node: NodeInterface = {\n  ancestor(root: Node, path: Path): Ancestor {\n    const node = Node.get(root, path)\n\n    if (Text.isText(node)) {\n      throw new Error(\n        `Cannot get the ancestor node at path [${path}] because it refers to a text node instead: ${Scrubber.stringify(\n          node\n        )}`\n      )\n    }\n\n    return node\n  },\n\n  *ancestors(\n    root: Node,\n    path: Path,\n    options: NodeAncestorsOptions = {}\n  ): Generator<NodeEntry<Ancestor>, void, undefined> {\n    for (const p of Path.ancestors(path, options)) {\n      const n = Node.ancestor(root, p)\n      const entry: NodeEntry<Ancestor> = [n, p]\n      yield entry\n    }\n  },\n\n  child(root: Node, index: number): Descendant {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get the child of a text node: ${Scrubber.stringify(root)}`\n      )\n    }\n\n    const c = root.children[index] as Descendant\n\n    if (c == null) {\n      throw new Error(\n        `Cannot get child at index \\`${index}\\` in node: ${Scrubber.stringify(\n          root\n        )}`\n      )\n    }\n\n    return c\n  },\n\n  *children(\n    root: Node,\n    path: Path,\n    options: NodeChildrenOptions = {}\n  ): Generator<NodeEntry<Descendant>, void, undefined> {\n    const { reverse = false } = options\n    const ancestor = Node.ancestor(root, path)\n    const { children } = ancestor\n    let index = reverse ? children.length - 1 : 0\n\n    while (reverse ? index >= 0 : index < children.length) {\n      const child = Node.child(ancestor, index)\n      const childPath = path.concat(index)\n      yield [child, childPath]\n      index = reverse ? index - 1 : index + 1\n    }\n  },\n\n  common(root: Node, path: Path, another: Path): NodeEntry {\n    const p = Path.common(path, another)\n    const n = Node.get(root, p)\n    return [n, p]\n  },\n\n  descendant(root: Node, path: Path): Descendant {\n    const node = Node.get(root, path)\n\n    if (Editor.isEditor(node)) {\n      throw new Error(\n        `Cannot get the descendant node at path [${path}] because it refers to the root editor node instead: ${Scrubber.stringify(\n          node\n        )}`\n      )\n    }\n\n    return node\n  },\n\n  *descendants(\n    root: Node,\n    options: NodeDescendantsOptions = {}\n  ): Generator<NodeEntry<Descendant>, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (path.length !== 0) {\n        // NOTE: we have to coerce here because checking the path's length does\n        // guarantee that `node` is not a `Editor`, but TypeScript doesn't know.\n        yield [node, path] as NodeEntry<Descendant>\n      }\n    }\n  },\n\n  *elements(\n    root: Node,\n    options: NodeElementsOptions = {}\n  ): Generator<ElementEntry, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Element.isElement(node)) {\n        yield [node, path]\n      }\n    }\n  },\n\n  extractProps(node: Node): NodeProps {\n    if (Element.isAncestor(node)) {\n      const { children, ...properties } = node\n\n      return properties\n    } else {\n      const { text, ...properties } = node\n\n      return properties\n    }\n  },\n\n  first(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        n = n.children[0]\n        p.push(0)\n      }\n    }\n\n    return [n, p]\n  },\n\n  fragment(root: Node, range: Range): Descendant[] {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get a fragment starting from a root text node: ${Scrubber.stringify(\n          root\n        )}`\n      )\n    }\n\n    const newRoot = produce({ children: root.children }, r => {\n      const [start, end] = Range.edges(range)\n      const nodeEntries = Node.nodes(r, {\n        reverse: true,\n        pass: ([, path]) => !Range.includes(range, path),\n      })\n\n      for (const [, path] of nodeEntries) {\n        if (!Range.includes(range, path)) {\n          const parent = Node.parent(r, path)\n          const index = path[path.length - 1]\n          parent.children.splice(index, 1)\n        }\n\n        if (Path.equals(path, end.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(0, end.offset)\n        }\n\n        if (Path.equals(path, start.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(start.offset)\n        }\n      }\n\n      if (Editor.isEditor(r)) {\n        r.selection = null\n      }\n    })\n\n    return newRoot.children\n  },\n\n  get(root: Node, path: Path): Node {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        throw new Error(\n          `Cannot find a descendant at path [${path}] in node: ${Scrubber.stringify(\n            root\n          )}`\n        )\n      }\n\n      node = node.children[p]\n    }\n\n    return node\n  },\n\n  has(root: Node, path: Path): boolean {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        return false\n      }\n\n      node = node.children[p]\n    }\n\n    return true\n  },\n\n  isNode(value: any): value is Node {\n    return (\n      Text.isText(value) || Element.isElement(value) || Editor.isEditor(value)\n    )\n  },\n\n  isNodeList(value: any): value is Node[] {\n    if (!Array.isArray(value)) {\n      return false\n    }\n    const cachedResult = IS_NODE_LIST_CACHE.get(value)\n    if (cachedResult !== undefined) {\n      return cachedResult\n    }\n    const isNodeList = value.every(val => Node.isNode(val))\n    IS_NODE_LIST_CACHE.set(value, isNodeList)\n    return isNodeList\n  },\n\n  last(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        const i = n.children.length - 1\n        n = n.children[i]\n        p.push(i)\n      }\n    }\n\n    return [n, p]\n  },\n\n  leaf(root: Node, path: Path): Text {\n    const node = Node.get(root, path)\n\n    if (!Text.isText(node)) {\n      throw new Error(\n        `Cannot get the leaf node at path [${path}] because it refers to a non-leaf node: ${Scrubber.stringify(\n          node\n        )}`\n      )\n    }\n\n    return node\n  },\n\n  *levels(\n    root: Node,\n    path: Path,\n    options: NodeLevelsOptions = {}\n  ): Generator<NodeEntry, void, undefined> {\n    for (const p of Path.levels(path, options)) {\n      const n = Node.get(root, p)\n      yield [n, p]\n    }\n  },\n\n  matches(node: Node, props: Partial<Node>): boolean {\n    return (\n      (Element.isElement(node) &&\n        Element.isElementProps(props) &&\n        Element.matches(node, props)) ||\n      (Text.isText(node) &&\n        Text.isTextProps(props) &&\n        Text.matches(node, props))\n    )\n  },\n\n  *nodes(\n    root: Node,\n    options: NodeNodesOptions = {}\n  ): Generator<NodeEntry, void, undefined> {\n    const { pass, reverse = false } = options\n    const { from = [], to } = options\n    const visited = new Set()\n    let p: Path = []\n    let n = root\n\n    while (true) {\n      if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) {\n        break\n      }\n\n      if (!visited.has(n)) {\n        yield [n, p]\n      }\n\n      // If we're allowed to go downward and we haven't descended yet, do.\n      if (\n        !visited.has(n) &&\n        !Text.isText(n) &&\n        n.children.length !== 0 &&\n        (pass == null || pass([n, p]) === false)\n      ) {\n        visited.add(n)\n        let nextIndex = reverse ? n.children.length - 1 : 0\n\n        if (Path.isAncestor(p, from)) {\n          nextIndex = from[p.length]\n        }\n\n        p = p.concat(nextIndex)\n        n = Node.get(root, p)\n        continue\n      }\n\n      // If we're at the root and we can't go down, we're done.\n      if (p.length === 0) {\n        break\n      }\n\n      // If we're going forward...\n      if (!reverse) {\n        const newPath = Path.next(p)\n\n        if (Node.has(root, newPath)) {\n          p = newPath\n          n = Node.get(root, p)\n          continue\n        }\n      }\n\n      // If we're going backward...\n      if (reverse && p[p.length - 1] !== 0) {\n        const newPath = Path.previous(p)\n        p = newPath\n        n = Node.get(root, p)\n        continue\n      }\n\n      // Otherwise we're going upward...\n      p = Path.parent(p)\n      n = Node.get(root, p)\n      visited.add(n)\n    }\n  },\n\n  parent(root: Node, path: Path): Ancestor {\n    const parentPath = Path.parent(path)\n    const p = Node.get(root, parentPath)\n\n    if (Text.isText(p)) {\n      throw new Error(\n        `Cannot get the parent of path [${path}] because it does not exist in the root.`\n      )\n    }\n\n    return p\n  },\n\n  string(node: Node): string {\n    if (Text.isText(node)) {\n      return node.text\n    } else {\n      return node.children.map(Node.string).join('')\n    }\n  },\n\n  *texts(\n    root: Node,\n    options: NodeTextsOptions = {}\n  ): Generator<NodeEntry<Text>, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Text.isText(node)) {\n        yield [node, path]\n      }\n    }\n  },\n}\n\n/**\n * The `Descendant` union type represents nodes that are descendants in the\n * tree. It is returned as a convenience in certain cases to narrow a value\n * further than the more generic `Node` union.\n */\n\nexport type Descendant = Element | Text\n\n/**\n * The `Ancestor` union type represents nodes that are ancestors in the tree.\n * It is returned as a convenience in certain cases to narrow a value further\n * than the more generic `Node` union.\n */\n\nexport type Ancestor = Editor | Element\n\n/**\n * `NodeEntry` objects are returned when iterating over the nodes in a Slate\n * document tree. They consist of the node and its `Path` relative to the root\n * node in the document.\n */\n\nexport type NodeEntry<T extends Node = Node> = [T, Path]\n\n/**\n * Convenience type for returning the props of a node.\n */\nexport type NodeProps =\n  | Omit<Editor, 'children'>\n  | Omit<Element, 'children'>\n  | Omit<Text, 'text'>\n","import { ExtendedType, Node, Path, Range } from '..'\nimport { isPlainObject } from 'is-plain-object'\n\nexport type BaseInsertNodeOperation = {\n  type: 'insert_node'\n  path: Path\n  node: Node\n}\n\nexport type InsertNodeOperation = ExtendedType<\n  'InsertNodeOperation',\n  BaseInsertNodeOperation\n>\n\nexport type BaseInsertTextOperation = {\n  type: 'insert_text'\n  path: Path\n  offset: number\n  text: string\n}\n\nexport type InsertTextOperation = ExtendedType<\n  'InsertTextOperation',\n  BaseInsertTextOperation\n>\n\nexport type BaseMergeNodeOperation = {\n  type: 'merge_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n}\n\nexport type MergeNodeOperation = ExtendedType<\n  'MergeNodeOperation',\n  BaseMergeNodeOperation\n>\n\nexport type BaseMoveNodeOperation = {\n  type: 'move_node'\n  path: Path\n  newPath: Path\n}\n\nexport type MoveNodeOperation = ExtendedType<\n  'MoveNodeOperation',\n  BaseMoveNodeOperation\n>\n\nexport type BaseRemoveNodeOperation = {\n  type: 'remove_node'\n  path: Path\n  node: Node\n}\n\nexport type RemoveNodeOperation = ExtendedType<\n  'RemoveNodeOperation',\n  BaseRemoveNodeOperation\n>\n\nexport type BaseRemoveTextOperation = {\n  type: 'remove_text'\n  path: Path\n  offset: number\n  text: string\n}\n\nexport type RemoveTextOperation = ExtendedType<\n  'RemoveTextOperation',\n  BaseRemoveTextOperation\n>\n\nexport type BaseSetNodeOperation = {\n  type: 'set_node'\n  path: Path\n  properties: Partial<Node>\n  newProperties: Partial<Node>\n}\n\nexport type SetNodeOperation = ExtendedType<\n  'SetNodeOperation',\n  BaseSetNodeOperation\n>\n\nexport type BaseSetSelectionOperation =\n  | {\n      type: 'set_selection'\n      properties: null\n      newProperties: Range\n    }\n  | {\n      type: 'set_selection'\n      properties: Partial<Range>\n      newProperties: Partial<Range>\n    }\n  | {\n      type: 'set_selection'\n      properties: Range\n      newProperties: null\n    }\n\nexport type SetSelectionOperation = ExtendedType<\n  'SetSelectionOperation',\n  BaseSetSelectionOperation\n>\n\nexport type BaseSplitNodeOperation = {\n  type: 'split_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n}\n\nexport type SplitNodeOperation = ExtendedType<\n  'SplitNodeOperation',\n  BaseSplitNodeOperation\n>\n\nexport type NodeOperation =\n  | InsertNodeOperation\n  | MergeNodeOperation\n  | MoveNodeOperation\n  | RemoveNodeOperation\n  | SetNodeOperation\n  | SplitNodeOperation\n\nexport type SelectionOperation = SetSelectionOperation\n\nexport type TextOperation = InsertTextOperation | RemoveTextOperation\n\n/**\n * `Operation` objects define the low-level instructions that Slate editors use\n * to apply changes to their internal state. Representing all changes as\n * operations is what allows Slate editors to easily implement history,\n * collaboration, and other features.\n */\n\nexport type BaseOperation = NodeOperation | SelectionOperation | TextOperation\nexport type Operation = ExtendedType<'Operation', BaseOperation>\n\nexport interface OperationInterface {\n  /**\n   * Check if a value is a `NodeOperation` object.\n   */\n  isNodeOperation: (value: any) => value is NodeOperation\n\n  /**\n   * Check if a value is an `Operation` object.\n   */\n  isOperation: (value: any) => value is Operation\n\n  /**\n   * Check if a value is a list of `Operation` objects.\n   */\n  isOperationList: (value: any) => value is Operation[]\n\n  /**\n   * Check if a value is a `SelectionOperation` object.\n   */\n  isSelectionOperation: (value: any) => value is SelectionOperation\n\n  /**\n   * Check if a value is a `TextOperation` object.\n   */\n  isTextOperation: (value: any) => value is TextOperation\n\n  /**\n   * Invert an operation, returning a new operation that will exactly undo the\n   * original when applied.\n   */\n  inverse: (op: Operation) => Operation\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Operation: OperationInterface = {\n  isNodeOperation(value: any): value is NodeOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_node')\n  },\n\n  isOperation(value: any): value is Operation {\n    if (!isPlainObject(value)) {\n      return false\n    }\n\n    switch (value.type) {\n      case 'insert_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'insert_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'merge_node':\n        return (\n          typeof value.position === 'number' &&\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties)\n        )\n      case 'move_node':\n        return Path.isPath(value.path) && Path.isPath(value.newPath)\n      case 'remove_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'remove_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'set_node':\n        return (\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties) &&\n          isPlainObject(value.newProperties)\n        )\n      case 'set_selection':\n        return (\n          (value.properties === null && Range.isRange(value.newProperties)) ||\n          (value.newProperties === null && Range.isRange(value.properties)) ||\n          (isPlainObject(value.properties) &&\n            isPlainObject(value.newProperties))\n        )\n      case 'split_node':\n        return (\n          Path.isPath(value.path) &&\n          typeof value.position === 'number' &&\n          isPlainObject(value.properties)\n        )\n      default:\n        return false\n    }\n  },\n\n  isOperationList(value: any): value is Operation[] {\n    return (\n      Array.isArray(value) && value.every(val => Operation.isOperation(val))\n    )\n  },\n\n  isSelectionOperation(value: any): value is SelectionOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_selection')\n  },\n\n  isTextOperation(value: any): value is TextOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_text')\n  },\n\n  inverse(op: Operation): Operation {\n    switch (op.type) {\n      case 'insert_node': {\n        return { ...op, type: 'remove_node' }\n      }\n\n      case 'insert_text': {\n        return { ...op, type: 'remove_text' }\n      }\n\n      case 'merge_node': {\n        return { ...op, type: 'split_node', path: Path.previous(op.path) }\n      }\n\n      case 'move_node': {\n        const { newPath, path } = op\n\n        // PERF: in this case the move operation is a no-op anyways.\n        if (Path.equals(newPath, path)) {\n          return op\n        }\n\n        // If the move happens completely within a single parent the path and\n        // newPath are stable with respect to each other.\n        if (Path.isSibling(path, newPath)) {\n          return { ...op, path: newPath, newPath: path }\n        }\n\n        // If the move does not happen within a single parent it is possible\n        // for the move to impact the true path to the location where the node\n        // was removed from and where it was inserted. We have to adjust for this\n        // and find the original path. We can accomplish this (only in non-sibling)\n        // moves by looking at the impact of the move operation on the node\n        // after the original move path.\n        const inversePath = Path.transform(path, op)!\n        const inverseNewPath = Path.transform(Path.next(path), op)!\n        return { ...op, path: inversePath, newPath: inverseNewPath }\n      }\n\n      case 'remove_node': {\n        return { ...op, type: 'insert_node' }\n      }\n\n      case 'remove_text': {\n        return { ...op, type: 'insert_text' }\n      }\n\n      case 'set_node': {\n        const { properties, newProperties } = op\n        return { ...op, properties: newProperties, newProperties: properties }\n      }\n\n      case 'set_selection': {\n        const { properties, newProperties } = op\n\n        if (properties == null) {\n          return {\n            ...op,\n            properties: newProperties as Range,\n            newProperties: null,\n          }\n        } else if (newProperties == null) {\n          return {\n            ...op,\n            properties: null,\n            newProperties: properties as Range,\n          }\n        } else {\n          return { ...op, properties: newProperties, newProperties: properties }\n        }\n      }\n\n      case 'split_node': {\n        return { ...op, type: 'merge_node', path: Path.next(op.path) }\n      }\n    }\n  },\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { isPlainObject } from 'is-plain-object'\nimport { Range } from '../interfaces/range'\nimport { Node } from '../interfaces/node'\nimport { Operation } from '../interfaces/operation'\n\nconst IS_EDITOR_CACHE = new WeakMap<object, boolean>()\n\nexport const isEditor: EditorInterface['isEditor'] = (\n  value: any\n): value is Editor => {\n  const cachedIsEditor = IS_EDITOR_CACHE.get(value)\n  if (cachedIsEditor !== undefined) {\n    return cachedIsEditor\n  }\n\n  if (!isPlainObject(value)) {\n    return false\n  }\n\n  const isEditor =\n    typeof value.addMark === 'function' &&\n    typeof value.apply === 'function' &&\n    typeof value.deleteFragment === 'function' &&\n    typeof value.insertBreak === 'function' &&\n    typeof value.insertSoftBreak === 'function' &&\n    typeof value.insertFragment === 'function' &&\n    typeof value.insertNode === 'function' &&\n    typeof value.insertText === 'function' &&\n    typeof value.isElementReadOnly === 'function' &&\n    typeof value.isInline === 'function' &&\n    typeof value.isSelectable === 'function' &&\n    typeof value.isVoid === 'function' &&\n    typeof value.normalizeNode === 'function' &&\n    typeof value.onChange === 'function' &&\n    typeof value.removeMark === 'function' &&\n    typeof value.getDirtyPaths === 'function' &&\n    (value.marks === null || isPlainObject(value.marks)) &&\n    (value.selection === null || Range.isRange(value.selection)) &&\n    Node.isNodeList(value.children) &&\n    Operation.isOperationList(value.operations)\n  IS_EDITOR_CACHE.set(value, isEditor)\n  return isEditor\n}\n","import {\n  Ancestor,\n  Descendant,\n  Element,\n  ExtendedType,\n  Location,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  Point,\n  PointRef,\n  Range,\n  RangeRef,\n  Span,\n  Text,\n  Transforms,\n} from '..'\nimport {\n  LeafEdge,\n  MaximizeMode,\n  RangeDirection,\n  SelectionMode,\n  TextDirection,\n  TextUnit,\n  TextUnitAdjustment,\n} from '../types/types'\nimport { OmitFirstArg } from '../utils/types'\nimport { isEditor } from '../editor/is-editor'\nimport {\n  TextInsertFragmentOptions,\n  TextInsertTextOptions,\n} from './transforms/text'\nimport { NodeInsertNodesOptions } from './transforms/node'\n\n/**\n * The `Editor` interface stores all the state of a Slate editor. It is extended\n * by plugins that wish to add their own helpers and implement new behaviors.\n */\nexport interface BaseEditor {\n  // Core state.\n\n  children: Descendant[]\n  selection: Selection\n  operations: Operation[]\n  marks: EditorMarks | null\n\n  // Overrideable core methods.\n\n  apply: (operation: Operation) => void\n  getDirtyPaths: (operation: Operation) => Path[]\n  getFragment: () => Descendant[]\n  isElementReadOnly: (element: Element) => boolean\n  isSelectable: (element: Element) => boolean\n  markableVoid: (element: Element) => boolean\n  normalizeNode: (entry: NodeEntry, options?: { operation?: Operation }) => void\n  onChange: (options?: { operation?: Operation }) => void\n  shouldNormalize: ({\n    iteration,\n    dirtyPaths,\n    operation,\n  }: {\n    iteration: number\n    initialDirtyPathsLength: number\n    dirtyPaths: Path[]\n    operation?: Operation\n  }) => boolean\n\n  // Overrideable core transforms.\n\n  addMark: OmitFirstArg<typeof Editor.addMark>\n  collapse: OmitFirstArg<typeof Transforms.collapse>\n  delete: OmitFirstArg<typeof Transforms.delete>\n  deleteBackward: (unit: TextUnit) => void\n  deleteForward: (unit: TextUnit) => void\n  deleteFragment: OmitFirstArg<typeof Editor.deleteFragment>\n  deselect: OmitFirstArg<typeof Transforms.deselect>\n  insertBreak: OmitFirstArg<typeof Editor.insertBreak>\n  insertFragment: OmitFirstArg<typeof Transforms.insertFragment>\n  insertNode: OmitFirstArg<typeof Editor.insertNode>\n  insertNodes: OmitFirstArg<typeof Transforms.insertNodes>\n  insertSoftBreak: OmitFirstArg<typeof Editor.insertSoftBreak>\n  insertText: OmitFirstArg<typeof Transforms.insertText>\n  liftNodes: OmitFirstArg<typeof Transforms.liftNodes>\n  mergeNodes: OmitFirstArg<typeof Transforms.mergeNodes>\n  move: OmitFirstArg<typeof Transforms.move>\n  moveNodes: OmitFirstArg<typeof Transforms.moveNodes>\n  normalize: OmitFirstArg<typeof Editor.normalize>\n  removeMark: OmitFirstArg<typeof Editor.removeMark>\n  removeNodes: OmitFirstArg<typeof Transforms.removeNodes>\n  select: OmitFirstArg<typeof Transforms.select>\n  setNodes: <T extends Node>(\n    props: Partial<T>,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n      compare?: PropsCompare\n      merge?: PropsMerge\n    }\n  ) => void\n  setNormalizing: OmitFirstArg<typeof Editor.setNormalizing>\n  setPoint: OmitFirstArg<typeof Transforms.setPoint>\n  setSelection: OmitFirstArg<typeof Transforms.setSelection>\n  splitNodes: OmitFirstArg<typeof Transforms.splitNodes>\n  unsetNodes: OmitFirstArg<typeof Transforms.unsetNodes>\n  unwrapNodes: OmitFirstArg<typeof Transforms.unwrapNodes>\n  withoutNormalizing: OmitFirstArg<typeof Editor.withoutNormalizing>\n  wrapNodes: OmitFirstArg<typeof Transforms.wrapNodes>\n\n  // Overrideable core queries.\n\n  above: <T extends Ancestor>(\n    options?: EditorAboveOptions<T>\n  ) => NodeEntry<T> | undefined\n  after: OmitFirstArg<typeof Editor.after>\n  before: OmitFirstArg<typeof Editor.before>\n  edges: OmitFirstArg<typeof Editor.edges>\n  elementReadOnly: OmitFirstArg<typeof Editor.elementReadOnly>\n  end: OmitFirstArg<typeof Editor.end>\n  first: OmitFirstArg<typeof Editor.first>\n  fragment: OmitFirstArg<typeof Editor.fragment>\n  getMarks: OmitFirstArg<typeof Editor.marks>\n  hasBlocks: OmitFirstArg<typeof Editor.hasBlocks>\n  hasInlines: OmitFirstArg<typeof Editor.hasInlines>\n  hasPath: OmitFirstArg<typeof Editor.hasPath>\n  hasTexts: OmitFirstArg<typeof Editor.hasTexts>\n  isBlock: OmitFirstArg<typeof Editor.isBlock>\n  isEdge: OmitFirstArg<typeof Editor.isEdge>\n  isEmpty: OmitFirstArg<typeof Editor.isEmpty>\n  isEnd: OmitFirstArg<typeof Editor.isEnd>\n  isInline: OmitFirstArg<typeof Editor.isInline>\n  isNormalizing: OmitFirstArg<typeof Editor.isNormalizing>\n  isStart: OmitFirstArg<typeof Editor.isStart>\n  isVoid: OmitFirstArg<typeof Editor.isVoid>\n  last: OmitFirstArg<typeof Editor.last>\n  leaf: OmitFirstArg<typeof Editor.leaf>\n  levels: <T extends Node>(\n    options?: EditorLevelsOptions<T>\n  ) => Generator<NodeEntry<T>, void, undefined>\n  next: <T extends Descendant>(\n    options?: EditorNextOptions<T>\n  ) => NodeEntry<T> | undefined\n  node: OmitFirstArg<typeof Editor.node>\n  nodes: <T extends Node>(\n    options?: EditorNodesOptions<T>\n  ) => Generator<NodeEntry<T>, void, undefined>\n  parent: OmitFirstArg<typeof Editor.parent>\n  path: OmitFirstArg<typeof Editor.path>\n  pathRef: OmitFirstArg<typeof Editor.pathRef>\n  pathRefs: OmitFirstArg<typeof Editor.pathRefs>\n  point: OmitFirstArg<typeof Editor.point>\n  pointRef: OmitFirstArg<typeof Editor.pointRef>\n  pointRefs: OmitFirstArg<typeof Editor.pointRefs>\n  positions: OmitFirstArg<typeof Editor.positions>\n  previous: <T extends Node>(\n    options?: EditorPreviousOptions<T>\n  ) => NodeEntry<T> | undefined\n  range: OmitFirstArg<typeof Editor.range>\n  rangeRef: OmitFirstArg<typeof Editor.rangeRef>\n  rangeRefs: OmitFirstArg<typeof Editor.rangeRefs>\n  start: OmitFirstArg<typeof Editor.start>\n  string: OmitFirstArg<typeof Editor.string>\n  unhangRange: OmitFirstArg<typeof Editor.unhangRange>\n  void: OmitFirstArg<typeof Editor.void>\n}\n\nexport type Editor = ExtendedType<'Editor', BaseEditor>\n\nexport type BaseSelection = Range | null\n\nexport type Selection = ExtendedType<'Selection', BaseSelection>\n\nexport type EditorMarks = Omit<Text, 'text'>\n\nexport interface EditorAboveOptions<T extends Ancestor> {\n  at?: Location\n  match?: NodeMatch<T>\n  mode?: MaximizeMode\n  voids?: boolean\n}\n\nexport interface EditorAfterOptions {\n  distance?: number\n  unit?: TextUnitAdjustment\n  voids?: boolean\n}\n\nexport interface EditorBeforeOptions {\n  distance?: number\n  unit?: TextUnitAdjustment\n  voids?: boolean\n}\n\nexport interface EditorDirectedDeletionOptions {\n  unit?: TextUnit\n}\n\nexport interface EditorElementReadOnlyOptions {\n  at?: Location\n  mode?: MaximizeMode\n  voids?: boolean\n}\n\nexport interface EditorFragmentDeletionOptions {\n  direction?: TextDirection\n}\n\nexport interface EditorLeafOptions {\n  depth?: number\n  edge?: LeafEdge\n}\n\nexport interface EditorLevelsOptions<T extends Node> {\n  at?: Location\n  match?: NodeMatch<T>\n  reverse?: boolean\n  voids?: boolean\n}\n\nexport interface EditorNextOptions<T extends Descendant> {\n  at?: Location\n  match?: NodeMatch<T>\n  mode?: SelectionMode\n  voids?: boolean\n}\n\nexport interface EditorNodeOptions {\n  depth?: number\n  edge?: LeafEdge\n}\n\nexport interface EditorNodesOptions<T extends Node> {\n  at?: Location | Span\n  match?: NodeMatch<T>\n  mode?: SelectionMode\n  universal?: boolean\n  reverse?: boolean\n  voids?: boolean\n  ignoreNonSelectable?: boolean\n}\n\nexport interface EditorNormalizeOptions {\n  force?: boolean\n  operation?: Operation\n}\n\nexport interface EditorParentOptions {\n  depth?: number\n  edge?: LeafEdge\n}\n\nexport interface EditorPathOptions {\n  depth?: number\n  edge?: LeafEdge\n}\n\nexport interface EditorPathRefOptions {\n  affinity?: TextDirection | null\n}\n\nexport interface EditorPointOptions {\n  edge?: LeafEdge\n}\n\nexport interface EditorPointRefOptions {\n  affinity?: TextDirection | null\n}\n\nexport interface EditorPositionsOptions {\n  at?: Location\n  unit?: TextUnitAdjustment\n  reverse?: boolean\n  voids?: boolean\n  ignoreNonSelectable?: boolean\n}\n\nexport interface EditorPreviousOptions<T extends Node> {\n  at?: Location\n  match?: NodeMatch<T>\n  mode?: SelectionMode\n  voids?: boolean\n}\n\nexport interface EditorRangeRefOptions {\n  affinity?: RangeDirection | null\n}\n\nexport interface EditorStringOptions {\n  voids?: boolean\n}\n\nexport interface EditorUnhangRangeOptions {\n  voids?: boolean\n}\n\nexport interface EditorVoidOptions {\n  at?: Location\n  mode?: MaximizeMode\n  voids?: boolean\n}\n\nexport interface EditorInterface {\n  /**\n   * Get the ancestor above a location in the document.\n   */\n  above: <T extends Ancestor>(\n    editor: Editor,\n    options?: EditorAboveOptions<T>\n  ) => NodeEntry<T> | undefined\n\n  /**\n   * Add a custom property to the leaf text nodes in the current selection.\n   *\n   * If the selection is currently collapsed, the marks will be added to the\n   * `editor.marks` property instead, and applied when text is inserted next.\n   */\n  addMark: (editor: Editor, key: string, value: any) => void\n\n  /**\n   * Get the point after a location.\n   */\n  after: (\n    editor: Editor,\n    at: Location,\n    options?: EditorAfterOptions\n  ) => Point | undefined\n\n  /**\n   * Get the point before a location.\n   */\n  before: (\n    editor: Editor,\n    at: Location,\n    options?: EditorBeforeOptions\n  ) => Point | undefined\n\n  /**\n   * Delete content in the editor backward from the current selection.\n   */\n  deleteBackward: (\n    editor: Editor,\n    options?: EditorDirectedDeletionOptions\n  ) => void\n\n  /**\n   * Delete content in the editor forward from the current selection.\n   */\n  deleteForward: (\n    editor: Editor,\n    options?: EditorDirectedDeletionOptions\n  ) => void\n\n  /**\n   * Delete the content in the current selection.\n   */\n  deleteFragment: (\n    editor: Editor,\n    options?: EditorFragmentDeletionOptions\n  ) => void\n\n  /**\n   * Get the start and end points of a location.\n   */\n  edges: (editor: Editor, at: Location) => [Point, Point]\n\n  /**\n   * Match a read-only element in the current branch of the editor.\n   */\n  elementReadOnly: (\n    editor: Editor,\n    options?: EditorElementReadOnlyOptions\n  ) => NodeEntry<Element> | undefined\n\n  /**\n   * Get the end point of a location.\n   */\n  end: (editor: Editor, at: Location) => Point\n\n  /**\n   * Get the first node at a location.\n   */\n  first: (editor: Editor, at: Location) => NodeEntry\n\n  /**\n   * Get the fragment at a location.\n   */\n  fragment: (editor: Editor, at: Location) => Descendant[]\n\n  /**\n   * Check if a node has block children.\n   */\n  hasBlocks: (editor: Editor, element: Element) => boolean\n\n  /**\n   * Check if a node has inline and text children.\n   */\n  hasInlines: (editor: Editor, element: Element) => boolean\n\n  hasPath: (editor: Editor, path: Path) => boolean\n\n  /**\n   * Check if a node has text children.\n   */\n  hasTexts: (editor: Editor, element: Element) => boolean\n\n  /**\n   * Insert a block break at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n  insertBreak: (editor: Editor) => void\n\n  /**\n   * Inserts a fragment\n   * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.\n   */\n  insertFragment: (\n    editor: Editor,\n    fragment: Node[],\n    options?: TextInsertFragmentOptions\n  ) => void\n\n  /**\n   * Atomically inserts `nodes`\n   * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.\n   */\n  insertNode: <T extends Node>(\n    editor: Editor,\n    node: Node,\n    options?: NodeInsertNodesOptions<T>\n  ) => void\n\n  /**\n   * Insert a soft break at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n  insertSoftBreak: (editor: Editor) => void\n\n  /**\n   * Insert a string of text\n   * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.\n   */\n  insertText: (\n    editor: Editor,\n    text: string,\n    options?: TextInsertTextOptions\n  ) => void\n\n  /**\n   * Check if a value is a block `Element` object.\n   */\n  isBlock: (editor: Editor, value: Element) => boolean\n\n  /**\n   * Check if a point is an edge of a location.\n   */\n  isEdge: (editor: Editor, point: Point, at: Location) => boolean\n\n  /**\n   * Check if a value is an `Editor` object.\n   */\n  isEditor: (value: any) => value is Editor\n\n  /**\n   * Check if a value is a read-only `Element` object.\n   */\n  isElementReadOnly: (editor: Editor, element: Element) => boolean\n\n  /**\n   * Check if an element is empty, accounting for void nodes.\n   */\n  isEmpty: (editor: Editor, element: Element) => boolean\n\n  /**\n   * Check if a point is the end point of a location.\n   */\n  isEnd: (editor: Editor, point: Point, at: Location) => boolean\n\n  /**\n   * Check if a value is an inline `Element` object.\n   */\n  isInline: (editor: Editor, value: Element) => boolean\n\n  /**\n   * Check if the editor is currently normalizing after each operation.\n   */\n  isNormalizing: (editor: Editor) => boolean\n\n  /**\n   * Check if a value is a selectable `Element` object.\n   */\n  isSelectable: (editor: Editor, element: Element) => boolean\n\n  /**\n   * Check if a point is the start point of a location.\n   */\n  isStart: (editor: Editor, point: Point, at: Location) => boolean\n\n  /**\n   * Check if a value is a void `Element` object.\n   */\n  isVoid: (editor: Editor, value: Element) => boolean\n\n  /**\n   * Get the last node at a location.\n   */\n  last: (editor: Editor, at: Location) => NodeEntry\n\n  /**\n   * Get the leaf text node at a location.\n   */\n  leaf: (\n    editor: Editor,\n    at: Location,\n    options?: EditorLeafOptions\n  ) => NodeEntry<Text>\n\n  /**\n   * Iterate through all of the levels at a location.\n   */\n  levels: <T extends Node>(\n    editor: Editor,\n    options?: EditorLevelsOptions<T>\n  ) => Generator<NodeEntry<T>, void, undefined>\n\n  /**\n   * Get the marks that would be added to text at the current selection.\n   */\n  marks: (editor: Editor) => Omit<Text, 'text'> | null\n\n  /**\n   * Get the matching node in the branch of the document after a location.\n   */\n  next: <T extends Descendant>(\n    editor: Editor,\n    options?: EditorNextOptions<T>\n  ) => NodeEntry<T> | undefined\n\n  /**\n   * Get the node at a location.\n   */\n  node: (editor: Editor, at: Location, options?: EditorNodeOptions) => NodeEntry\n\n  /**\n   * Iterate through all of the nodes in the Editor.\n   */\n  nodes: <T extends Node>(\n    editor: Editor,\n    options?: EditorNodesOptions<T>\n  ) => Generator<NodeEntry<T>, void, undefined>\n\n  /**\n   * Normalize any dirty objects in the editor.\n   */\n  normalize: (editor: Editor, options?: EditorNormalizeOptions) => void\n\n  /**\n   * Get the parent node of a location.\n   */\n  parent: (\n    editor: Editor,\n    at: Location,\n    options?: EditorParentOptions\n  ) => NodeEntry<Ancestor>\n\n  /**\n   * Get the path of a location.\n   */\n  path: (editor: Editor, at: Location, options?: EditorPathOptions) => Path\n\n  /**\n   * Create a mutable ref for a `Path` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n  pathRef: (\n    editor: Editor,\n    path: Path,\n    options?: EditorPathRefOptions\n  ) => PathRef\n\n  /**\n   * Get the set of currently tracked path refs of the editor.\n   */\n  pathRefs: (editor: Editor) => Set<PathRef>\n\n  /**\n   * Get the start or end point of a location.\n   */\n  point: (editor: Editor, at: Location, options?: EditorPointOptions) => Point\n\n  /**\n   * Create a mutable ref for a `Point` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n  pointRef: (\n    editor: Editor,\n    point: Point,\n    options?: EditorPointRefOptions\n  ) => PointRef\n\n  /**\n   * Get the set of currently tracked point refs of the editor.\n   */\n  pointRefs: (editor: Editor) => Set<PointRef>\n\n  /**\n   * Return all the positions in `at` range where a `Point` can be placed.\n   *\n   * By default, moves forward by individual offsets at a time, but\n   * the `unit` option can be used to to move by character, word, line, or block.\n   *\n   * The `reverse` option can be used to change iteration direction.\n   *\n   * Note: By default void nodes are treated as a single point and iteration\n   * will not happen inside their content unless you pass in true for the\n   * `voids` option, then iteration will occur.\n   */\n  positions: (\n    editor: Editor,\n    options?: EditorPositionsOptions\n  ) => Generator<Point, void, undefined>\n\n  /**\n   * Get the matching node in the branch of the document before a location.\n   */\n  previous: <T extends Node>(\n    editor: Editor,\n    options?: EditorPreviousOptions<T>\n  ) => NodeEntry<T> | undefined\n\n  /**\n   * Get a range of a location.\n   */\n  range: (editor: Editor, at: Location, to?: Location) => Range\n\n  /**\n   * Create a mutable ref for a `Range` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n  rangeRef: (\n    editor: Editor,\n    range: Range,\n    options?: EditorRangeRefOptions\n  ) => RangeRef\n\n  /**\n   * Get the set of currently tracked range refs of the editor.\n   */\n  rangeRefs: (editor: Editor) => Set<RangeRef>\n\n  /**\n   * Remove a custom property from all of the leaf text nodes in the current\n   * selection.\n   *\n   * If the selection is currently collapsed, the removal will be stored on\n   * `editor.marks` and applied to the text inserted next.\n   */\n  removeMark: (editor: Editor, key: string) => void\n\n  /**\n   * Manually set if the editor should currently be normalizing.\n   *\n   * Note: Using this incorrectly can leave the editor in an invalid state.\n   *\n   */\n  setNormalizing: (editor: Editor, isNormalizing: boolean) => void\n\n  /**\n   * Get the start point of a location.\n   */\n  start: (editor: Editor, at: Location) => Point\n\n  /**\n   * Get the text string content of a location.\n   *\n   * Note: by default the text of void nodes is considered to be an empty\n   * string, regardless of content, unless you pass in true for the voids option\n   */\n  string: (\n    editor: Editor,\n    at: Location,\n    options?: EditorStringOptions\n  ) => string\n\n  /**\n   * Convert a range into a non-hanging one.\n   */\n  unhangRange: (\n    editor: Editor,\n    range: Range,\n    options?: EditorUnhangRangeOptions\n  ) => Range\n\n  /**\n   * Match a void node in the current branch of the editor.\n   */\n  void: (\n    editor: Editor,\n    options?: EditorVoidOptions\n  ) => NodeEntry<Element> | undefined\n\n  /**\n   * Call a function, deferring normalization until after it completes.\n   */\n  withoutNormalizing: (editor: Editor, fn: () => void) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Editor: EditorInterface = {\n  above(editor, options) {\n    return editor.above(options)\n  },\n\n  addMark(editor, key, value) {\n    editor.addMark(key, value)\n  },\n\n  after(editor, at, options) {\n    return editor.after(at, options)\n  },\n\n  before(editor, at, options) {\n    return editor.before(at, options)\n  },\n\n  deleteBackward(editor, options = {}) {\n    const { unit = 'character' } = options\n    editor.deleteBackward(unit)\n  },\n\n  deleteForward(editor, options = {}) {\n    const { unit = 'character' } = options\n    editor.deleteForward(unit)\n  },\n\n  deleteFragment(editor, options) {\n    editor.deleteFragment(options)\n  },\n\n  edges(editor, at) {\n    return editor.edges(at)\n  },\n\n  elementReadOnly(editor: Editor, options: EditorElementReadOnlyOptions = {}) {\n    return editor.elementReadOnly(options)\n  },\n\n  end(editor, at) {\n    return editor.end(at)\n  },\n\n  first(editor, at) {\n    return editor.first(at)\n  },\n\n  fragment(editor, at) {\n    return editor.fragment(at)\n  },\n\n  hasBlocks(editor, element) {\n    return editor.hasBlocks(element)\n  },\n\n  hasInlines(editor, element) {\n    return editor.hasInlines(element)\n  },\n\n  hasPath(editor, path) {\n    return editor.hasPath(path)\n  },\n\n  hasTexts(editor, element) {\n    return editor.hasTexts(element)\n  },\n\n  insertBreak(editor) {\n    editor.insertBreak()\n  },\n\n  insertFragment(editor, fragment, options) {\n    editor.insertFragment(fragment, options)\n  },\n\n  insertNode(editor, node) {\n    editor.insertNode(node)\n  },\n\n  insertSoftBreak(editor) {\n    editor.insertSoftBreak()\n  },\n\n  insertText(editor, text) {\n    editor.insertText(text)\n  },\n\n  isBlock(editor, value) {\n    return editor.isBlock(value)\n  },\n\n  isEdge(editor, point, at) {\n    return editor.isEdge(point, at)\n  },\n\n  isEditor(value: any): value is Editor {\n    return isEditor(value)\n  },\n\n  isElementReadOnly(editor, element) {\n    return editor.isElementReadOnly(element)\n  },\n\n  isEmpty(editor, element) {\n    return editor.isEmpty(element)\n  },\n\n  isEnd(editor, point, at) {\n    return editor.isEnd(point, at)\n  },\n\n  isInline(editor, value) {\n    return editor.isInline(value)\n  },\n\n  isNormalizing(editor) {\n    return editor.isNormalizing()\n  },\n\n  isSelectable(editor: Editor, value: Element) {\n    return editor.isSelectable(value)\n  },\n\n  isStart(editor, point, at) {\n    return editor.isStart(point, at)\n  },\n\n  isVoid(editor, value) {\n    return editor.isVoid(value)\n  },\n\n  last(editor, at) {\n    return editor.last(at)\n  },\n\n  leaf(editor, at, options) {\n    return editor.leaf(at, options)\n  },\n\n  levels(editor, options) {\n    return editor.levels(options)\n  },\n\n  marks(editor) {\n    return editor.getMarks()\n  },\n\n  next<T extends Descendant>(\n    editor: Editor,\n    options?: EditorNextOptions<T>\n  ): NodeEntry<T> | undefined {\n    return editor.next(options)\n  },\n\n  node(editor, at, options) {\n    return editor.node(at, options)\n  },\n\n  nodes(editor, options) {\n    return editor.nodes(options)\n  },\n\n  normalize(editor, options) {\n    editor.normalize(options)\n  },\n\n  parent(editor, at, options) {\n    return editor.parent(at, options)\n  },\n\n  path(editor, at, options) {\n    return editor.path(at, options)\n  },\n\n  pathRef(editor, path, options) {\n    return editor.pathRef(path, options)\n  },\n\n  pathRefs(editor) {\n    return editor.pathRefs()\n  },\n\n  point(editor, at, options) {\n    return editor.point(at, options)\n  },\n\n  pointRef(editor, point, options) {\n    return editor.pointRef(point, options)\n  },\n\n  pointRefs(editor) {\n    return editor.pointRefs()\n  },\n\n  positions(editor, options) {\n    return editor.positions(options)\n  },\n\n  previous(editor, options) {\n    return editor.previous(options)\n  },\n\n  range(editor, at, to) {\n    return editor.range(at, to)\n  },\n\n  rangeRef(editor, range, options) {\n    return editor.rangeRef(range, options)\n  },\n\n  rangeRefs(editor) {\n    return editor.rangeRefs()\n  },\n\n  removeMark(editor, key) {\n    editor.removeMark(key)\n  },\n\n  setNormalizing(editor, isNormalizing) {\n    editor.setNormalizing(isNormalizing)\n  },\n\n  start(editor, at) {\n    return editor.start(at)\n  },\n\n  string(editor, at, options) {\n    return editor.string(at, options)\n  },\n\n  unhangRange(editor, range, options) {\n    return editor.unhangRange(range, options)\n  },\n\n  void(editor, options) {\n    return editor.void(options)\n  },\n\n  withoutNormalizing(editor, fn: () => void) {\n    editor.withoutNormalizing(fn)\n  },\n}\n\n/**\n * A helper type for narrowing matched nodes with a predicate.\n */\n\nexport type NodeMatch<T extends Node> =\n  | ((node: Node, path: Path) => node is T)\n  | ((node: Node, path: Path) => boolean)\n\nexport type PropsCompare = (prop: Partial<Node>, node: Partial<Node>) => boolean\nexport type PropsMerge = (prop: Partial<Node>, node: Partial<Node>) => object\n","import { Path, Point, Range } from '..'\n\n/**\n * The `Location` interface is a union of the ways to refer to a specific\n * location in a Slate document: paths, points or ranges.\n *\n * Methods will often accept a `Location` instead of requiring only a `Path`,\n * `Point` or `Range`. This eliminates the need for developers to manage\n * converting between the different interfaces in their own code base.\n */\n\nexport type Location = Path | Point | Range\n\nexport interface LocationInterface {\n  /**\n   * Check if a value implements the `Location` interface.\n   */\n  isLocation: (value: any) => value is Location\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Location: LocationInterface = {\n  isLocation(value: any): value is Location {\n    return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value)\n  },\n}\n\n/**\n * The `Span` interface is a low-level way to refer to locations in nodes\n * without using `Point` which requires leaf text nodes to be present.\n */\n\nexport type Span = [Path, Path]\n\nexport interface SpanInterface {\n  /**\n   * Check if a value implements the `Span` interface.\n   */\n  isSpan: (value: any) => value is Span\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Span: SpanInterface = {\n  isSpan(value: any): value is Span {\n    return (\n      Array.isArray(value) && value.length === 2 && value.every(Path.isPath)\n    )\n  },\n}\n","import { isPlainObject } from 'is-plain-object'\nimport { produce } from 'immer'\nimport { ExtendedType, Operation, Path } from '..'\nimport { TextDirection } from '../types/types'\n\n/**\n * `Point` objects refer to a specific location in a text node in a Slate\n * document. Its path refers to the location of the node in the tree, and its\n * offset refers to the distance into the node's string of text. Points can\n * only refer to `Text` nodes.\n */\n\nexport interface BasePoint {\n  path: Path\n  offset: number\n}\n\nexport type Point = ExtendedType<'Point', BasePoint>\n\nexport interface PointTransformOptions {\n  affinity?: TextDirection | null\n}\n\nexport interface PointInterface {\n  /**\n   * Compare a point to another, returning an integer indicating whether the\n   * point was before, at, or after the other.\n   */\n  compare: (point: Point, another: Point) => -1 | 0 | 1\n\n  /**\n   * Check if a point is after another.\n   */\n  isAfter: (point: Point, another: Point) => boolean\n\n  /**\n   * Check if a point is before another.\n   */\n  isBefore: (point: Point, another: Point) => boolean\n\n  /**\n   * Check if a point is exactly equal to another.\n   */\n  equals: (point: Point, another: Point) => boolean\n\n  /**\n   * Check if a value implements the `Point` interface.\n   */\n  isPoint: (value: any) => value is Point\n\n  /**\n   * Transform a point by an operation.\n   */\n  transform: (\n    point: Point,\n    op: Operation,\n    options?: PointTransformOptions\n  ) => Point | null\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Point: PointInterface = {\n  compare(point: Point, another: Point): -1 | 0 | 1 {\n    const result = Path.compare(point.path, another.path)\n\n    if (result === 0) {\n      if (point.offset < another.offset) return -1\n      if (point.offset > another.offset) return 1\n      return 0\n    }\n\n    return result\n  },\n\n  isAfter(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === 1\n  },\n\n  isBefore(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === -1\n  },\n\n  equals(point: Point, another: Point): boolean {\n    // PERF: ensure the offsets are equal first since they are cheaper to check.\n    return (\n      point.offset === another.offset && Path.equals(point.path, another.path)\n    )\n  },\n\n  isPoint(value: any): value is Point {\n    return (\n      isPlainObject(value) &&\n      typeof value.offset === 'number' &&\n      Path.isPath(value.path)\n    )\n  },\n\n  transform(\n    point: Point | null,\n    op: Operation,\n    options: PointTransformOptions = {}\n  ): Point | null {\n    return produce(point, p => {\n      if (p === null) {\n        return null\n      }\n      const { affinity = 'forward' } = options\n      const { path, offset } = p\n\n      switch (op.type) {\n        case 'insert_node':\n        case 'move_node': {\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'insert_text': {\n          if (\n            Path.equals(op.path, path) &&\n            (op.offset < offset ||\n              (op.offset === offset && affinity === 'forward'))\n          ) {\n            p.offset += op.text.length\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          if (Path.equals(op.path, path)) {\n            p.offset += op.position\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'remove_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset -= Math.min(offset - op.offset, op.text.length)\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {\n            return null\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'split_node': {\n          if (Path.equals(op.path, path)) {\n            if (op.position === offset && affinity == null) {\n              return null\n            } else if (\n              op.position < offset ||\n              (op.position === offset && affinity === 'forward')\n            ) {\n              p.offset -= op.position\n\n              p.path = Path.transform(path, op, {\n                ...options,\n                affinity: 'forward',\n              })!\n            }\n          } else {\n            p.path = Path.transform(path, op, options)!\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n\n/**\n * `PointEntry` objects are returned when iterating over `Point` objects that\n * belong to a range.\n */\n\nexport type PointEntry = [Point, 'anchor' | 'focus']\n","export type Scrubber = (key: string, value: unknown) => unknown\n\nexport interface ScrubberInterface {\n  setScrubber(scrubber: Scrubber | undefined): void\n  stringify(value: any): string\n}\n\nlet _scrubber: Scrubber | undefined = undefined\n\n/**\n * This interface implements a stringify() function, which is used by Slate\n * internally when generating exceptions containing end user data. Developers\n * using Slate may call Scrubber.setScrubber() to alter the behavior of this\n * stringify() function.\n *\n * For example, to prevent the cleartext logging of 'text' fields within Nodes:\n *\n *    import { Scrubber } from 'slate';\n *    Scrubber.setScrubber((key, val) => {\n *      if (key === 'text') return '...scrubbed...'\n *      return val\n *    });\n *\n */\n// eslint-disable-next-line no-redeclare\nexport const Scrubber: ScrubberInterface = {\n  setScrubber(scrubber: Scrubber | undefined): void {\n    _scrubber = scrubber\n  },\n\n  stringify(value: any): string {\n    return JSON.stringify(value, _scrubber)\n  },\n}\n","import { isPlainObject } from 'is-plain-object'\nimport { Range } from '..'\nimport { ExtendedType } from '../types/custom-types'\nimport { isDeepEqual } from '../utils/deep-equal'\n\n/**\n * `Text` objects represent the nodes that contain the actual text content of a\n * Slate document along with any formatting properties. They are always leaf\n * nodes in the document tree as they cannot contain any children.\n */\n\nexport interface BaseText {\n  text: string\n}\n\nexport type Text = ExtendedType<'Text', BaseText>\n\nexport interface TextEqualsOptions {\n  loose?: boolean\n}\n\nexport interface TextInterface {\n  /**\n   * Check if two text nodes are equal.\n   *\n   * When loose is set, the text is not compared. This is\n   * used to check whether sibling text nodes can be merged.\n   */\n  equals: (text: Text, another: Text, options?: TextEqualsOptions) => boolean\n\n  /**\n   * Check if a value implements the `Text` interface.\n   */\n  isText: (value: any) => value is Text\n\n  /**\n   * Check if a value is a list of `Text` objects.\n   */\n  isTextList: (value: any) => value is Text[]\n\n  /**\n   * Check if some props are a partial of Text.\n   */\n  isTextProps: (props: any) => props is Partial<Text>\n\n  /**\n   * Check if an text matches set of properties.\n   *\n   * Note: this is for matching custom properties, and it does not ensure that\n   * the `text` property are two nodes equal.\n   */\n  matches: (text: Text, props: Partial<Text>) => boolean\n\n  /**\n   * Get the leaves for a text node given decorations.\n   */\n  decorations: (node: Text, decorations: Range[]) => Text[]\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Text: TextInterface = {\n  equals(text: Text, another: Text, options: TextEqualsOptions = {}): boolean {\n    const { loose = false } = options\n\n    function omitText(obj: Record<any, any>) {\n      const { text, ...rest } = obj\n\n      return rest\n    }\n\n    return isDeepEqual(\n      loose ? omitText(text) : text,\n      loose ? omitText(another) : another\n    )\n  },\n\n  isText(value: any): value is Text {\n    return isPlainObject(value) && typeof value.text === 'string'\n  },\n\n  isTextList(value: any): value is Text[] {\n    return Array.isArray(value) && value.every(val => Text.isText(val))\n  },\n\n  isTextProps(props: any): props is Partial<Text> {\n    return (props as Partial<Text>).text !== undefined\n  },\n\n  matches(text: Text, props: Partial<Text>): boolean {\n    for (const key in props) {\n      if (key === 'text') {\n        continue\n      }\n\n      if (!text.hasOwnProperty(key) || text[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  decorations(node: Text, decorations: Range[]): Text[] {\n    let leaves: Text[] = [{ ...node }]\n\n    for (const dec of decorations) {\n      const { anchor, focus, ...rest } = dec\n      const [start, end] = Range.edges(dec)\n      const next = []\n      let leafEnd = 0\n      const decorationStart = start.offset\n      const decorationEnd = end.offset\n\n      for (const leaf of leaves) {\n        const { length } = leaf.text\n        const leafStart = leafEnd\n        leafEnd += length\n\n        // If the range encompasses the entire leaf, add the range.\n        if (decorationStart <= leafStart && leafEnd <= decorationEnd) {\n          Object.assign(leaf, rest)\n          next.push(leaf)\n          continue\n        }\n\n        // If the range expanded and match the leaf, or starts after, or ends before it, continue.\n        if (\n          (decorationStart !== decorationEnd &&\n            (decorationStart === leafEnd || decorationEnd === leafStart)) ||\n          decorationStart > leafEnd ||\n          decorationEnd < leafStart ||\n          (decorationEnd === leafStart && leafStart !== 0)\n        ) {\n          next.push(leaf)\n          continue\n        }\n\n        // Otherwise we need to split the leaf, at the start, end, or both,\n        // and add the range to the middle intersecting section. Do the end\n        // split first since we don't need to update the offset that way.\n        let middle = leaf\n        let before\n        let after\n\n        if (decorationEnd < leafEnd) {\n          const off = decorationEnd - leafStart\n          after = { ...middle, text: middle.text.slice(off) }\n          middle = { ...middle, text: middle.text.slice(0, off) }\n        }\n\n        if (decorationStart > leafStart) {\n          const off = decorationStart - leafStart\n          before = { ...middle, text: middle.text.slice(0, off) }\n          middle = { ...middle, text: middle.text.slice(off) }\n        }\n\n        Object.assign(middle, rest)\n\n        if (before) {\n          next.push(before)\n        }\n\n        next.push(middle)\n\n        if (after) {\n          next.push(after)\n        }\n      }\n\n      leaves = next\n    }\n\n    return leaves\n  },\n}\n","import { Editor, Location } from '../interfaces'\n\n/**\n * Get the default location to insert content into the editor.\n * By default, use the selection as the target location. But if there is\n * no selection, insert at the end of the document since that is such a\n * common use case when inserting from a non-selected state.\n */\nexport const getDefaultInsertLocation = (editor: Editor): Location => {\n  if (editor.selection) {\n    return editor.selection\n  } else if (editor.children.length > 0) {\n    return Editor.end(editor, [])\n  } else {\n    return [0]\n  }\n}\n","import { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { Node } from '../interfaces/node'\n\nexport const matchPath = (\n  editor: Editor,\n  path: Path\n): ((node: Node) => boolean) => {\n  const [node] = Editor.node(editor, path)\n  return n => n === node\n}\n","// Character (grapheme cluster) boundaries are determined according to\n// the default grapheme cluster boundary specification, extended grapheme clusters variant[1].\n//\n// References:\n//\n// [1] https://www.unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table\n// [2] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt\n// [3] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.html\n// [4] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.txt\n\n/**\n * Get the distance to the end of the first character in a string of text.\n */\n\nexport const getCharacterDistance = (str: string, isRTL = false): number => {\n  const isLTR = !isRTL\n  const codepoints = isRTL ? codepointsIteratorRTL(str) : str\n\n  let left: CodepointType = CodepointType.None\n  let right: CodepointType = CodepointType.None\n  let distance = 0\n  // Evaluation of these conditions are deferred.\n  let gb11: boolean | null = null // Is GB11 applicable?\n  let gb12Or13: boolean | null = null // Is GB12 or GB13 applicable?\n\n  for (const char of codepoints) {\n    const code = char.codePointAt(0)\n    if (!code) break\n\n    const type = getCodepointType(char, code)\n    ;[left, right] = isLTR ? [right, type] : [type, left]\n\n    if (\n      intersects(left, CodepointType.ZWJ) &&\n      intersects(right, CodepointType.ExtPict)\n    ) {\n      if (isLTR) {\n        gb11 = endsWithEmojiZWJ(str.substring(0, distance))\n      } else {\n        gb11 = endsWithEmojiZWJ(str.substring(0, str.length - distance))\n      }\n      if (!gb11) break\n    }\n\n    if (\n      intersects(left, CodepointType.RI) &&\n      intersects(right, CodepointType.RI)\n    ) {\n      if (gb12Or13 !== null) {\n        gb12Or13 = !gb12Or13\n      } else {\n        if (isLTR) {\n          gb12Or13 = true\n        } else {\n          gb12Or13 = endsWithOddNumberOfRIs(\n            str.substring(0, str.length - distance)\n          )\n        }\n      }\n      if (!gb12Or13) break\n    }\n\n    if (\n      left !== CodepointType.None &&\n      right !== CodepointType.None &&\n      isBoundaryPair(left, right)\n    ) {\n      break\n    }\n\n    distance += char.length\n  }\n\n  return distance || 1\n}\n\nconst SPACE = /\\s/\nconst PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\nconst CHAMELEON = /['\\u2018\\u2019]/\n\n/**\n * Get the distance to the end of the first word in a string of text.\n */\n\nexport const getWordDistance = (text: string, isRTL = false): number => {\n  let dist = 0\n  let started = false\n\n  while (text.length > 0) {\n    const charDist = getCharacterDistance(text, isRTL)\n    const [char, remaining] = splitByCharacterDistance(text, charDist, isRTL)\n\n    if (isWordCharacter(char, remaining, isRTL)) {\n      started = true\n      dist += charDist\n    } else if (!started) {\n      dist += charDist\n    } else {\n      break\n    }\n\n    text = remaining\n  }\n\n  return dist\n}\n\n/**\n * Split a string in two parts at a given distance starting from the end when\n * `isRTL` is set to `true`.\n */\n\nexport const splitByCharacterDistance = (\n  str: string,\n  dist: number,\n  isRTL?: boolean\n): [string, string] => {\n  if (isRTL) {\n    const at = str.length - dist\n    return [str.slice(at, str.length), str.slice(0, at)]\n  }\n\n  return [str.slice(0, dist), str.slice(dist)]\n}\n\n/**\n * Check if a character is a word character. The `remaining` argument is used\n * because sometimes you must read subsequent characters to truly determine it.\n */\n\nconst isWordCharacter = (\n  char: string,\n  remaining: string,\n  isRTL = false\n): boolean => {\n  if (SPACE.test(char)) {\n    return false\n  }\n\n  // Chameleons count as word characters as long as they're in a word, so\n  // recurse to see if the next one is a word character or not.\n  if (CHAMELEON.test(char)) {\n    const charDist = getCharacterDistance(remaining, isRTL)\n    const [nextChar, nextRemaining] = splitByCharacterDistance(\n      remaining,\n      charDist,\n      isRTL\n    )\n\n    if (isWordCharacter(nextChar, nextRemaining, isRTL)) {\n      return true\n    }\n  }\n\n  if (PUNCTUATION.test(char)) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Iterate on codepoints from right to left.\n */\n\nexport const codepointsIteratorRTL = function*(str: string) {\n  const end = str.length - 1\n\n  for (let i = 0; i < str.length; i++) {\n    const char1 = str.charAt(end - i)\n\n    if (isLowSurrogate(char1.charCodeAt(0))) {\n      const char2 = str.charAt(end - i - 1)\n      if (isHighSurrogate(char2.charCodeAt(0))) {\n        yield char2 + char1\n\n        i++\n        continue\n      }\n    }\n\n    yield char1\n  }\n}\n\n/**\n * Is `charCode` a high surrogate.\n *\n * https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\n */\n\nconst isHighSurrogate = (charCode: number) => {\n  return charCode >= 0xd800 && charCode <= 0xdbff\n}\n\n/**\n * Is `charCode` a low surrogate.\n *\n * https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\n */\n\nconst isLowSurrogate = (charCode: number) => {\n  return charCode >= 0xdc00 && charCode <= 0xdfff\n}\n\nenum CodepointType {\n  None = 0,\n  Extend = 1 << 0,\n  ZWJ = 1 << 1,\n  RI = 1 << 2,\n  Prepend = 1 << 3,\n  SpacingMark = 1 << 4,\n  L = 1 << 5,\n  V = 1 << 6,\n  T = 1 << 7,\n  LV = 1 << 8,\n  LVT = 1 << 9,\n  ExtPict = 1 << 10,\n  Any = 1 << 11,\n}\n\nconst reExtend = /^[\\p{Gr_Ext}\\p{EMod}]$/u\nconst rePrepend = /^[\\u0600-\\u0605\\u06DD\\u070F\\u0890-\\u0891\\u08E2\\u0D4E\\u{110BD}\\u{110CD}\\u{111C2}-\\u{111C3}\\u{1193F}\\u{11941}\\u{11A3A}\\u{11A84}-\\u{11A89}\\u{11D46}]$/u\nconst reSpacingMark = /^[\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E-\\u094F\\u0982-\\u0983\\u09BF-\\u09C0\\u09C7-\\u09C8\\u09CB-\\u09CC\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB-\\u0ACC\\u0B02-\\u0B03\\u0B40\\u0B47-\\u0B48\\u0B4B-\\u0B4C\\u0BBF\\u0BC1-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82-\\u0C83\\u0CBE\\u0CC0-\\u0CC1\\u0CC3-\\u0CC4\\u0CC7-\\u0CC8\\u0CCA-\\u0CCB\\u0D02-\\u0D03\\u0D3F-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D82-\\u0D83\\u0DD0-\\u0DD1\\u0DD8-\\u0DDE\\u0DF2-\\u0DF3\\u0E33\\u0EB3\\u0F3E-\\u0F3F\\u0F7F\\u1031\\u103B-\\u103C\\u1056-\\u1057\\u1084\\u1715\\u1734\\u17B6\\u17BE-\\u17C5\\u17C7-\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930-\\u1931\\u1933-\\u1938\\u1A19-\\u1A1A\\u1A55\\u1A57\\u1A6D-\\u1A72\\u1B04\\u1B3B\\u1B3D-\\u1B41\\u1B43-\\u1B44\\u1B82\\u1BA1\\u1BA6-\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2-\\u1BF3\\u1C24-\\u1C2B\\u1C34-\\u1C35\\u1CE1\\u1CF7\\uA823-\\uA824\\uA827\\uA880-\\uA881\\uA8B4-\\uA8C3\\uA952-\\uA953\\uA983\\uA9B4-\\uA9B5\\uA9BA-\\uA9BB\\uA9BE-\\uA9C0\\uAA2F-\\uAA30\\uAA33-\\uAA34\\uAA4D\\uAAEB\\uAAEE-\\uAAEF\\uAAF5\\uABE3-\\uABE4\\uABE6-\\uABE7\\uABE9-\\uABEA\\uABEC\\u{11000}\\u{11002}\\u{11082}\\u{110B0}-\\u{110B2}\\u{110B7}-\\u{110B8}\\u{1112C}\\u{11145}-\\u{11146}\\u{11182}\\u{111B3}-\\u{111B5}\\u{111BF}-\\u{111C0}\\u{111CE}\\u{1122C}-\\u{1122E}\\u{11232}-\\u{11233}\\u{11235}\\u{112E0}-\\u{112E2}\\u{11302}-\\u{11303}\\u{1133F}\\u{11341}-\\u{11344}\\u{11347}-\\u{11348}\\u{1134B}-\\u{1134D}\\u{11362}-\\u{11363}\\u{11435}-\\u{11437}\\u{11440}-\\u{11441}\\u{11445}\\u{114B1}-\\u{114B2}\\u{114B9}\\u{114BB}-\\u{114BC}\\u{114BE}\\u{114C1}\\u{115B0}-\\u{115B1}\\u{115B8}-\\u{115BB}\\u{115BE}\\u{11630}-\\u{11632}\\u{1163B}-\\u{1163C}\\u{1163E}\\u{116AC}\\u{116AE}-\\u{116AF}\\u{116B6}\\u{11726}\\u{1182C}-\\u{1182E}\\u{11838}\\u{11931}-\\u{11935}\\u{11937}-\\u{11938}\\u{1193D}\\u{11940}\\u{11942}\\u{119D1}-\\u{119D3}\\u{119DC}-\\u{119DF}\\u{119E4}\\u{11A39}\\u{11A57}-\\u{11A58}\\u{11A97}\\u{11C2F}\\u{11C3E}\\u{11CA9}\\u{11CB1}\\u{11CB4}\\u{11D8A}-\\u{11D8E}\\u{11D93}-\\u{11D94}\\u{11D96}\\u{11EF5}-\\u{11EF6}\\u{16F51}-\\u{16F87}\\u{16FF0}-\\u{16FF1}\\u{1D166}\\u{1D16D}]$/u\nconst reL = /^[\\u1100-\\u115F\\uA960-\\uA97C]$/u\nconst reV = /^[\\u1160-\\u11A7\\uD7B0-\\uD7C6]$/u\nconst reT = /^[\\u11A8-\\u11FF\\uD7CB-\\uD7FB]$/u\nconst reLV = /^[\\uAC00\\uAC1C\\uAC38\\uAC54\\uAC70\\uAC8C\\uACA8\\uACC4\\uACE0\\uACFC\\uAD18\\uAD34\\uAD50\\uAD6C\\uAD88\\uADA4\\uADC0\\uADDC\\uADF8\\uAE14\\uAE30\\uAE4C\\uAE68\\uAE84\\uAEA0\\uAEBC\\uAED8\\uAEF4\\uAF10\\uAF2C\\uAF48\\uAF64\\uAF80\\uAF9C\\uAFB8\\uAFD4\\uAFF0\\uB00C\\uB028\\uB044\\uB060\\uB07C\\uB098\\uB0B4\\uB0D0\\uB0EC\\uB108\\uB124\\uB140\\uB15C\\uB178\\uB194\\uB1B0\\uB1CC\\uB1E8\\uB204\\uB220\\uB23C\\uB258\\uB274\\uB290\\uB2AC\\uB2C8\\uB2E4\\uB300\\uB31C\\uB338\\uB354\\uB370\\uB38C\\uB3A8\\uB3C4\\uB3E0\\uB3FC\\uB418\\uB434\\uB450\\uB46C\\uB488\\uB4A4\\uB4C0\\uB4DC\\uB4F8\\uB514\\uB530\\uB54C\\uB568\\uB584\\uB5A0\\uB5BC\\uB5D8\\uB5F4\\uB610\\uB62C\\uB648\\uB664\\uB680\\uB69C\\uB6B8\\uB6D4\\uB6F0\\uB70C\\uB728\\uB744\\uB760\\uB77C\\uB798\\uB7B4\\uB7D0\\uB7EC\\uB808\\uB824\\uB840\\uB85C\\uB878\\uB894\\uB8B0\\uB8CC\\uB8E8\\uB904\\uB920\\uB93C\\uB958\\uB974\\uB990\\uB9AC\\uB9C8\\uB9E4\\uBA00\\uBA1C\\uBA38\\uBA54\\uBA70\\uBA8C\\uBAA8\\uBAC4\\uBAE0\\uBAFC\\uBB18\\uBB34\\uBB50\\uBB6C\\uBB88\\uBBA4\\uBBC0\\uBBDC\\uBBF8\\uBC14\\uBC30\\uBC4C\\uBC68\\uBC84\\uBCA0\\uBCBC\\uBCD8\\uBCF4\\uBD10\\uBD2C\\uBD48\\uBD64\\uBD80\\uBD9C\\uBDB8\\uBDD4\\uBDF0\\uBE0C\\uBE28\\uBE44\\uBE60\\uBE7C\\uBE98\\uBEB4\\uBED0\\uBEEC\\uBF08\\uBF24\\uBF40\\uBF5C\\uBF78\\uBF94\\uBFB0\\uBFCC\\uBFE8\\uC004\\uC020\\uC03C\\uC058\\uC074\\uC090\\uC0AC\\uC0C8\\uC0E4\\uC100\\uC11C\\uC138\\uC154\\uC170\\uC18C\\uC1A8\\uC1C4\\uC1E0\\uC1FC\\uC218\\uC234\\uC250\\uC26C\\uC288\\uC2A4\\uC2C0\\uC2DC\\uC2F8\\uC314\\uC330\\uC34C\\uC368\\uC384\\uC3A0\\uC3BC\\uC3D8\\uC3F4\\uC410\\uC42C\\uC448\\uC464\\uC480\\uC49C\\uC4B8\\uC4D4\\uC4F0\\uC50C\\uC528\\uC544\\uC560\\uC57C\\uC598\\uC5B4\\uC5D0\\uC5EC\\uC608\\uC624\\uC640\\uC65C\\uC678\\uC694\\uC6B0\\uC6CC\\uC6E8\\uC704\\uC720\\uC73C\\uC758\\uC774\\uC790\\uC7AC\\uC7C8\\uC7E4\\uC800\\uC81C\\uC838\\uC854\\uC870\\uC88C\\uC8A8\\uC8C4\\uC8E0\\uC8FC\\uC918\\uC934\\uC950\\uC96C\\uC988\\uC9A4\\uC9C0\\uC9DC\\uC9F8\\uCA14\\uCA30\\uCA4C\\uCA68\\uCA84\\uCAA0\\uCABC\\uCAD8\\uCAF4\\uCB10\\uCB2C\\uCB48\\uCB64\\uCB80\\uCB9C\\uCBB8\\uCBD4\\uCBF0\\uCC0C\\uCC28\\uCC44\\uCC60\\uCC7C\\uCC98\\uCCB4\\uCCD0\\uCCEC\\uCD08\\uCD24\\uCD40\\uCD5C\\uCD78\\uCD94\\uCDB0\\uCDCC\\uCDE8\\uCE04\\uCE20\\uCE3C\\uCE58\\uCE74\\uCE90\\uCEAC\\uCEC8\\uCEE4\\uCF00\\uCF1C\\uCF38\\uCF54\\uCF70\\uCF8C\\uCFA8\\uCFC4\\uCFE0\\uCFFC\\uD018\\uD034\\uD050\\uD06C\\uD088\\uD0A4\\uD0C0\\uD0DC\\uD0F8\\uD114\\uD130\\uD14C\\uD168\\uD184\\uD1A0\\uD1BC\\uD1D8\\uD1F4\\uD210\\uD22C\\uD248\\uD264\\uD280\\uD29C\\uD2B8\\uD2D4\\uD2F0\\uD30C\\uD328\\uD344\\uD360\\uD37C\\uD398\\uD3B4\\uD3D0\\uD3EC\\uD408\\uD424\\uD440\\uD45C\\uD478\\uD494\\uD4B0\\uD4CC\\uD4E8\\uD504\\uD520\\uD53C\\uD558\\uD574\\uD590\\uD5AC\\uD5C8\\uD5E4\\uD600\\uD61C\\uD638\\uD654\\uD670\\uD68C\\uD6A8\\uD6C4\\uD6E0\\uD6FC\\uD718\\uD734\\uD750\\uD76C\\uD788]$/u\nconst reLVT = /^[\\uAC01-\\uAC1B\\uAC1D-\\uAC37\\uAC39-\\uAC53\\uAC55-\\uAC6F\\uAC71-\\uAC8B\\uAC8D-\\uACA7\\uACA9-\\uACC3\\uACC5-\\uACDF\\uACE1-\\uACFB\\uACFD-\\uAD17\\uAD19-\\uAD33\\uAD35-\\uAD4F\\uAD51-\\uAD6B\\uAD6D-\\uAD87\\uAD89-\\uADA3\\uADA5-\\uADBF\\uADC1-\\uADDB\\uADDD-\\uADF7\\uADF9-\\uAE13\\uAE15-\\uAE2F\\uAE31-\\uAE4B\\uAE4D-\\uAE67\\uAE69-\\uAE83\\uAE85-\\uAE9F\\uAEA1-\\uAEBB\\uAEBD-\\uAED7\\uAED9-\\uAEF3\\uAEF5-\\uAF0F\\uAF11-\\uAF2B\\uAF2D-\\uAF47\\uAF49-\\uAF63\\uAF65-\\uAF7F\\uAF81-\\uAF9B\\uAF9D-\\uAFB7\\uAFB9-\\uAFD3\\uAFD5-\\uAFEF\\uAFF1-\\uB00B\\uB00D-\\uB027\\uB029-\\uB043\\uB045-\\uB05F\\uB061-\\uB07B\\uB07D-\\uB097\\uB099-\\uB0B3\\uB0B5-\\uB0CF\\uB0D1-\\uB0EB\\uB0ED-\\uB107\\uB109-\\uB123\\uB125-\\uB13F\\uB141-\\uB15B\\uB15D-\\uB177\\uB179-\\uB193\\uB195-\\uB1AF\\uB1B1-\\uB1CB\\uB1CD-\\uB1E7\\uB1E9-\\uB203\\uB205-\\uB21F\\uB221-\\uB23B\\uB23D-\\uB257\\uB259-\\uB273\\uB275-\\uB28F\\uB291-\\uB2AB\\uB2AD-\\uB2C7\\uB2C9-\\uB2E3\\uB2E5-\\uB2FF\\uB301-\\uB31B\\uB31D-\\uB337\\uB339-\\uB353\\uB355-\\uB36F\\uB371-\\uB38B\\uB38D-\\uB3A7\\uB3A9-\\uB3C3\\uB3C5-\\uB3DF\\uB3E1-\\uB3FB\\uB3FD-\\uB417\\uB419-\\uB433\\uB435-\\uB44F\\uB451-\\uB46B\\uB46D-\\uB487\\uB489-\\uB4A3\\uB4A5-\\uB4BF\\uB4C1-\\uB4DB\\uB4DD-\\uB4F7\\uB4F9-\\uB513\\uB515-\\uB52F\\uB531-\\uB54B\\uB54D-\\uB567\\uB569-\\uB583\\uB585-\\uB59F\\uB5A1-\\uB5BB\\uB5BD-\\uB5D7\\uB5D9-\\uB5F3\\uB5F5-\\uB60F\\uB611-\\uB62B\\uB62D-\\uB647\\uB649-\\uB663\\uB665-\\uB67F\\uB681-\\uB69B\\uB69D-\\uB6B7\\uB6B9-\\uB6D3\\uB6D5-\\uB6EF\\uB6F1-\\uB70B\\uB70D-\\uB727\\uB729-\\uB743\\uB745-\\uB75F\\uB761-\\uB77B\\uB77D-\\uB797\\uB799-\\uB7B3\\uB7B5-\\uB7CF\\uB7D1-\\uB7EB\\uB7ED-\\uB807\\uB809-\\uB823\\uB825-\\uB83F\\uB841-\\uB85B\\uB85D-\\uB877\\uB879-\\uB893\\uB895-\\uB8AF\\uB8B1-\\uB8CB\\uB8CD-\\uB8E7\\uB8E9-\\uB903\\uB905-\\uB91F\\uB921-\\uB93B\\uB93D-\\uB957\\uB959-\\uB973\\uB975-\\uB98F\\uB991-\\uB9AB\\uB9AD-\\uB9C7\\uB9C9-\\uB9E3\\uB9E5-\\uB9FF\\uBA01-\\uBA1B\\uBA1D-\\uBA37\\uBA39-\\uBA53\\uBA55-\\uBA6F\\uBA71-\\uBA8B\\uBA8D-\\uBAA7\\uBAA9-\\uBAC3\\uBAC5-\\uBADF\\uBAE1-\\uBAFB\\uBAFD-\\uBB17\\uBB19-\\uBB33\\uBB35-\\uBB4F\\uBB51-\\uBB6B\\uBB6D-\\uBB87\\uBB89-\\uBBA3\\uBBA5-\\uBBBF\\uBBC1-\\uBBDB\\uBBDD-\\uBBF7\\uBBF9-\\uBC13\\uBC15-\\uBC2F\\uBC31-\\uBC4B\\uBC4D-\\uBC67\\uBC69-\\uBC83\\uBC85-\\uBC9F\\uBCA1-\\uBCBB\\uBCBD-\\uBCD7\\uBCD9-\\uBCF3\\uBCF5-\\uBD0F\\uBD11-\\uBD2B\\uBD2D-\\uBD47\\uBD49-\\uBD63\\uBD65-\\uBD7F\\uBD81-\\uBD9B\\uBD9D-\\uBDB7\\uBDB9-\\uBDD3\\uBDD5-\\uBDEF\\uBDF1-\\uBE0B\\uBE0D-\\uBE27\\uBE29-\\uBE43\\uBE45-\\uBE5F\\uBE61-\\uBE7B\\uBE7D-\\uBE97\\uBE99-\\uBEB3\\uBEB5-\\uBECF\\uBED1-\\uBEEB\\uBEED-\\uBF07\\uBF09-\\uBF23\\uBF25-\\uBF3F\\uBF41-\\uBF5B\\uBF5D-\\uBF77\\uBF79-\\uBF93\\uBF95-\\uBFAF\\uBFB1-\\uBFCB\\uBFCD-\\uBFE7\\uBFE9-\\uC003\\uC005-\\uC01F\\uC021-\\uC03B\\uC03D-\\uC057\\uC059-\\uC073\\uC075-\\uC08F\\uC091-\\uC0AB\\uC0AD-\\uC0C7\\uC0C9-\\uC0E3\\uC0E5-\\uC0FF\\uC101-\\uC11B\\uC11D-\\uC137\\uC139-\\uC153\\uC155-\\uC16F\\uC171-\\uC18B\\uC18D-\\uC1A7\\uC1A9-\\uC1C3\\uC1C5-\\uC1DF\\uC1E1-\\uC1FB\\uC1FD-\\uC217\\uC219-\\uC233\\uC235-\\uC24F\\uC251-\\uC26B\\uC26D-\\uC287\\uC289-\\uC2A3\\uC2A5-\\uC2BF\\uC2C1-\\uC2DB\\uC2DD-\\uC2F7\\uC2F9-\\uC313\\uC315-\\uC32F\\uC331-\\uC34B\\uC34D-\\uC367\\uC369-\\uC383\\uC385-\\uC39F\\uC3A1-\\uC3BB\\uC3BD-\\uC3D7\\uC3D9-\\uC3F3\\uC3F5-\\uC40F\\uC411-\\uC42B\\uC42D-\\uC447\\uC449-\\uC463\\uC465-\\uC47F\\uC481-\\uC49B\\uC49D-\\uC4B7\\uC4B9-\\uC4D3\\uC4D5-\\uC4EF\\uC4F1-\\uC50B\\uC50D-\\uC527\\uC529-\\uC543\\uC545-\\uC55F\\uC561-\\uC57B\\uC57D-\\uC597\\uC599-\\uC5B3\\uC5B5-\\uC5CF\\uC5D1-\\uC5EB\\uC5ED-\\uC607\\uC609-\\uC623\\uC625-\\uC63F\\uC641-\\uC65B\\uC65D-\\uC677\\uC679-\\uC693\\uC695-\\uC6AF\\uC6B1-\\uC6CB\\uC6CD-\\uC6E7\\uC6E9-\\uC703\\uC705-\\uC71F\\uC721-\\uC73B\\uC73D-\\uC757\\uC759-\\uC773\\uC775-\\uC78F\\uC791-\\uC7AB\\uC7AD-\\uC7C7\\uC7C9-\\uC7E3\\uC7E5-\\uC7FF\\uC801-\\uC81B\\uC81D-\\uC837\\uC839-\\uC853\\uC855-\\uC86F\\uC871-\\uC88B\\uC88D-\\uC8A7\\uC8A9-\\uC8C3\\uC8C5-\\uC8DF\\uC8E1-\\uC8FB\\uC8FD-\\uC917\\uC919-\\uC933\\uC935-\\uC94F\\uC951-\\uC96B\\uC96D-\\uC987\\uC989-\\uC9A3\\uC9A5-\\uC9BF\\uC9C1-\\uC9DB\\uC9DD-\\uC9F7\\uC9F9-\\uCA13\\uCA15-\\uCA2F\\uCA31-\\uCA4B\\uCA4D-\\uCA67\\uCA69-\\uCA83\\uCA85-\\uCA9F\\uCAA1-\\uCABB\\uCABD-\\uCAD7\\uCAD9-\\uCAF3\\uCAF5-\\uCB0F\\uCB11-\\uCB2B\\uCB2D-\\uCB47\\uCB49-\\uCB63\\uCB65-\\uCB7F\\uCB81-\\uCB9B\\uCB9D-\\uCBB7\\uCBB9-\\uCBD3\\uCBD5-\\uCBEF\\uCBF1-\\uCC0B\\uCC0D-\\uCC27\\uCC29-\\uCC43\\uCC45-\\uCC5F\\uCC61-\\uCC7B\\uCC7D-\\uCC97\\uCC99-\\uCCB3\\uCCB5-\\uCCCF\\uCCD1-\\uCCEB\\uCCED-\\uCD07\\uCD09-\\uCD23\\uCD25-\\uCD3F\\uCD41-\\uCD5B\\uCD5D-\\uCD77\\uCD79-\\uCD93\\uCD95-\\uCDAF\\uCDB1-\\uCDCB\\uCDCD-\\uCDE7\\uCDE9-\\uCE03\\uCE05-\\uCE1F\\uCE21-\\uCE3B\\uCE3D-\\uCE57\\uCE59-\\uCE73\\uCE75-\\uCE8F\\uCE91-\\uCEAB\\uCEAD-\\uCEC7\\uCEC9-\\uCEE3\\uCEE5-\\uCEFF\\uCF01-\\uCF1B\\uCF1D-\\uCF37\\uCF39-\\uCF53\\uCF55-\\uCF6F\\uCF71-\\uCF8B\\uCF8D-\\uCFA7\\uCFA9-\\uCFC3\\uCFC5-\\uCFDF\\uCFE1-\\uCFFB\\uCFFD-\\uD017\\uD019-\\uD033\\uD035-\\uD04F\\uD051-\\uD06B\\uD06D-\\uD087\\uD089-\\uD0A3\\uD0A5-\\uD0BF\\uD0C1-\\uD0DB\\uD0DD-\\uD0F7\\uD0F9-\\uD113\\uD115-\\uD12F\\uD131-\\uD14B\\uD14D-\\uD167\\uD169-\\uD183\\uD185-\\uD19F\\uD1A1-\\uD1BB\\uD1BD-\\uD1D7\\uD1D9-\\uD1F3\\uD1F5-\\uD20F\\uD211-\\uD22B\\uD22D-\\uD247\\uD249-\\uD263\\uD265-\\uD27F\\uD281-\\uD29B\\uD29D-\\uD2B7\\uD2B9-\\uD2D3\\uD2D5-\\uD2EF\\uD2F1-\\uD30B\\uD30D-\\uD327\\uD329-\\uD343\\uD345-\\uD35F\\uD361-\\uD37B\\uD37D-\\uD397\\uD399-\\uD3B3\\uD3B5-\\uD3CF\\uD3D1-\\uD3EB\\uD3ED-\\uD407\\uD409-\\uD423\\uD425-\\uD43F\\uD441-\\uD45B\\uD45D-\\uD477\\uD479-\\uD493\\uD495-\\uD4AF\\uD4B1-\\uD4CB\\uD4CD-\\uD4E7\\uD4E9-\\uD503\\uD505-\\uD51F\\uD521-\\uD53B\\uD53D-\\uD557\\uD559-\\uD573\\uD575-\\uD58F\\uD591-\\uD5AB\\uD5AD-\\uD5C7\\uD5C9-\\uD5E3\\uD5E5-\\uD5FF\\uD601-\\uD61B\\uD61D-\\uD637\\uD639-\\uD653\\uD655-\\uD66F\\uD671-\\uD68B\\uD68D-\\uD6A7\\uD6A9-\\uD6C3\\uD6C5-\\uD6DF\\uD6E1-\\uD6FB\\uD6FD-\\uD717\\uD719-\\uD733\\uD735-\\uD74F\\uD751-\\uD76B\\uD76D-\\uD787\\uD789-\\uD7A3]$/u\nconst reExtPict = /^\\p{ExtPict}$/u\n\nconst getCodepointType = (char: string, code: number): CodepointType => {\n  let type = CodepointType.Any\n  if (char.search(reExtend) !== -1) {\n    type |= CodepointType.Extend\n  }\n  if (code === 0x200d) {\n    type |= CodepointType.ZWJ\n  }\n  if (code >= 0x1f1e6 && code <= 0x1f1ff) {\n    type |= CodepointType.RI\n  }\n  if (char.search(rePrepend) !== -1) {\n    type |= CodepointType.Prepend\n  }\n  if (char.search(reSpacingMark) !== -1) {\n    type |= CodepointType.SpacingMark\n  }\n  if (char.search(reL) !== -1) {\n    type |= CodepointType.L\n  }\n  if (char.search(reV) !== -1) {\n    type |= CodepointType.V\n  }\n  if (char.search(reT) !== -1) {\n    type |= CodepointType.T\n  }\n  if (char.search(reLV) !== -1) {\n    type |= CodepointType.LV\n  }\n  if (char.search(reLVT) !== -1) {\n    type |= CodepointType.LVT\n  }\n  if (char.search(reExtPict) !== -1) {\n    type |= CodepointType.ExtPict\n  }\n\n  return type\n}\n\nfunction intersects(x: CodepointType, y: CodepointType) {\n  return (x & y) !== 0\n}\n\nconst NonBoundaryPairs: [CodepointType, CodepointType][] = [\n  // GB6\n  [\n    CodepointType.L,\n    CodepointType.L | CodepointType.V | CodepointType.LV | CodepointType.LVT,\n  ],\n  // GB7\n  [CodepointType.LV | CodepointType.V, CodepointType.V | CodepointType.T],\n  // GB8\n  [CodepointType.LVT | CodepointType.T, CodepointType.T],\n  // GB9\n  [CodepointType.Any, CodepointType.Extend | CodepointType.ZWJ],\n  // GB9a\n  [CodepointType.Any, CodepointType.SpacingMark],\n  // GB9b\n  [CodepointType.Prepend, CodepointType.Any],\n  // GB11\n  [CodepointType.ZWJ, CodepointType.ExtPict],\n  // GB12 and GB13\n  [CodepointType.RI, CodepointType.RI],\n]\n\nfunction isBoundaryPair(left: CodepointType, right: CodepointType) {\n  return (\n    NonBoundaryPairs.findIndex(\n      r => intersects(left, r[0]) && intersects(right, r[1])\n    ) === -1\n  )\n}\n\nconst endingEmojiZWJ = /\\p{ExtPict}[\\p{Gr_Ext}\\p{EMod}]*\\u200D$/u\nconst endsWithEmojiZWJ = (str: string): boolean => {\n  return str.search(endingEmojiZWJ) !== -1\n}\n\nconst endingRIs = /\\p{RI}+$/gu\nconst endsWithOddNumberOfRIs = (str: string): boolean => {\n  const match = str.match(endingRIs)\n  if (match === null) {\n    return false\n  } else {\n    // A RI is represented by a surrogate pair.\n    const numRIs = match[0].length / 2\n    return numRIs % 2 === 1\n  }\n}\n","import { Editor, Location, Node, Path, Range, Transforms } from '../../index'\nimport { TextUnit } from '../../types/types'\nimport { getDefaultInsertLocation } from '../../utils'\n\nexport interface TextDeleteOptions {\n  at?: Location\n  distance?: number\n  unit?: TextUnit\n  reverse?: boolean\n  hanging?: boolean\n  voids?: boolean\n}\n\nexport interface TextInsertFragmentOptions {\n  at?: Location\n  hanging?: boolean\n  voids?: boolean\n}\n\nexport interface TextInsertTextOptions {\n  at?: Location\n  voids?: boolean\n}\n\nexport interface TextTransforms {\n  /**\n   * Delete content in the editor.\n   */\n  delete: (editor: Editor, options?: TextDeleteOptions) => void\n\n  /**\n   * Insert a fragment in the editor\n   * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.\n   */\n  insertFragment: (\n    editor: Editor,\n    fragment: Node[],\n    options?: TextInsertFragmentOptions\n  ) => void\n\n  /**\n   * Insert a string of text in the editor\n   * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.\n   */\n  insertText: (\n    editor: Editor,\n    text: string,\n    options?: TextInsertTextOptions\n  ) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const TextTransforms: TextTransforms = {\n  delete(editor, options) {\n    editor.delete(options)\n  },\n  insertFragment(editor, fragment, options) {\n    editor.insertFragment(fragment, options)\n  },\n  insertText(\n    editor: Editor,\n    text: string,\n    options: TextInsertTextOptions = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { voids = false } = options\n      let { at = getDefaultInsertLocation(editor) } = options\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const end = Range.end(at)\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n          const start = Range.start(at)\n          const startRef = Editor.pointRef(editor, start)\n          const endRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at, voids })\n          const startPoint = startRef.unref()\n          const endPoint = endRef.unref()\n\n          at = startPoint || endPoint!\n          Transforms.setSelection(editor, { anchor: at, focus: at })\n        }\n      }\n\n      if (\n        (!voids && Editor.void(editor, { at })) ||\n        Editor.elementReadOnly(editor, { at })\n      ) {\n        return\n      }\n\n      const { path, offset } = at\n      if (text.length > 0)\n        editor.apply({ type: 'insert_text', path, offset, text })\n    })\n  },\n}\n","import { GeneralTransforms } from './general'\nimport { NodeTransforms } from './node'\nimport { SelectionTransforms } from './selection'\nimport { TextTransforms } from './text'\n\nexport const Transforms: GeneralTransforms &\n  NodeTransforms &\n  SelectionTransforms &\n  TextTransforms = {\n  ...GeneralTransforms,\n  ...NodeTransforms,\n  ...SelectionTransforms,\n  ...TextTransforms,\n}\n","import { PathRef } from '../interfaces/path-ref'\nimport { PointRef } from '../interfaces/point-ref'\nimport { RangeRef } from '../interfaces/range-ref'\nimport { DIRTY_PATH_KEYS, DIRTY_PATHS, FLUSHING } from '../utils/weak-maps'\nimport { Path } from '../interfaces/path'\nimport { Transforms } from '../interfaces/transforms'\nimport { WithEditorFirstArg } from '../utils/types'\nimport { Editor } from '../interfaces/editor'\n\nexport const apply: WithEditorFirstArg<Editor['apply']> = (editor, op) => {\n  for (const ref of Editor.pathRefs(editor)) {\n    PathRef.transform(ref, op)\n  }\n\n  for (const ref of Editor.pointRefs(editor)) {\n    PointRef.transform(ref, op)\n  }\n\n  for (const ref of Editor.rangeRefs(editor)) {\n    RangeRef.transform(ref, op)\n  }\n\n  const oldDirtyPaths = DIRTY_PATHS.get(editor) || []\n  const oldDirtyPathKeys = DIRTY_PATH_KEYS.get(editor) || new Set()\n  let dirtyPaths: Path[]\n  let dirtyPathKeys: Set<string>\n\n  const add = (path: Path | null) => {\n    if (path) {\n      const key = path.join(',')\n\n      if (!dirtyPathKeys.has(key)) {\n        dirtyPathKeys.add(key)\n        dirtyPaths.push(path)\n      }\n    }\n  }\n\n  if (Path.operationCanTransformPath(op)) {\n    dirtyPaths = []\n    dirtyPathKeys = new Set()\n    for (const path of oldDirtyPaths) {\n      const newPath = Path.transform(path, op)\n      add(newPath)\n    }\n  } else {\n    dirtyPaths = oldDirtyPaths\n    dirtyPathKeys = oldDirtyPathKeys\n  }\n\n  const newDirtyPaths = editor.getDirtyPaths(op)\n  for (const path of newDirtyPaths) {\n    add(path)\n  }\n\n  DIRTY_PATHS.set(editor, dirtyPaths)\n  DIRTY_PATH_KEYS.set(editor, dirtyPathKeys)\n  Transforms.transform(editor, op)\n  editor.operations.push(op)\n  Editor.normalize(editor, {\n    operation: op,\n  })\n\n  // Clear any formats applied to the cursor if the selection changes.\n  if (op.type === 'set_selection') {\n    editor.marks = null\n  }\n\n  if (!FLUSHING.get(editor)) {\n    FLUSHING.set(editor, true)\n\n    Promise.resolve().then(() => {\n      FLUSHING.set(editor, false)\n      editor.onChange({ operation: op })\n      editor.operations = []\n    })\n  }\n}\n","import { WithEditorFirstArg } from '../utils/types'\nimport { Path } from '../interfaces/path'\nimport { Text } from '../interfaces/text'\nimport { Node } from '../interfaces/node'\nimport { Editor } from '../interfaces/editor'\n\n/**\n * Get the \"dirty\" paths generated from an operation.\n */\nexport const getDirtyPaths: WithEditorFirstArg<Editor['getDirtyPaths']> = (\n  editor,\n  op\n) => {\n  switch (op.type) {\n    case 'insert_text':\n    case 'remove_text':\n    case 'set_node': {\n      const { path } = op\n      return Path.levels(path)\n    }\n\n    case 'insert_node': {\n      const { node, path } = op\n      const levels = Path.levels(path)\n      const descendants = Text.isText(node)\n        ? []\n        : Array.from(Node.nodes(node), ([, p]) => path.concat(p))\n\n      return [...levels, ...descendants]\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      const previousPath = Path.previous(path)\n      return [...ancestors, previousPath]\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n\n      if (Path.equals(path, newPath)) {\n        return []\n      }\n\n      const oldAncestors: Path[] = []\n      const newAncestors: Path[] = []\n\n      for (const ancestor of Path.ancestors(path)) {\n        const p = Path.transform(ancestor, op)\n        oldAncestors.push(p!)\n      }\n\n      for (const ancestor of Path.ancestors(newPath)) {\n        const p = Path.transform(ancestor, op)\n        newAncestors.push(p!)\n      }\n\n      const newParent = newAncestors[newAncestors.length - 1]\n      const newIndex = newPath[newPath.length - 1]\n      const resultPath = newParent.concat(newIndex)\n\n      return [...oldAncestors, ...newAncestors, resultPath]\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      return [...ancestors]\n    }\n\n    case 'split_node': {\n      const { path } = op\n      const levels = Path.levels(path)\n      const nextPath = Path.next(path)\n      return [...levels, nextPath]\n    }\n\n    default: {\n      return []\n    }\n  }\n}\n","import { Editor, Node } from '../interfaces'\nimport { WithEditorFirstArg } from '../utils'\n\nexport const getFragment: WithEditorFirstArg<Editor['getFragment']> = editor => {\n  const { selection } = editor\n\n  if (selection) {\n    return Node.fragment(editor, selection)\n  }\n  return []\n}\n","import { WithEditorFirstArg } from '../utils/types'\nimport { Text } from '../interfaces/text'\nimport { Element } from '../interfaces/element'\nimport { Transforms } from '../interfaces/transforms'\nimport { Descendant, Node } from '../interfaces/node'\nimport { Editor } from '../interfaces/editor'\n\nexport const normalizeNode: WithEditorFirstArg<Editor['normalizeNode']> = (\n  editor,\n  entry\n) => {\n  const [node, path] = entry\n\n  // There are no core normalizations for text nodes.\n  if (Text.isText(node)) {\n    return\n  }\n\n  // Ensure that block and inline nodes have at least one text child.\n  if (Element.isElement(node) && node.children.length === 0) {\n    const child = { text: '' }\n    Transforms.insertNodes(editor, child, {\n      at: path.concat(0),\n      voids: true,\n    })\n    return\n  }\n\n  // Determine whether the node should have block or inline children.\n  const shouldHaveInlines = Editor.isEditor(node)\n    ? false\n    : Element.isElement(node) &&\n      (editor.isInline(node) ||\n        node.children.length === 0 ||\n        Text.isText(node.children[0]) ||\n        editor.isInline(node.children[0]))\n\n  // Since we'll be applying operations while iterating, keep track of an\n  // index that accounts for any added/removed nodes.\n  let n = 0\n\n  for (let i = 0; i < node.children.length; i++, n++) {\n    const currentNode = Node.get(editor, path)\n    if (Text.isText(currentNode)) continue\n    const child = currentNode.children[n] as Descendant\n    const prev = currentNode.children[n - 1] as Descendant\n    const isLast = i === node.children.length - 1\n    const isInlineOrText =\n      Text.isText(child) || (Element.isElement(child) && editor.isInline(child))\n\n    // Only allow block nodes in the top-level children and parent blocks\n    // that only contain block nodes. Similarly, only allow inline nodes in\n    // other inline nodes, or parent blocks that only contain inlines and\n    // text.\n    if (isInlineOrText !== shouldHaveInlines) {\n      Transforms.removeNodes(editor, { at: path.concat(n), voids: true })\n      n--\n    } else if (Element.isElement(child)) {\n      // Ensure that inline nodes are surrounded by text nodes.\n      if (editor.isInline(child)) {\n        if (prev == null || !Text.isText(prev)) {\n          const newChild = { text: '' }\n          Transforms.insertNodes(editor, newChild, {\n            at: path.concat(n),\n            voids: true,\n          })\n          n++\n        } else if (isLast) {\n          const newChild = { text: '' }\n          Transforms.insertNodes(editor, newChild, {\n            at: path.concat(n + 1),\n            voids: true,\n          })\n          n++\n        }\n      }\n    } else {\n      // Merge adjacent text nodes that are empty or match.\n      if (prev != null && Text.isText(prev)) {\n        if (Text.equals(child, prev, { loose: true })) {\n          Transforms.mergeNodes(editor, { at: path.concat(n), voids: true })\n          n--\n        } else if (prev.text === '') {\n          Transforms.removeNodes(editor, {\n            at: path.concat(n - 1),\n            voids: true,\n          })\n          n--\n        } else if (child.text === '') {\n          Transforms.removeNodes(editor, {\n            at: path.concat(n),\n            voids: true,\n          })\n          n--\n        }\n      }\n    }\n  }\n}\n","import { WithEditorFirstArg } from '../utils/types'\nimport { Editor } from '../interfaces/editor'\n\nexport const shouldNormalize: WithEditorFirstArg<Editor['shouldNormalize']> = (\n  editor,\n  { iteration, initialDirtyPathsLength }\n) => {\n  const maxIterations = initialDirtyPathsLength * 42 // HACK: better way?\n\n  if (iteration > maxIterations) {\n    throw new Error(\n      `Could not completely normalize the editor after ${maxIterations} iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.`\n    )\n  }\n\n  return true\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Text } from '../interfaces/text'\nimport { Range } from '../interfaces/range'\nimport { Path } from '../interfaces/path'\n\nexport const above: EditorInterface['above'] = (editor, options = {}) => {\n  const {\n    voids = false,\n    mode = 'lowest',\n    at = editor.selection,\n    match,\n  } = options\n\n  if (!at) {\n    return\n  }\n\n  const path = Editor.path(editor, at)\n  const reverse = mode === 'lowest'\n\n  for (const [n, p] of Editor.levels(editor, {\n    at: path,\n    voids,\n    match,\n    reverse,\n  })) {\n    if (Text.isText(n)) continue\n    if (Range.isRange(at)) {\n      if (\n        Path.isAncestor(p, at.anchor.path) &&\n        Path.isAncestor(p, at.focus.path)\n      ) {\n        return [n, p]\n      }\n    } else {\n      if (!Path.equals(path, p)) {\n        return [n, p]\n      }\n    }\n  }\n}\n","import { Node } from '../interfaces/node'\nimport { Path } from '../interfaces/path'\nimport { Text } from '../interfaces/text'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\nimport { FLUSHING } from '../utils/weak-maps'\nimport { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const addMark: EditorInterface['addMark'] = (editor, key, value) => {\n  const { selection } = editor\n\n  if (selection) {\n    const match = (node: Node, path: Path) => {\n      if (!Text.isText(node)) {\n        return false // marks can only be applied to text\n      }\n      const [parentNode, parentPath] = Editor.parent(editor, path)\n      return !editor.isVoid(parentNode) || editor.markableVoid(parentNode)\n    }\n    const expandedSelection = Range.isExpanded(selection)\n    let markAcceptingVoidSelected = false\n    if (!expandedSelection) {\n      const [selectedNode, selectedPath] = Editor.node(editor, selection)\n      if (selectedNode && match(selectedNode, selectedPath)) {\n        const [parentNode] = Editor.parent(editor, selectedPath)\n        markAcceptingVoidSelected =\n          parentNode && editor.markableVoid(parentNode)\n      }\n    }\n    if (expandedSelection || markAcceptingVoidSelected) {\n      Transforms.setNodes(\n        editor,\n        { [key]: value },\n        {\n          match,\n          split: true,\n          voids: true,\n        }\n      )\n    } else {\n      const marks = {\n        ...(Editor.marks(editor) || {}),\n        [key]: value,\n      }\n\n      editor.marks = marks\n      if (!FLUSHING.get(editor)) {\n        editor.onChange()\n      }\n    }\n  }\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const after: EditorInterface['after'] = (editor, at, options = {}) => {\n  const anchor = Editor.point(editor, at, { edge: 'end' })\n  const focus = Editor.end(editor, [])\n  const range = { anchor, focus }\n  const { distance = 1 } = options\n  let d = 0\n  let target\n\n  for (const p of Editor.positions(editor, {\n    ...options,\n    at: range,\n  })) {\n    if (d > distance) {\n      break\n    }\n\n    if (d !== 0) {\n      target = p\n    }\n\n    d++\n  }\n\n  return target\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const before: EditorInterface['before'] = (editor, at, options = {}) => {\n  const anchor = Editor.start(editor, [])\n  const focus = Editor.point(editor, at, { edge: 'start' })\n  const range = { anchor, focus }\n  const { distance = 1 } = options\n  let d = 0\n  let target\n\n  for (const p of Editor.positions(editor, {\n    ...options,\n    at: range,\n    reverse: true,\n  })) {\n    if (d > distance) {\n      break\n    }\n\n    if (d !== 0) {\n      target = p\n    }\n\n    d++\n  }\n\n  return target\n}\n","import { Editor } from '../interfaces/editor'\nimport { Transforms } from '../interfaces/transforms'\nimport { Range } from '../interfaces/range'\nimport { WithEditorFirstArg } from '../utils/types'\n\nexport const deleteBackward: WithEditorFirstArg<Editor['deleteBackward']> = (\n  editor,\n  unit\n) => {\n  const { selection } = editor\n\n  if (selection && Range.isCollapsed(selection)) {\n    Transforms.delete(editor, { unit, reverse: true })\n  }\n}\n","import { Editor } from '../interfaces/editor'\nimport { Transforms } from '../interfaces/transforms'\nimport { Range } from '../interfaces/range'\nimport { WithEditorFirstArg } from '../utils/types'\n\nexport const deleteForward: WithEditorFirstArg<Editor['deleteForward']> = (\n  editor,\n  unit\n) => {\n  const { selection } = editor\n\n  if (selection && Range.isCollapsed(selection)) {\n    Transforms.delete(editor, { unit })\n  }\n}\n","import { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\nimport { EditorInterface } from '../interfaces/editor'\n\nexport const deleteFragment: EditorInterface['deleteFragment'] = (\n  editor,\n  { direction = 'forward' } = {}\n) => {\n  const { selection } = editor\n\n  if (selection && Range.isExpanded(selection)) {\n    Transforms.delete(editor, { reverse: direction === 'backward' })\n  }\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const edges: EditorInterface['edges'] = (editor, at) => {\n  return [Editor.start(editor, at), Editor.end(editor, at)]\n}\n","import { Element } from '../interfaces/element'\nimport { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const elementReadOnly: EditorInterface['elementReadOnly'] = (\n  editor,\n  options = {}\n) => {\n  return Editor.above(editor, {\n    ...options,\n    match: n => Element.isElement(n) && Editor.isElementReadOnly(editor, n),\n  })\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const end: EditorInterface['end'] = (editor, at) => {\n  return Editor.point(editor, at, { edge: 'end' })\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const first: EditorInterface['first'] = (editor, at) => {\n  const path = Editor.path(editor, at, { edge: 'start' })\n  return Editor.node(editor, path)\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Node } from '../interfaces/node'\n\nexport const fragment: EditorInterface['fragment'] = (editor, at) => {\n  const range = Editor.range(editor, at)\n  return Node.fragment(editor, range)\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Element } from '../interfaces/element'\n\nexport const getVoid: EditorInterface['void'] = (editor, options = {}) => {\n  return Editor.above(editor, {\n    ...options,\n    match: n => Element.isElement(n) && Editor.isVoid(editor, n),\n  })\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Element } from '../interfaces/element'\n\nexport const hasBlocks: EditorInterface['hasBlocks'] = (editor, element) => {\n  return element.children.some(\n    n => Element.isElement(n) && Editor.isBlock(editor, n)\n  )\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Text } from '../interfaces/text'\n\nexport const hasInlines: EditorInterface['hasInlines'] = (editor, element) => {\n  return element.children.some(\n    n => Text.isText(n) || Editor.isInline(editor, n)\n  )\n}\n","import { EditorInterface } from '../interfaces/editor'\nimport { Node } from '../interfaces/node'\n\nexport const hasPath: EditorInterface['hasPath'] = (editor, path) => {\n  return Node.has(editor, path)\n}\n","import { EditorInterface } from '../interfaces/editor'\nimport { Text } from '../interfaces/text'\n\nexport const hasTexts: EditorInterface['hasTexts'] = (editor, element) => {\n  return element.children.every(n => Text.isText(n))\n}\n","import { Transforms } from '../interfaces/transforms'\nimport { EditorInterface } from '../interfaces/editor'\n\nexport const insertBreak: EditorInterface['insertBreak'] = editor => {\n  Transforms.splitNodes(editor, { always: true })\n}\n","import { Transforms } from '../interfaces/transforms'\nimport { EditorInterface } from '../interfaces/editor'\n\nexport const insertNode: EditorInterface['insertNode'] = (\n  editor,\n  node,\n  options\n) => {\n  Transforms.insertNodes(editor, node, options)\n}\n","import { Transforms } from '../interfaces/transforms'\nimport { EditorInterface } from '../interfaces/editor'\n\nexport const insertSoftBreak: EditorInterface['insertSoftBreak'] = editor => {\n  Transforms.splitNodes(editor, { always: true })\n}\n","import { Transforms } from '../interfaces/transforms'\nimport { EditorInterface } from '../interfaces/editor'\n\nexport const insertText: EditorInterface['insertText'] = (\n  editor,\n  text,\n  options = {}\n) => {\n  const { selection, marks } = editor\n\n  if (selection) {\n    if (marks) {\n      const node = { text, ...marks }\n      Transforms.insertNodes(editor, node, {\n        at: options.at,\n        voids: options.voids,\n      })\n    } else {\n      Transforms.insertText(editor, text, options)\n    }\n\n    editor.marks = null\n  }\n}\n","import { EditorInterface } from '../interfaces/editor'\n\nexport const isBlock: EditorInterface['isBlock'] = (editor, value) => {\n  return !editor.isInline(value)\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const isEdge: EditorInterface['isEdge'] = (editor, point, at) => {\n  return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at)\n}\n","import { EditorInterface } from '../interfaces/editor'\nimport { Text } from '../interfaces/text'\n\nexport const isEmpty: EditorInterface['isEmpty'] = (editor, element) => {\n  const { children } = element\n  const [first] = children\n  return (\n    children.length === 0 ||\n    (children.length === 1 &&\n      Text.isText(first) &&\n      first.text === '' &&\n      !editor.isVoid(element))\n  )\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Point } from '../interfaces/point'\n\nexport const isEnd: EditorInterface['isEnd'] = (editor, point, at) => {\n  const end = Editor.end(editor, at)\n  return Point.equals(point, end)\n}\n","import { EditorInterface } from '../interfaces/editor'\nimport { NORMALIZING } from '../utils/weak-maps'\n\nexport const isNormalizing: EditorInterface['isNormalizing'] = editor => {\n  const isNormalizing = NORMALIZING.get(editor)\n  return isNormalizing === undefined ? true : isNormalizing\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Point } from '../interfaces/point'\n\nexport const isStart: EditorInterface['isStart'] = (editor, point, at) => {\n  // PERF: If the offset isn't `0` we know it's not the start.\n  if (point.offset !== 0) {\n    return false\n  }\n\n  const start = Editor.start(editor, at)\n  return Point.equals(point, start)\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const last: EditorInterface['last'] = (editor, at) => {\n  const path = Editor.path(editor, at, { edge: 'end' })\n  return Editor.node(editor, path)\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Node } from '../interfaces/node'\n\nexport const leaf: EditorInterface['leaf'] = (editor, at, options = {}) => {\n  const path = Editor.path(editor, at, options)\n  const node = Node.leaf(editor, path)\n  return [node, path]\n}\n","import { Node, NodeEntry } from '../interfaces/node'\nimport { Editor, EditorLevelsOptions } from '../interfaces/editor'\nimport { Element } from '../interfaces/element'\n\nexport function* levels<T extends Node>(\n  editor: Editor,\n  options: EditorLevelsOptions<T> = {}\n): Generator<NodeEntry<T>, void, undefined> {\n  const { at = editor.selection, reverse = false, voids = false } = options\n  let { match } = options\n\n  if (match == null) {\n    match = () => true\n  }\n\n  if (!at) {\n    return\n  }\n\n  const levels: NodeEntry<T>[] = []\n  const path = Editor.path(editor, at)\n\n  for (const [n, p] of Node.levels(editor, path)) {\n    if (!match(n, p)) {\n      continue\n    }\n\n    levels.push([n, p])\n\n    if (!voids && Element.isElement(n) && Editor.isVoid(editor, n)) {\n      break\n    }\n  }\n\n  if (reverse) {\n    levels.reverse()\n  }\n\n  yield* levels\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { NodeEntry } from '../interfaces/node'\nimport { Range } from '../interfaces/range'\nimport { Path } from '../interfaces/path'\nimport { Text } from '../interfaces/text'\nimport { Element } from '../interfaces/element'\n\nexport const marks: EditorInterface['marks'] = (editor, options = {}) => {\n  const { marks, selection } = editor\n\n  if (!selection) {\n    return null\n  }\n\n  if (marks) {\n    return marks\n  }\n\n  if (Range.isExpanded(selection)) {\n    const [match] = Editor.nodes(editor, { match: Text.isText })\n\n    if (match) {\n      const [node] = match as NodeEntry<Text>\n      const { text, ...rest } = node\n      return rest\n    } else {\n      return {}\n    }\n  }\n\n  const { anchor } = selection\n  const { path } = anchor\n  let [node] = Editor.leaf(editor, path)\n\n  if (anchor.offset === 0) {\n    const prev = Editor.previous(editor, { at: path, match: Text.isText })\n    const markedVoid = Editor.above(editor, {\n      match: n =>\n        Element.isElement(n) &&\n        Editor.isVoid(editor, n) &&\n        editor.markableVoid(n),\n    })\n    if (!markedVoid) {\n      const block = Editor.above(editor, {\n        match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n      })\n\n      if (prev && block) {\n        const [prevNode, prevPath] = prev\n        const [, blockPath] = block\n\n        if (Path.isAncestor(blockPath, prevPath)) {\n          node = prevNode as Text\n        }\n      }\n    }\n  }\n\n  const { text, ...rest } = node\n  return rest\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Span } from '../interfaces/location'\nimport { Path } from '../interfaces/path'\n\nexport const next: EditorInterface['next'] = (editor, options = {}) => {\n  const { mode = 'lowest', voids = false } = options\n  let { match, at = editor.selection } = options\n\n  if (!at) {\n    return\n  }\n\n  const pointAfterLocation = Editor.after(editor, at, { voids })\n\n  if (!pointAfterLocation) return\n\n  const [, to] = Editor.last(editor, [])\n\n  const span: Span = [pointAfterLocation.path, to]\n\n  if (Path.isPath(at) && at.length === 0) {\n    throw new Error(`Cannot get the next node from the root node!`)\n  }\n\n  if (match == null) {\n    if (Path.isPath(at)) {\n      const [parent] = Editor.parent(editor, at)\n      match = n => parent.children.includes(n)\n    } else {\n      match = () => true\n    }\n  }\n\n  const [next] = Editor.nodes(editor, { at: span, match, mode, voids })\n  return next\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Node } from '../interfaces/node'\n\nexport const node: EditorInterface['node'] = (editor, at, options = {}) => {\n  const path = Editor.path(editor, at, options)\n  const node = Node.get(editor, path)\n  return [node, path]\n}\n","import { Node, NodeEntry } from '../interfaces/node'\nimport { Editor, EditorNodesOptions } from '../interfaces/editor'\nimport { Span } from '../interfaces/location'\nimport { Element } from '../interfaces/element'\nimport { Path } from '../interfaces/path'\nimport { Text } from '../interfaces/text'\n\nexport function* nodes<T extends Node>(\n  editor: Editor,\n  options: EditorNodesOptions<T> = {}\n): Generator<NodeEntry<T>, void, undefined> {\n  const {\n    at = editor.selection,\n    mode = 'all',\n    universal = false,\n    reverse = false,\n    voids = false,\n    ignoreNonSelectable = false,\n  } = options\n  let { match } = options\n\n  if (!match) {\n    match = () => true\n  }\n\n  if (!at) {\n    return\n  }\n\n  let from\n  let to\n\n  if (Span.isSpan(at)) {\n    from = at[0]\n    to = at[1]\n  } else {\n    const first = Editor.path(editor, at, { edge: 'start' })\n    const last = Editor.path(editor, at, { edge: 'end' })\n    from = reverse ? last : first\n    to = reverse ? first : last\n  }\n\n  const nodeEntries = Node.nodes(editor, {\n    reverse,\n    from,\n    to,\n    pass: ([node]) => {\n      if (!Element.isElement(node)) return false\n      if (\n        !voids &&\n        (Editor.isVoid(editor, node) || Editor.isElementReadOnly(editor, node))\n      )\n        return true\n      if (ignoreNonSelectable && !Editor.isSelectable(editor, node)) return true\n      return false\n    },\n  })\n\n  const matches: NodeEntry<T>[] = []\n  let hit: NodeEntry<T> | undefined\n\n  for (const [node, path] of nodeEntries) {\n    if (\n      ignoreNonSelectable &&\n      Element.isElement(node) &&\n      !Editor.isSelectable(editor, node)\n    ) {\n      continue\n    }\n\n    const isLower = hit && Path.compare(path, hit[1]) === 0\n\n    // In highest mode any node lower than the last hit is not a match.\n    if (mode === 'highest' && isLower) {\n      continue\n    }\n\n    if (!match(node, path)) {\n      // If we've arrived at a leaf text node that is not lower than the last\n      // hit, then we've found a branch that doesn't include a match, which\n      // means the match is not universal.\n      if (universal && !isLower && Text.isText(node)) {\n        return\n      } else {\n        continue\n      }\n    }\n\n    // If there's a match and it's lower than the last, update the hit.\n    if (mode === 'lowest' && isLower) {\n      hit = [node, path]\n      continue\n    }\n\n    // In lowest mode we emit the last hit, once it's guaranteed lowest.\n    const emit: NodeEntry<T> | undefined =\n      mode === 'lowest' ? hit : [node, path]\n\n    if (emit) {\n      if (universal) {\n        matches.push(emit)\n      } else {\n        yield emit\n      }\n    }\n\n    hit = [node, path]\n  }\n\n  // Since lowest is always emitting one behind, catch up at the end.\n  if (mode === 'lowest' && hit) {\n    if (universal) {\n      matches.push(hit)\n    } else {\n      yield hit\n    }\n  }\n\n  // Universal defers to ensure that the match occurs in every branch, so we\n  // yield all of the matches after iterating.\n  if (universal) {\n    yield* matches\n  }\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { DIRTY_PATH_KEYS, DIRTY_PATHS } from '../utils/weak-maps'\nimport { Path } from '../interfaces/path'\nimport { Node } from '../interfaces/node'\nimport { Element } from '../interfaces/element'\n\nexport const normalize: EditorInterface['normalize'] = (\n  editor,\n  options = {}\n) => {\n  const { force = false, operation } = options\n  const getDirtyPaths = (editor: Editor) => {\n    return DIRTY_PATHS.get(editor) || []\n  }\n\n  const getDirtyPathKeys = (editor: Editor) => {\n    return DIRTY_PATH_KEYS.get(editor) || new Set()\n  }\n\n  const popDirtyPath = (editor: Editor): Path => {\n    const path = getDirtyPaths(editor).pop()!\n    const key = path.join(',')\n    getDirtyPathKeys(editor).delete(key)\n    return path\n  }\n\n  if (!Editor.isNormalizing(editor)) {\n    return\n  }\n\n  if (force) {\n    const allPaths = Array.from(Node.nodes(editor), ([, p]) => p)\n    const allPathKeys = new Set(allPaths.map(p => p.join(',')))\n    DIRTY_PATHS.set(editor, allPaths)\n    DIRTY_PATH_KEYS.set(editor, allPathKeys)\n  }\n\n  if (getDirtyPaths(editor).length === 0) {\n    return\n  }\n\n  Editor.withoutNormalizing(editor, () => {\n    /*\n      Fix dirty elements with no children.\n      editor.normalizeNode() does fix this, but some normalization fixes also require it to work.\n      Running an initial pass avoids the catch-22 race condition.\n    */\n    for (const dirtyPath of getDirtyPaths(editor)) {\n      if (Node.has(editor, dirtyPath)) {\n        const entry = Editor.node(editor, dirtyPath)\n        const [node, _] = entry\n\n        /*\n          The default normalizer inserts an empty text node in this scenario, but it can be customised.\n          So there is some risk here.\n\n          As long as the normalizer only inserts child nodes for this case it is safe to do in any order;\n          by definition adding children to an empty node can't cause other paths to change.\n        */\n        if (Element.isElement(node) && node.children.length === 0) {\n          editor.normalizeNode(entry, { operation })\n        }\n      }\n    }\n\n    let dirtyPaths = getDirtyPaths(editor)\n    const initialDirtyPathsLength = dirtyPaths.length\n    let iteration = 0\n\n    while (dirtyPaths.length !== 0) {\n      if (\n        !editor.shouldNormalize({\n          dirtyPaths,\n          iteration,\n          initialDirtyPathsLength,\n          operation,\n        })\n      ) {\n        return\n      }\n\n      const dirtyPath = popDirtyPath(editor)\n\n      // If the node doesn't exist in the tree, it does not need to be normalized.\n      if (Node.has(editor, dirtyPath)) {\n        const entry = Editor.node(editor, dirtyPath)\n        editor.normalizeNode(entry, { operation })\n      }\n      iteration++\n      dirtyPaths = getDirtyPaths(editor)\n    }\n  })\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { Ancestor, NodeEntry } from '../interfaces/node'\n\nexport const parent: EditorInterface['parent'] = (editor, at, options = {}) => {\n  const path = Editor.path(editor, at, options)\n  const parentPath = Path.parent(path)\n  const entry = Editor.node(editor, parentPath)\n  return entry as NodeEntry<Ancestor>\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { PathRef } from '../interfaces/path-ref'\n\nexport const pathRef: EditorInterface['pathRef'] = (\n  editor,\n  path,\n  options = {}\n) => {\n  const { affinity = 'forward' } = options\n  const ref: PathRef = {\n    current: path,\n    affinity,\n    unref() {\n      const { current } = ref\n      const pathRefs = Editor.pathRefs(editor)\n      pathRefs.delete(ref)\n      ref.current = null\n      return current\n    },\n  }\n\n  const refs = Editor.pathRefs(editor)\n  refs.add(ref)\n  return ref\n}\n","import { EditorInterface } from '../interfaces/editor'\nimport { PATH_REFS } from '../utils/weak-maps'\n\nexport const pathRefs: EditorInterface['pathRefs'] = editor => {\n  let refs = PATH_REFS.get(editor)\n\n  if (!refs) {\n    refs = new Set()\n    PATH_REFS.set(editor, refs)\n  }\n\n  return refs\n}\n","import { EditorInterface, Node, Path, Point, Range } from '../interfaces'\n\nexport const path: EditorInterface['path'] = (editor, at, options = {}) => {\n  const { depth, edge } = options\n\n  if (Path.isPath(at)) {\n    if (edge === 'start') {\n      const [, firstPath] = Node.first(editor, at)\n      at = firstPath\n    } else if (edge === 'end') {\n      const [, lastPath] = Node.last(editor, at)\n      at = lastPath\n    }\n  }\n\n  if (Range.isRange(at)) {\n    if (edge === 'start') {\n      at = Range.start(at)\n    } else if (edge === 'end') {\n      at = Range.end(at)\n    } else {\n      at = Path.common(at.anchor.path, at.focus.path)\n    }\n  }\n\n  if (Point.isPoint(at)) {\n    at = at.path\n  }\n\n  if (depth != null) {\n    at = at.slice(0, depth)\n  }\n\n  return at\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { PointRef } from '../interfaces/point-ref'\n\nexport const pointRef: EditorInterface['pointRef'] = (\n  editor,\n  point,\n  options = {}\n) => {\n  const { affinity = 'forward' } = options\n  const ref: PointRef = {\n    current: point,\n    affinity,\n    unref() {\n      const { current } = ref\n      const pointRefs = Editor.pointRefs(editor)\n      pointRefs.delete(ref)\n      ref.current = null\n      return current\n    },\n  }\n\n  const refs = Editor.pointRefs(editor)\n  refs.add(ref)\n  return ref\n}\n","import { EditorInterface } from '../interfaces/editor'\nimport { POINT_REFS } from '../utils/weak-maps'\n\nexport const pointRefs: EditorInterface['pointRefs'] = editor => {\n  let refs = POINT_REFS.get(editor)\n\n  if (!refs) {\n    refs = new Set()\n    POINT_REFS.set(editor, refs)\n  }\n\n  return refs\n}\n","import { EditorInterface } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { Node } from '../interfaces/node'\nimport { Text } from '../interfaces/text'\nimport { Range } from '../interfaces/range'\n\nexport const point: EditorInterface['point'] = (editor, at, options = {}) => {\n  const { edge = 'start' } = options\n\n  if (Path.isPath(at)) {\n    let path\n\n    if (edge === 'end') {\n      const [, lastPath] = Node.last(editor, at)\n      path = lastPath\n    } else {\n      const [, firstPath] = Node.first(editor, at)\n      path = firstPath\n    }\n\n    const node = Node.get(editor, path)\n\n    if (!Text.isText(node)) {\n      throw new Error(\n        `Cannot get the ${edge} point in the node at path [${at}] because it has no ${edge} text node.`\n      )\n    }\n\n    return { path, offset: edge === 'end' ? node.text.length : 0 }\n  }\n\n  if (Range.isRange(at)) {\n    const [start, end] = Range.edges(at)\n    return edge === 'start' ? start : end\n  }\n\n  return at\n}\n","import { Editor, EditorPositionsOptions } from '../interfaces/editor'\nimport { Point } from '../interfaces/point'\nimport { Range } from '../interfaces/range'\nimport { Element } from '../interfaces/element'\nimport { Path } from '../interfaces/path'\nimport { Text } from '../interfaces/text'\nimport {\n  getCharacterDistance,\n  getWordDistance,\n  splitByCharacterDistance,\n} from '../utils/string'\n\nexport function* positions(\n  editor: Editor,\n  options: EditorPositionsOptions = {}\n): Generator<Point, void, undefined> {\n  const {\n    at = editor.selection,\n    unit = 'offset',\n    reverse = false,\n    voids = false,\n    ignoreNonSelectable = false,\n  } = options\n\n  if (!at) {\n    return\n  }\n\n  /**\n   * Algorithm notes:\n   *\n   * Each step `distance` is dynamic depending on the underlying text\n   * and the `unit` specified.  Each step, e.g., a line or word, may\n   * span multiple text nodes, so we iterate through the text both on\n   * two levels in step-sync:\n   *\n   * `leafText` stores the text on a text leaf level, and is advanced\n   * through using the counters `leafTextOffset` and `leafTextRemaining`.\n   *\n   * `blockText` stores the text on a block level, and is shortened\n   * by `distance` every time it is advanced.\n   *\n   * We only maintain a window of one blockText and one leafText because\n   * a block node always appears before all of its leaf nodes.\n   */\n\n  const range = Editor.range(editor, at)\n  const [start, end] = Range.edges(range)\n  const first = reverse ? end : start\n  let isNewBlock = false\n  let blockText = ''\n  let distance = 0 // Distance for leafText to catch up to blockText.\n  let leafTextRemaining = 0\n  let leafTextOffset = 0\n\n  // Iterate through all nodes in range, grabbing entire textual content\n  // of block nodes in blockText, and text nodes in leafText.\n  // Exploits the fact that nodes are sequenced in such a way that we first\n  // encounter the block node, then all of its text nodes, so when iterating\n  // through the blockText and leafText we just need to remember a window of\n  // one block node and leaf node, respectively.\n  for (const [node, path] of Editor.nodes(editor, {\n    at,\n    reverse,\n    voids,\n    ignoreNonSelectable,\n  })) {\n    /*\n     * ELEMENT NODE - Yield position(s) for voids, collect blockText for blocks\n     */\n    if (Element.isElement(node)) {\n      // Void nodes are a special case, so by default we will always\n      // yield their first point. If the `voids` option is set to true,\n      // then we will iterate over their content.\n      if (!voids && (editor.isVoid(node) || editor.isElementReadOnly(node))) {\n        yield Editor.start(editor, path)\n        continue\n      }\n\n      // Inline element nodes are ignored as they don't themselves\n      // contribute to `blockText` or `leafText` - their parent and\n      // children do.\n      if (editor.isInline(node)) continue\n\n      // Block element node - set `blockText` to its text content.\n      if (Editor.hasInlines(editor, node)) {\n        // We always exhaust block nodes before encountering a new one:\n        //   console.assert(blockText === '',\n        //     `blockText='${blockText}' - `+\n        //     `not exhausted before new block node`, path)\n\n        // Ensure range considered is capped to `range`, in the\n        // start/end edge cases where block extends beyond range.\n        // Equivalent to this, but presumably more performant:\n        //   blockRange = Editor.range(editor, ...Editor.edges(editor, path))\n        //   blockRange = Range.intersection(range, blockRange) // intersect\n        //   blockText = Editor.string(editor, blockRange, { voids })\n        const e = Path.isAncestor(path, end.path)\n          ? end\n          : Editor.end(editor, path)\n        const s = Path.isAncestor(path, start.path)\n          ? start\n          : Editor.start(editor, path)\n\n        blockText = Editor.string(editor, { anchor: s, focus: e }, { voids })\n        isNewBlock = true\n      }\n    }\n\n    /*\n     * TEXT LEAF NODE - Iterate through text content, yielding\n     * positions every `distance` offset according to `unit`.\n     */\n    if (Text.isText(node)) {\n      const isFirst = Path.equals(path, first.path)\n\n      // Proof that we always exhaust text nodes before encountering a new one:\n      //   console.assert(leafTextRemaining <= 0,\n      //     `leafTextRemaining=${leafTextRemaining} - `+\n      //     `not exhausted before new leaf text node`, path)\n\n      // Reset `leafText` counters for new text node.\n      if (isFirst) {\n        leafTextRemaining = reverse\n          ? first.offset\n          : node.text.length - first.offset\n        leafTextOffset = first.offset // Works for reverse too.\n      } else {\n        leafTextRemaining = node.text.length\n        leafTextOffset = reverse ? leafTextRemaining : 0\n      }\n\n      // Yield position at the start of node (potentially).\n      if (isFirst || isNewBlock || unit === 'offset') {\n        yield { path, offset: leafTextOffset }\n        isNewBlock = false\n      }\n\n      // Yield positions every (dynamically calculated) `distance` offset.\n      while (true) {\n        // If `leafText` has caught up with `blockText` (distance=0),\n        // and if blockText is exhausted, break to get another block node,\n        // otherwise advance blockText forward by the new `distance`.\n        if (distance === 0) {\n          if (blockText === '') break\n          distance = calcDistance(blockText, unit, reverse)\n          // Split the string at the previously found distance and use the\n          // remaining string for the next iteration.\n          blockText = splitByCharacterDistance(blockText, distance, reverse)[1]\n        }\n\n        // Advance `leafText` by the current `distance`.\n        leafTextOffset = reverse\n          ? leafTextOffset - distance\n          : leafTextOffset + distance\n        leafTextRemaining = leafTextRemaining - distance\n\n        // If `leafText` is exhausted, break to get a new leaf node\n        // and set distance to the overflow amount, so we'll (maybe)\n        // catch up to blockText in the next leaf text node.\n        if (leafTextRemaining < 0) {\n          distance = -leafTextRemaining\n          break\n        }\n\n        // Successfully walked `distance` offsets through `leafText`\n        // to catch up with `blockText`, so we can reset `distance`\n        // and yield this position in this node.\n        distance = 0\n        yield { path, offset: leafTextOffset }\n      }\n    }\n  }\n  // Proof that upon completion, we've exahusted both leaf and block text:\n  //   console.assert(leafTextRemaining <= 0, \"leafText wasn't exhausted\")\n  //   console.assert(blockText === '', \"blockText wasn't exhausted\")\n\n  // Helper:\n  // Return the distance in offsets for a step of size `unit` on given string.\n  function calcDistance(text: string, unit: string, reverse?: boolean) {\n    if (unit === 'character') {\n      return getCharacterDistance(text, reverse)\n    } else if (unit === 'word') {\n      return getWordDistance(text, reverse)\n    } else if (unit === 'line' || unit === 'block') {\n      return text.length\n    }\n    return 1\n  }\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Span } from '../interfaces/location'\nimport { Path } from '../interfaces/path'\n\nexport const previous: EditorInterface['previous'] = (editor, options = {}) => {\n  const { mode = 'lowest', voids = false } = options\n  let { match, at = editor.selection } = options\n\n  if (!at) {\n    return\n  }\n\n  const pointBeforeLocation = Editor.before(editor, at, { voids })\n\n  if (!pointBeforeLocation) {\n    return\n  }\n\n  const [, to] = Editor.first(editor, [])\n\n  // The search location is from the start of the document to the path of\n  // the point before the location passed in\n  const span: Span = [pointBeforeLocation.path, to]\n\n  if (Path.isPath(at) && at.length === 0) {\n    throw new Error(`Cannot get the previous node from the root node!`)\n  }\n\n  if (match == null) {\n    if (Path.isPath(at)) {\n      const [parent] = Editor.parent(editor, at)\n      match = n => parent.children.includes(n)\n    } else {\n      match = () => true\n    }\n  }\n\n  const [previous] = Editor.nodes(editor, {\n    reverse: true,\n    at: span,\n    match,\n    mode,\n    voids,\n  })\n\n  return previous\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { RangeRef } from '../interfaces/range-ref'\n\nexport const rangeRef: EditorInterface['rangeRef'] = (\n  editor,\n  range,\n  options = {}\n) => {\n  const { affinity = 'forward' } = options\n  const ref: RangeRef = {\n    current: range,\n    affinity,\n    unref() {\n      const { current } = ref\n      const rangeRefs = Editor.rangeRefs(editor)\n      rangeRefs.delete(ref)\n      ref.current = null\n      return current\n    },\n  }\n\n  const refs = Editor.rangeRefs(editor)\n  refs.add(ref)\n  return ref\n}\n","import { EditorInterface } from '../interfaces/editor'\nimport { RANGE_REFS } from '../utils/weak-maps'\n\nexport const rangeRefs: EditorInterface['rangeRefs'] = editor => {\n  let refs = RANGE_REFS.get(editor)\n\n  if (!refs) {\n    refs = new Set()\n    RANGE_REFS.set(editor, refs)\n  }\n\n  return refs\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Range } from '../interfaces/range'\n\nexport const range: EditorInterface['range'] = (editor, at, to) => {\n  if (Range.isRange(at) && !to) {\n    return at\n  }\n\n  const start = Editor.start(editor, at)\n  const end = Editor.end(editor, to || at)\n  return { anchor: start, focus: end }\n}\n","import { Node } from '../interfaces/node'\nimport { Path } from '../interfaces/path'\nimport { Text } from '../interfaces/text'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\nimport { FLUSHING } from '../utils/weak-maps'\nimport { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const removeMark: EditorInterface['removeMark'] = (editor, key) => {\n  const { selection } = editor\n\n  if (selection) {\n    const match = (node: Node, path: Path) => {\n      if (!Text.isText(node)) {\n        return false // marks can only be applied to text\n      }\n      const [parentNode, parentPath] = Editor.parent(editor, path)\n      return !editor.isVoid(parentNode) || editor.markableVoid(parentNode)\n    }\n    const expandedSelection = Range.isExpanded(selection)\n    let markAcceptingVoidSelected = false\n    if (!expandedSelection) {\n      const [selectedNode, selectedPath] = Editor.node(editor, selection)\n      if (selectedNode && match(selectedNode, selectedPath)) {\n        const [parentNode] = Editor.parent(editor, selectedPath)\n        markAcceptingVoidSelected =\n          parentNode && editor.markableVoid(parentNode)\n      }\n    }\n    if (expandedSelection || markAcceptingVoidSelected) {\n      Transforms.unsetNodes(editor, key, {\n        match,\n        split: true,\n        voids: true,\n      })\n    } else {\n      const marks = { ...(Editor.marks(editor) || {}) }\n      delete marks[key]\n      editor.marks = marks\n      if (!FLUSHING.get(editor)) {\n        editor.onChange()\n      }\n    }\n  }\n}\n","import { EditorInterface } from '../interfaces/editor'\nimport { NORMALIZING } from '../utils/weak-maps'\n\nexport const setNormalizing: EditorInterface['setNormalizing'] = (\n  editor,\n  isNormalizing\n) => {\n  NORMALIZING.set(editor, isNormalizing)\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const start: EditorInterface['start'] = (editor, at) => {\n  return Editor.point(editor, at, { edge: 'start' })\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Range } from '../interfaces/range'\nimport { Text } from '../interfaces/text'\nimport { Path } from '../interfaces/path'\n\nexport const string: EditorInterface['string'] = (editor, at, options = {}) => {\n  const { voids = false } = options\n  const range = Editor.range(editor, at)\n  const [start, end] = Range.edges(range)\n  let text = ''\n\n  for (const [node, path] of Editor.nodes(editor, {\n    at: range,\n    match: Text.isText,\n    voids,\n  })) {\n    let t = node.text\n\n    if (Path.equals(path, end.path)) {\n      t = t.slice(0, end.offset)\n    }\n\n    if (Path.equals(path, start.path)) {\n      t = t.slice(start.offset)\n    }\n\n    text += t\n  }\n\n  return text\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Range } from '../interfaces/range'\nimport { Path } from '../interfaces/path'\nimport { Element } from '../interfaces/element'\nimport { Text } from '../interfaces/text'\n\nexport const unhangRange: EditorInterface['unhangRange'] = (\n  editor,\n  range,\n  options = {}\n) => {\n  const { voids = false } = options\n  let [start, end] = Range.edges(range)\n\n  // PERF: exit early if we can guarantee that the range isn't hanging.\n  if (\n    start.offset !== 0 ||\n    end.offset !== 0 ||\n    Range.isCollapsed(range) ||\n    Path.hasPrevious(end.path)\n  ) {\n    return range\n  }\n\n  const endBlock = Editor.above(editor, {\n    at: end,\n    match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n    voids,\n  })\n  const blockPath = endBlock ? endBlock[1] : []\n  const first = Editor.start(editor, start)\n  const before = { anchor: first, focus: end }\n  let skip = true\n\n  for (const [node, path] of Editor.nodes(editor, {\n    at: before,\n    match: Text.isText,\n    reverse: true,\n    voids,\n  })) {\n    if (skip) {\n      skip = false\n      continue\n    }\n\n    if (node.text !== '' || Path.isBefore(path, blockPath)) {\n      end = { path, offset: node.text.length }\n      break\n    }\n  }\n\n  return { anchor: start, focus: end }\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const withoutNormalizing: EditorInterface['withoutNormalizing'] = (\n  editor,\n  fn\n) => {\n  const value = Editor.isNormalizing(editor)\n  Editor.setNormalizing(editor, false)\n  try {\n    fn()\n  } finally {\n    Editor.setNormalizing(editor, value)\n  }\n  Editor.normalize(editor)\n}\n","import { TextTransforms } from '../interfaces/transforms/text'\nimport { Editor } from '../interfaces/editor'\nimport { Range } from '../interfaces/range'\nimport { Point } from '../interfaces/point'\nimport { Path } from '../interfaces/path'\nimport { Transforms } from '../interfaces/transforms'\nimport { Element } from '../interfaces/element'\nimport { NodeEntry } from '../interfaces/node'\n\nexport const deleteText: TextTransforms['delete'] = (editor, options = {}) => {\n  Editor.withoutNormalizing(editor, () => {\n    const {\n      reverse = false,\n      unit = 'character',\n      distance = 1,\n      voids = false,\n    } = options\n    let { at = editor.selection, hanging = false } = options\n\n    if (!at) {\n      return\n    }\n\n    let isCollapsed = false\n    if (Range.isRange(at) && Range.isCollapsed(at)) {\n      isCollapsed = true\n      at = at.anchor\n    }\n\n    if (Point.isPoint(at)) {\n      const furthestVoid = Editor.void(editor, { at, mode: 'highest' })\n\n      if (!voids && furthestVoid) {\n        const [, voidPath] = furthestVoid\n        at = voidPath\n      } else {\n        const opts = { unit, distance }\n        const target = reverse\n          ? Editor.before(editor, at, opts) || Editor.start(editor, [])\n          : Editor.after(editor, at, opts) || Editor.end(editor, [])\n        at = { anchor: at, focus: target }\n        hanging = true\n      }\n    }\n\n    if (Path.isPath(at)) {\n      Transforms.removeNodes(editor, { at, voids })\n      return\n    }\n\n    if (Range.isCollapsed(at)) {\n      return\n    }\n\n    if (!hanging) {\n      const [, end] = Range.edges(at)\n      const endOfDoc = Editor.end(editor, [])\n\n      if (!Point.equals(end, endOfDoc)) {\n        at = Editor.unhangRange(editor, at, { voids })\n      }\n    }\n\n    let [start, end] = Range.edges(at)\n    const startBlock = Editor.above(editor, {\n      match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n      at: start,\n      voids,\n    })\n    const endBlock = Editor.above(editor, {\n      match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n      at: end,\n      voids,\n    })\n    const isAcrossBlocks =\n      startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1])\n    const isSingleText = Path.equals(start.path, end.path)\n    const startNonEditable = voids\n      ? null\n      : Editor.void(editor, { at: start, mode: 'highest' }) ??\n        Editor.elementReadOnly(editor, { at: start, mode: 'highest' })\n    const endNonEditable = voids\n      ? null\n      : Editor.void(editor, { at: end, mode: 'highest' }) ??\n        Editor.elementReadOnly(editor, { at: end, mode: 'highest' })\n\n    // If the start or end points are inside an inline void, nudge them out.\n    if (startNonEditable) {\n      const before = Editor.before(editor, start)\n\n      if (before && startBlock && Path.isAncestor(startBlock[1], before.path)) {\n        start = before\n      }\n    }\n\n    if (endNonEditable) {\n      const after = Editor.after(editor, end)\n\n      if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {\n        end = after\n      }\n    }\n\n    // Get the highest nodes that are completely inside the range, as well as\n    // the start and end nodes.\n    const matches: NodeEntry[] = []\n    let lastPath: Path | undefined\n\n    for (const entry of Editor.nodes(editor, { at, voids })) {\n      const [node, path] = entry\n\n      if (lastPath && Path.compare(path, lastPath) === 0) {\n        continue\n      }\n\n      if (\n        (!voids &&\n          Element.isElement(node) &&\n          (Editor.isVoid(editor, node) ||\n            Editor.isElementReadOnly(editor, node))) ||\n        (!Path.isCommon(path, start.path) && !Path.isCommon(path, end.path))\n      ) {\n        matches.push(entry)\n        lastPath = path\n      }\n    }\n\n    const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n    const startRef = Editor.pointRef(editor, start)\n    const endRef = Editor.pointRef(editor, end)\n\n    let removedText = ''\n\n    if (!isSingleText && !startNonEditable) {\n      const point = startRef.current!\n      const [node] = Editor.leaf(editor, point)\n      const { path } = point\n      const { offset } = start\n      const text = node.text.slice(offset)\n      if (text.length > 0) {\n        editor.apply({ type: 'remove_text', path, offset, text })\n        removedText = text\n      }\n    }\n\n    pathRefs\n      .reverse()\n      .map(r => r.unref())\n      .filter((r): r is Path => r !== null)\n      .forEach(p => Transforms.removeNodes(editor, { at: p, voids }))\n\n    if (!endNonEditable) {\n      const point = endRef.current!\n      const [node] = Editor.leaf(editor, point)\n      const { path } = point\n      const offset = isSingleText ? start.offset : 0\n      const text = node.text.slice(offset, end.offset)\n      if (text.length > 0) {\n        editor.apply({ type: 'remove_text', path, offset, text })\n        removedText = text\n      }\n    }\n\n    if (!isSingleText && isAcrossBlocks && endRef.current && startRef.current) {\n      Transforms.mergeNodes(editor, {\n        at: endRef.current,\n        hanging: true,\n        voids,\n      })\n    }\n\n    // For Thai script, deleting N character(s) backward should delete\n    // N code point(s) instead of an entire grapheme cluster.\n    // Therefore, the remaining code points should be inserted back.\n    if (\n      isCollapsed &&\n      reverse &&\n      unit === 'character' &&\n      removedText.length > 1 &&\n      removedText.match(/[\\u0E00-\\u0E7F]+/)\n    ) {\n      Transforms.insertText(\n        editor,\n        removedText.slice(0, removedText.length - distance)\n      )\n    }\n\n    const startUnref = startRef.unref()\n    const endUnref = endRef.unref()\n    const point = reverse ? startUnref || endUnref : endUnref || startUnref\n\n    if (options.at == null && point) {\n      Transforms.select(editor, point)\n    }\n  })\n}\n","import { Transforms } from '../interfaces/transforms'\nimport { Editor } from '../interfaces/editor'\nimport { Range } from '../interfaces/range'\nimport { Path } from '../interfaces/path'\nimport { Element } from '../interfaces/element'\nimport { Node, NodeEntry } from '../interfaces/node'\nimport { Text } from '../interfaces/text'\nimport { TextTransforms } from '../interfaces/transforms/text'\nimport { getDefaultInsertLocation } from '../utils'\n\nexport const insertFragment: TextTransforms['insertFragment'] = (\n  editor,\n  fragment,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const { hanging = false, voids = false } = options\n    let { at = getDefaultInsertLocation(editor) } = options\n\n    if (!fragment.length) {\n      return\n    }\n\n    if (Range.isRange(at)) {\n      if (!hanging) {\n        at = Editor.unhangRange(editor, at, { voids })\n      }\n\n      if (Range.isCollapsed(at)) {\n        at = at.anchor\n      } else {\n        const [, end] = Range.edges(at)\n\n        if (!voids && Editor.void(editor, { at: end })) {\n          return\n        }\n\n        const pointRef = Editor.pointRef(editor, end)\n        Transforms.delete(editor, { at })\n        at = pointRef.unref()!\n      }\n    } else if (Path.isPath(at)) {\n      at = Editor.start(editor, at)\n    }\n\n    if (!voids && Editor.void(editor, { at })) {\n      return\n    }\n\n    // If the insert point is at the edge of an inline node, move it outside\n    // instead since it will need to be split otherwise.\n    const inlineElementMatch = Editor.above(editor, {\n      at,\n      match: n => Element.isElement(n) && Editor.isInline(editor, n),\n      mode: 'highest',\n      voids,\n    })\n\n    if (inlineElementMatch) {\n      const [, inlinePath] = inlineElementMatch\n\n      if (Editor.isEnd(editor, at, inlinePath)) {\n        const after = Editor.after(editor, inlinePath)!\n        at = after\n      } else if (Editor.isStart(editor, at, inlinePath)) {\n        const before = Editor.before(editor, inlinePath)!\n        at = before\n      }\n    }\n\n    const blockMatch = Editor.above(editor, {\n      match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n      at,\n      voids,\n    })!\n    const [, blockPath] = blockMatch\n    const isBlockStart = Editor.isStart(editor, at, blockPath)\n    const isBlockEnd = Editor.isEnd(editor, at, blockPath)\n    const isBlockEmpty = isBlockStart && isBlockEnd\n    const mergeStart = !isBlockStart || (isBlockStart && isBlockEnd)\n    const mergeEnd = !isBlockEnd\n    const [, firstPath] = Node.first({ children: fragment }, [])\n    const [, lastPath] = Node.last({ children: fragment }, [])\n\n    const matches: NodeEntry[] = []\n    const matcher = ([n, p]: NodeEntry) => {\n      const isRoot = p.length === 0\n      if (isRoot) {\n        return false\n      }\n\n      if (isBlockEmpty) {\n        return true\n      }\n\n      if (\n        mergeStart &&\n        Path.isAncestor(p, firstPath) &&\n        Element.isElement(n) &&\n        !editor.isVoid(n) &&\n        !editor.isInline(n)\n      ) {\n        return false\n      }\n\n      if (\n        mergeEnd &&\n        Path.isAncestor(p, lastPath) &&\n        Element.isElement(n) &&\n        !editor.isVoid(n) &&\n        !editor.isInline(n)\n      ) {\n        return false\n      }\n\n      return true\n    }\n\n    for (const entry of Node.nodes({ children: fragment }, { pass: matcher })) {\n      if (matcher(entry)) {\n        matches.push(entry)\n      }\n    }\n\n    const starts = []\n    const middles = []\n    const ends = []\n    let starting = true\n    let hasBlocks = false\n\n    for (const [node] of matches) {\n      if (Element.isElement(node) && !editor.isInline(node)) {\n        starting = false\n        hasBlocks = true\n        middles.push(node)\n      } else if (starting) {\n        starts.push(node)\n      } else {\n        ends.push(node)\n      }\n    }\n\n    const [inlineMatch] = Editor.nodes(editor, {\n      at,\n      match: n => Text.isText(n) || Editor.isInline(editor, n),\n      mode: 'highest',\n      voids,\n    })!\n\n    const [, inlinePath] = inlineMatch\n    const isInlineStart = Editor.isStart(editor, at, inlinePath)\n    const isInlineEnd = Editor.isEnd(editor, at, inlinePath)\n\n    const middleRef = Editor.pathRef(\n      editor,\n      isBlockEnd && !ends.length ? Path.next(blockPath) : blockPath\n    )\n\n    const endRef = Editor.pathRef(\n      editor,\n      isInlineEnd ? Path.next(inlinePath) : inlinePath\n    )\n\n    Transforms.splitNodes(editor, {\n      at,\n      match: n =>\n        hasBlocks\n          ? Element.isElement(n) && Editor.isBlock(editor, n)\n          : Text.isText(n) || Editor.isInline(editor, n),\n      mode: hasBlocks ? 'lowest' : 'highest',\n      always:\n        hasBlocks &&\n        (!isBlockStart || starts.length > 0) &&\n        (!isBlockEnd || ends.length > 0),\n      voids,\n    })\n\n    const startRef = Editor.pathRef(\n      editor,\n      !isInlineStart || (isInlineStart && isInlineEnd)\n        ? Path.next(inlinePath)\n        : inlinePath\n    )\n\n    Transforms.insertNodes(editor, starts, {\n      at: startRef.current!,\n      match: n => Text.isText(n) || Editor.isInline(editor, n),\n      mode: 'highest',\n      voids,\n    })\n\n    if (isBlockEmpty && !starts.length && middles.length && !ends.length) {\n      Transforms.delete(editor, { at: blockPath, voids })\n    }\n\n    Transforms.insertNodes(editor, middles, {\n      at: middleRef.current!,\n      match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n      mode: 'lowest',\n      voids,\n    })\n\n    Transforms.insertNodes(editor, ends, {\n      at: endRef.current!,\n      match: n => Text.isText(n) || Editor.isInline(editor, n),\n      mode: 'highest',\n      voids,\n    })\n\n    if (!options.at) {\n      let path\n\n      if (ends.length > 0 && endRef.current) {\n        path = Path.previous(endRef.current)\n      } else if (middles.length > 0 && middleRef.current) {\n        path = Path.previous(middleRef.current)\n      } else if (startRef.current) {\n        path = Path.previous(startRef.current)\n      }\n\n      if (path) {\n        const end = Editor.end(editor, path)\n        Transforms.select(editor, end)\n      }\n    }\n\n    startRef.unref()\n    middleRef.unref()\n    endRef.unref()\n  })\n}\n","import { SelectionTransforms } from '../interfaces/transforms/selection'\nimport { Transforms } from '../interfaces/transforms'\nimport { Range } from '../interfaces/range'\n\nexport const collapse: SelectionTransforms['collapse'] = (\n  editor,\n  options = {}\n) => {\n  const { edge = 'anchor' } = options\n  const { selection } = editor\n\n  if (!selection) {\n    return\n  } else if (edge === 'anchor') {\n    Transforms.select(editor, selection.anchor)\n  } else if (edge === 'focus') {\n    Transforms.select(editor, selection.focus)\n  } else if (edge === 'start') {\n    const [start] = Range.edges(selection)\n    Transforms.select(editor, start)\n  } else if (edge === 'end') {\n    const [, end] = Range.edges(selection)\n    Transforms.select(editor, end)\n  }\n}\n","import { SelectionTransforms } from '../interfaces/transforms/selection'\n\nexport const deselect: SelectionTransforms['deselect'] = editor => {\n  const { selection } = editor\n\n  if (selection) {\n    editor.apply({\n      type: 'set_selection',\n      properties: selection,\n      newProperties: null,\n    })\n  }\n}\n","import { SelectionTransforms } from '../interfaces/transforms/selection'\nimport { Range } from '../interfaces/range'\nimport { Editor } from '../interfaces/editor'\nimport { Transforms } from '../interfaces/transforms'\n\nexport const move: SelectionTransforms['move'] = (editor, options = {}) => {\n  const { selection } = editor\n  const { distance = 1, unit = 'character', reverse = false } = options\n  let { edge = null } = options\n\n  if (!selection) {\n    return\n  }\n\n  if (edge === 'start') {\n    edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n  }\n\n  if (edge === 'end') {\n    edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n  }\n\n  const { anchor, focus } = selection\n  const opts = { distance, unit, ignoreNonSelectable: true }\n  const props: Partial<Range> = {}\n\n  if (edge == null || edge === 'anchor') {\n    const point = reverse\n      ? Editor.before(editor, anchor, opts)\n      : Editor.after(editor, anchor, opts)\n\n    if (point) {\n      props.anchor = point\n    }\n  }\n\n  if (edge == null || edge === 'focus') {\n    const point = reverse\n      ? Editor.before(editor, focus, opts)\n      : Editor.after(editor, focus, opts)\n\n    if (point) {\n      props.focus = point\n    }\n  }\n\n  Transforms.setSelection(editor, props)\n}\n","import { SelectionTransforms } from '../interfaces/transforms/selection'\nimport { Editor } from '../interfaces/editor'\nimport { Transforms } from '../interfaces/transforms'\nimport { Range } from '../interfaces/range'\nimport { Scrubber } from '../interfaces/scrubber'\n\nexport const select: SelectionTransforms['select'] = (editor, target) => {\n  const { selection } = editor\n  target = Editor.range(editor, target)\n\n  if (selection) {\n    Transforms.setSelection(editor, target)\n    return\n  }\n\n  if (!Range.isRange(target)) {\n    throw new Error(\n      `When setting the selection and the current selection is \\`null\\` you must provide at least an \\`anchor\\` and \\`focus\\`, but you passed: ${Scrubber.stringify(\n        target\n      )}`\n    )\n  }\n\n  editor.apply({\n    type: 'set_selection',\n    properties: selection,\n    newProperties: target,\n  })\n}\n","import { SelectionTransforms } from '../interfaces/transforms/selection'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\n\nexport const setPoint: SelectionTransforms['setPoint'] = (\n  editor,\n  props,\n  options = {}\n) => {\n  const { selection } = editor\n  let { edge = 'both' } = options\n\n  if (!selection) {\n    return\n  }\n\n  if (edge === 'start') {\n    edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n  }\n\n  if (edge === 'end') {\n    edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n  }\n\n  const { anchor, focus } = selection\n  const point = edge === 'anchor' ? anchor : focus\n\n  Transforms.setSelection(editor, {\n    [edge === 'anchor' ? 'anchor' : 'focus']: { ...point, ...props },\n  })\n}\n","import { SelectionTransforms } from '../interfaces/transforms/selection'\nimport { Range } from '../interfaces/range'\nimport { Point } from '../interfaces/point'\n\nexport const setSelection: SelectionTransforms['setSelection'] = (\n  editor,\n  props\n) => {\n  const { selection } = editor\n  const oldProps: Partial<Range> | null = {}\n  const newProps: Partial<Range> = {}\n\n  if (!selection) {\n    return\n  }\n\n  for (const k in props) {\n    if (\n      (k === 'anchor' &&\n        props.anchor != null &&\n        !Point.equals(props.anchor, selection.anchor)) ||\n      (k === 'focus' &&\n        props.focus != null &&\n        !Point.equals(props.focus, selection.focus)) ||\n      (k !== 'anchor' && k !== 'focus' && props[k] !== selection[k])\n    ) {\n      oldProps[k] = selection[k]\n      newProps[k] = props[k]\n    }\n  }\n\n  if (Object.keys(oldProps).length > 0) {\n    editor.apply({\n      type: 'set_selection',\n      properties: oldProps,\n      newProperties: newProps,\n    })\n  }\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Node } from '../interfaces/node'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\nimport { Point } from '../interfaces/point'\nimport { Text } from '../interfaces/text'\nimport { Element } from '../interfaces/element'\nimport { Path } from '../interfaces/path'\nimport { getDefaultInsertLocation } from '../utils'\n\nexport const insertNodes: NodeTransforms['insertNodes'] = (\n  editor,\n  nodes,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const { hanging = false, voids = false, mode = 'lowest' } = options\n    let { at, match, select } = options\n\n    if (Node.isNode(nodes)) {\n      nodes = [nodes]\n    }\n\n    if (nodes.length === 0) {\n      return\n    }\n\n    const [node] = nodes\n\n    if (!at) {\n      at = getDefaultInsertLocation(editor)\n      select = true\n    }\n\n    if (select == null) {\n      select = false\n    }\n\n    if (Range.isRange(at)) {\n      if (!hanging) {\n        at = Editor.unhangRange(editor, at, { voids })\n      }\n\n      if (Range.isCollapsed(at)) {\n        at = at.anchor\n      } else {\n        const [, end] = Range.edges(at)\n        const pointRef = Editor.pointRef(editor, end)\n        Transforms.delete(editor, { at })\n        at = pointRef.unref()!\n      }\n    }\n\n    if (Point.isPoint(at)) {\n      if (match == null) {\n        if (Text.isText(node)) {\n          match = n => Text.isText(n)\n        } else if (editor.isInline(node)) {\n          match = n => Text.isText(n) || Editor.isInline(editor, n)\n        } else {\n          match = n => Element.isElement(n) && Editor.isBlock(editor, n)\n        }\n      }\n\n      const [entry] = Editor.nodes(editor, {\n        at: at.path,\n        match,\n        mode,\n        voids,\n      })\n\n      if (entry) {\n        const [, matchPath] = entry\n        const pathRef = Editor.pathRef(editor, matchPath)\n        const isAtEnd = Editor.isEnd(editor, at, matchPath)\n        Transforms.splitNodes(editor, { at, match, mode, voids })\n        const path = pathRef.unref()!\n        at = isAtEnd ? Path.next(path) : path\n      } else {\n        return\n      }\n    }\n\n    const parentPath = Path.parent(at)\n    let index = at[at.length - 1]\n\n    if (!voids && Editor.void(editor, { at: parentPath })) {\n      return\n    }\n\n    for (const node of nodes) {\n      const path = parentPath.concat(index)\n      index++\n      editor.apply({ type: 'insert_node', path, node })\n      at = Path.next(at)\n    }\n    at = Path.previous(at)\n\n    if (select) {\n      const point = Editor.end(editor, at)\n\n      if (point) {\n        Transforms.select(editor, point)\n      }\n    }\n  })\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { matchPath } from '../utils/match-path'\nimport { Element } from '../interfaces/element'\nimport { Ancestor, NodeEntry } from '../interfaces/node'\nimport { Transforms } from '../interfaces/transforms'\n\nexport const liftNodes: NodeTransforms['liftNodes'] = (\n  editor,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const { at = editor.selection, mode = 'lowest', voids = false } = options\n    let { match } = options\n\n    if (match == null) {\n      match = Path.isPath(at)\n        ? matchPath(editor, at)\n        : n => Element.isElement(n) && Editor.isBlock(editor, n)\n    }\n\n    if (!at) {\n      return\n    }\n\n    const matches = Editor.nodes(editor, { at, match, mode, voids })\n    const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n    for (const pathRef of pathRefs) {\n      const path = pathRef.unref()!\n\n      if (path.length < 2) {\n        throw new Error(\n          `Cannot lift node at a path [${path}] because it has a depth of less than \\`2\\`.`\n        )\n      }\n\n      const parentNodeEntry = Editor.node(editor, Path.parent(path))\n      const [parent, parentPath] = parentNodeEntry as NodeEntry<Ancestor>\n      const index = path[path.length - 1]\n      const { length } = parent.children\n\n      if (length === 1) {\n        const toPath = Path.next(parentPath)\n        Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        Transforms.removeNodes(editor, { at: parentPath, voids })\n      } else if (index === 0) {\n        Transforms.moveNodes(editor, { at: path, to: parentPath, voids })\n      } else if (index === length - 1) {\n        const toPath = Path.next(parentPath)\n        Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n      } else {\n        const splitPath = Path.next(path)\n        const toPath = Path.next(parentPath)\n        Transforms.splitNodes(editor, { at: splitPath, voids })\n        Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n      }\n    }\n  })\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { Element } from '../interfaces/element'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\nimport { Text } from '../interfaces/text'\nimport { Scrubber } from '../interfaces/scrubber'\nimport { Node } from '../interfaces/node'\n\nconst hasSingleChildNest = (editor: Editor, node: Node): boolean => {\n  if (Element.isElement(node)) {\n    const element = node as Element\n    if (Editor.isVoid(editor, node)) {\n      return true\n    } else if (element.children.length === 1) {\n      return hasSingleChildNest(editor, element.children[0])\n    } else {\n      return false\n    }\n  } else if (Editor.isEditor(node)) {\n    return false\n  } else {\n    return true\n  }\n}\n\nexport const mergeNodes: NodeTransforms['mergeNodes'] = (\n  editor,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    let { match, at = editor.selection } = options\n    const { hanging = false, voids = false, mode = 'lowest' } = options\n\n    if (!at) {\n      return\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = n => Element.isElement(n) && Editor.isBlock(editor, n)\n      }\n    }\n\n    if (!hanging && Range.isRange(at)) {\n      at = Editor.unhangRange(editor, at, { voids })\n    }\n\n    if (Range.isRange(at)) {\n      if (Range.isCollapsed(at)) {\n        at = at.anchor\n      } else {\n        const [, end] = Range.edges(at)\n        const pointRef = Editor.pointRef(editor, end)\n        Transforms.delete(editor, { at })\n        at = pointRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n    }\n\n    const [current] = Editor.nodes(editor, { at, match, voids, mode })\n    const prev = Editor.previous(editor, { at, match, voids, mode })\n\n    if (!current || !prev) {\n      return\n    }\n\n    const [node, path] = current\n    const [prevNode, prevPath] = prev\n\n    if (path.length === 0 || prevPath.length === 0) {\n      return\n    }\n\n    const newPath = Path.next(prevPath)\n    const commonPath = Path.common(path, prevPath)\n    const isPreviousSibling = Path.isSibling(path, prevPath)\n    const levels = Array.from(Editor.levels(editor, { at: path }), ([n]) => n)\n      .slice(commonPath.length)\n      .slice(0, -1)\n\n    // Determine if the merge will leave an ancestor of the path empty as a\n    // result, in which case we'll want to remove it after merging.\n    const emptyAncestor = Editor.above(editor, {\n      at: path,\n      mode: 'highest',\n      match: n => levels.includes(n) && hasSingleChildNest(editor, n),\n    })\n\n    const emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1])\n    let properties\n    let position\n\n    // Ensure that the nodes are equivalent, and figure out what the position\n    // and extra properties of the merge will be.\n    if (Text.isText(node) && Text.isText(prevNode)) {\n      const { text, ...rest } = node\n      position = prevNode.text.length\n      properties = rest as Partial<Text>\n    } else if (Element.isElement(node) && Element.isElement(prevNode)) {\n      const { children, ...rest } = node\n      position = prevNode.children.length\n      properties = rest as Partial<Element>\n    } else {\n      throw new Error(\n        `Cannot merge the node at path [${path}] with the previous sibling because it is not the same kind: ${Scrubber.stringify(\n          node\n        )} ${Scrubber.stringify(prevNode)}`\n      )\n    }\n\n    // If the node isn't already the next sibling of the previous node, move\n    // it so that it is before merging.\n    if (!isPreviousSibling) {\n      Transforms.moveNodes(editor, { at: path, to: newPath, voids })\n    }\n\n    // If there was going to be an empty ancestor of the node that was merged,\n    // we remove it from the tree.\n    if (emptyRef) {\n      Transforms.removeNodes(editor, { at: emptyRef.current!, voids })\n    }\n\n    // If the target node that we're merging with is empty, remove it instead\n    // of merging the two. This is a common rich text editor behavior to\n    // prevent losing formatting when deleting entire nodes when you have a\n    // hanging selection.\n    // if prevNode is first child in parent,don't remove it.\n    if (\n      (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode)) ||\n      (Text.isText(prevNode) &&\n        prevNode.text === '' &&\n        prevPath[prevPath.length - 1] !== 0)\n    ) {\n      Transforms.removeNodes(editor, { at: prevPath, voids })\n    } else {\n      editor.apply({\n        type: 'merge_node',\n        path: newPath,\n        position,\n        properties,\n      })\n    }\n\n    if (emptyRef) {\n      emptyRef.unref()\n    }\n  })\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { matchPath } from '../utils/match-path'\nimport { Element } from '../interfaces/element'\n\nexport const moveNodes: NodeTransforms['moveNodes'] = (editor, options) => {\n  Editor.withoutNormalizing(editor, () => {\n    const {\n      to,\n      at = editor.selection,\n      mode = 'lowest',\n      voids = false,\n    } = options\n    let { match } = options\n\n    if (!at) {\n      return\n    }\n\n    if (match == null) {\n      match = Path.isPath(at)\n        ? matchPath(editor, at)\n        : n => Element.isElement(n) && Editor.isBlock(editor, n)\n    }\n\n    const toRef = Editor.pathRef(editor, to)\n    const targets = Editor.nodes(editor, { at, match, mode, voids })\n    const pathRefs = Array.from(targets, ([, p]) => Editor.pathRef(editor, p))\n\n    for (const pathRef of pathRefs) {\n      const path = pathRef.unref()!\n      const newPath = toRef.current!\n\n      if (path.length !== 0) {\n        editor.apply({ type: 'move_node', path, newPath })\n      }\n\n      if (\n        toRef.current &&\n        Path.isSibling(newPath, path) &&\n        Path.isAfter(newPath, path)\n      ) {\n        // When performing a sibling move to a later index, the path at the destination is shifted\n        // to before the insertion point instead of after. To ensure our group of nodes are inserted\n        // in the correct order we increment toRef to account for that\n        toRef.current = Path.next(toRef.current)\n      }\n    }\n\n    toRef.unref()\n  })\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { matchPath } from '../utils/match-path'\nimport { Element } from '../interfaces/element'\nimport { Range } from '../interfaces/range'\n\nexport const removeNodes: NodeTransforms['removeNodes'] = (\n  editor,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const { hanging = false, voids = false, mode = 'lowest' } = options\n    let { at = editor.selection, match } = options\n\n    if (!at) {\n      return\n    }\n\n    if (match == null) {\n      match = Path.isPath(at)\n        ? matchPath(editor, at)\n        : n => Element.isElement(n) && Editor.isBlock(editor, n)\n    }\n\n    if (!hanging && Range.isRange(at)) {\n      at = Editor.unhangRange(editor, at, { voids })\n    }\n\n    const depths = Editor.nodes(editor, { at, match, mode, voids })\n    const pathRefs = Array.from(depths, ([, p]) => Editor.pathRef(editor, p))\n\n    for (const pathRef of pathRefs) {\n      const path = pathRef.unref()!\n\n      if (path) {\n        const [node] = Editor.node(editor, path)\n        editor.apply({ type: 'remove_node', path, node })\n      }\n    }\n  })\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { matchPath } from '../utils/match-path'\nimport { Element } from '../interfaces/element'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\nimport { Node } from '../interfaces/node'\n\nexport const setNodes: NodeTransforms['setNodes'] = (\n  editor,\n  props: Partial<Node>,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    let { match, at = editor.selection, compare, merge } = options\n    const {\n      hanging = false,\n      mode = 'lowest',\n      split = false,\n      voids = false,\n    } = options\n\n    if (!at) {\n      return\n    }\n\n    if (match == null) {\n      match = Path.isPath(at)\n        ? matchPath(editor, at)\n        : n => Element.isElement(n) && Editor.isBlock(editor, n)\n    }\n\n    if (!hanging && Range.isRange(at)) {\n      at = Editor.unhangRange(editor, at, { voids })\n    }\n\n    if (split && Range.isRange(at)) {\n      if (\n        Range.isCollapsed(at) &&\n        Editor.leaf(editor, at.anchor)[0].text.length > 0\n      ) {\n        // If the range is collapsed in a non-empty node and 'split' is true, there's nothing to\n        // set that won't get normalized away\n        return\n      }\n      const rangeRef = Editor.rangeRef(editor, at, { affinity: 'inward' })\n      const [start, end] = Range.edges(at)\n      const splitMode = mode === 'lowest' ? 'lowest' : 'highest'\n      const endAtEndOfNode = Editor.isEnd(editor, end, end.path)\n      Transforms.splitNodes(editor, {\n        at: end,\n        match,\n        mode: splitMode,\n        voids,\n        always: !endAtEndOfNode,\n      })\n      const startAtStartOfNode = Editor.isStart(editor, start, start.path)\n      Transforms.splitNodes(editor, {\n        at: start,\n        match,\n        mode: splitMode,\n        voids,\n        always: !startAtStartOfNode,\n      })\n      at = rangeRef.unref()!\n\n      if (options.at == null) {\n        Transforms.select(editor, at)\n      }\n    }\n\n    if (!compare) {\n      compare = (prop, nodeProp) => prop !== nodeProp\n    }\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at,\n      match,\n      mode,\n      voids,\n    })) {\n      const properties: Partial<Node> = {}\n      const newProperties: Partial<Node> = {}\n\n      // You can't set properties on the editor node.\n      if (path.length === 0) {\n        continue\n      }\n\n      let hasChanges = false\n\n      for (const k in props) {\n        if (k === 'children' || k === 'text') {\n          continue\n        }\n\n        if (compare(props[k], node[k])) {\n          hasChanges = true\n          // Omit new properties from the old properties list\n          if (node.hasOwnProperty(k)) properties[k] = node[k]\n          // Omit properties that have been removed from the new properties list\n          if (merge) {\n            if (props[k] != null) newProperties[k] = merge(node[k], props[k])\n          } else {\n            if (props[k] != null) newProperties[k] = props[k]\n          }\n        }\n      }\n\n      if (hasChanges) {\n        editor.apply({\n          type: 'set_node',\n          path,\n          properties,\n          newProperties,\n        })\n      }\n    }\n  })\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Element } from '../interfaces/element'\nimport { Range } from '../interfaces/range'\nimport { Path } from '../interfaces/path'\nimport { PointRef } from '../interfaces/point-ref'\nimport { Transforms } from '../interfaces/transforms'\nimport { Node } from '../interfaces/node'\nimport { Point } from '../interfaces/point'\n\n/**\n * Convert a range into a point by deleting it's content.\n */\nconst deleteRange = (editor: Editor, range: Range): Point | null => {\n  if (Range.isCollapsed(range)) {\n    return range.anchor\n  } else {\n    const [, end] = Range.edges(range)\n    const pointRef = Editor.pointRef(editor, end)\n    Transforms.delete(editor, { at: range })\n    return pointRef.unref()\n  }\n}\n\nexport const splitNodes: NodeTransforms['splitNodes'] = (\n  editor,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection, height = 0, always = false } = options\n\n    if (match == null) {\n      match = n => Element.isElement(n) && Editor.isBlock(editor, n)\n    }\n\n    if (Range.isRange(at)) {\n      at = deleteRange(editor, at)\n    }\n\n    // If the target is a path, the default height-skipping and position\n    // counters need to account for us potentially splitting at a non-leaf.\n    if (Path.isPath(at)) {\n      const path = at\n      const point = Editor.point(editor, path)\n      const [parent] = Editor.parent(editor, path)\n      match = n => n === parent\n      height = point.path.length - path.length + 1\n      at = point\n      always = true\n    }\n\n    if (!at) {\n      return\n    }\n\n    const beforeRef = Editor.pointRef(editor, at, {\n      affinity: 'backward',\n    })\n    let afterRef: PointRef | undefined\n    try {\n      const [highest] = Editor.nodes(editor, { at, match, mode, voids })\n\n      if (!highest) {\n        return\n      }\n\n      const voidMatch = Editor.void(editor, { at, mode: 'highest' })\n      const nudge = 0\n\n      if (!voids && voidMatch) {\n        const [voidNode, voidPath] = voidMatch\n\n        if (Element.isElement(voidNode) && editor.isInline(voidNode)) {\n          let after = Editor.after(editor, voidPath)\n\n          if (!after) {\n            const text = { text: '' }\n            const afterPath = Path.next(voidPath)\n            Transforms.insertNodes(editor, text, { at: afterPath, voids })\n            after = Editor.point(editor, afterPath)!\n          }\n\n          at = after\n          always = true\n        }\n\n        const siblingHeight = at.path.length - voidPath.length\n        height = siblingHeight + 1\n        always = true\n      }\n\n      afterRef = Editor.pointRef(editor, at)\n      const depth = at.path.length - height\n      const [, highestPath] = highest\n      const lowestPath = at.path.slice(0, depth)\n      let position = height === 0 ? at.offset : at.path[depth] + nudge\n\n      for (const [node, path] of Editor.levels(editor, {\n        at: lowestPath,\n        reverse: true,\n        voids,\n      })) {\n        let split = false\n\n        if (\n          path.length < highestPath.length ||\n          path.length === 0 ||\n          (!voids && Element.isElement(node) && Editor.isVoid(editor, node))\n        ) {\n          break\n        }\n\n        const point = beforeRef.current!\n        const isEnd = Editor.isEnd(editor, point, path)\n\n        if (always || !beforeRef || !Editor.isEdge(editor, point, path)) {\n          split = true\n          const properties = Node.extractProps(node)\n          editor.apply({\n            type: 'split_node',\n            path,\n            position,\n            properties,\n          })\n        }\n\n        position = path[path.length - 1] + (split || isEnd ? 1 : 0)\n      }\n\n      if (options.at == null) {\n        const point = afterRef.current || Editor.end(editor, [])\n        Transforms.select(editor, point)\n      }\n    } finally {\n      beforeRef.unref()\n      afterRef?.unref()\n    }\n  })\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Transforms } from '../interfaces/transforms'\n\nexport const unsetNodes: NodeTransforms['unsetNodes'] = (\n  editor,\n  props,\n  options = {}\n) => {\n  if (!Array.isArray(props)) {\n    props = [props]\n  }\n\n  const obj = {}\n\n  for (const key of props) {\n    obj[key] = null\n  }\n\n  Transforms.setNodes(editor, obj, options)\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { matchPath } from '../utils/match-path'\nimport { Element } from '../interfaces/element'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\n\nexport const unwrapNodes: NodeTransforms['unwrapNodes'] = (\n  editor,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const { mode = 'lowest', split = false, voids = false } = options\n    let { at = editor.selection, match } = options\n\n    if (!at) {\n      return\n    }\n\n    if (match == null) {\n      match = Path.isPath(at)\n        ? matchPath(editor, at)\n        : n => Element.isElement(n) && Editor.isBlock(editor, n)\n    }\n\n    if (Path.isPath(at)) {\n      at = Editor.range(editor, at)\n    }\n\n    const rangeRef = Range.isRange(at) ? Editor.rangeRef(editor, at) : null\n    const matches = Editor.nodes(editor, { at, match, mode, voids })\n    const pathRefs = Array.from(\n      matches,\n      ([, p]) => Editor.pathRef(editor, p)\n      // unwrapNode will call liftNode which does not support splitting the node when nested.\n      // If we do not reverse the order and call it from top to the bottom, it will remove all blocks\n      // that wrap target node. So we reverse the order.\n    ).reverse()\n\n    for (const pathRef of pathRefs) {\n      const path = pathRef.unref()!\n      const [node] = Editor.node(editor, path)\n      let range = Editor.range(editor, path)\n\n      if (split && rangeRef) {\n        range = Range.intersection(rangeRef.current!, range)!\n      }\n\n      Transforms.liftNodes(editor, {\n        at: range,\n        match: n => Element.isAncestor(node) && node.children.includes(n),\n        voids,\n      })\n    }\n\n    if (rangeRef) {\n      rangeRef.unref()\n    }\n  })\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { matchPath } from '../utils/match-path'\nimport { Element } from '../interfaces/element'\nimport { Text } from '../interfaces/text'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\n\nexport const wrapNodes: NodeTransforms['wrapNodes'] = (\n  editor,\n  element,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const { mode = 'lowest', split = false, voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        match = matchPath(editor, at)\n      } else if (editor.isInline(element)) {\n        match = n =>\n          (Element.isElement(n) && Editor.isInline(editor, n)) || Text.isText(n)\n      } else {\n        match = n => Element.isElement(n) && Editor.isBlock(editor, n)\n      }\n    }\n\n    if (split && Range.isRange(at)) {\n      const [start, end] = Range.edges(at)\n      const rangeRef = Editor.rangeRef(editor, at, {\n        affinity: 'inward',\n      })\n      Transforms.splitNodes(editor, { at: end, match, voids })\n      Transforms.splitNodes(editor, { at: start, match, voids })\n      at = rangeRef.unref()!\n\n      if (options.at == null) {\n        Transforms.select(editor, at)\n      }\n    }\n\n    const roots = Array.from(\n      Editor.nodes(editor, {\n        at,\n        match: editor.isInline(element)\n          ? n => Element.isElement(n) && Editor.isBlock(editor, n)\n          : n => Editor.isEditor(n),\n        mode: 'lowest',\n        voids,\n      })\n    )\n\n    for (const [, rootPath] of roots) {\n      const a = Range.isRange(at)\n        ? Range.intersection(at, Editor.range(editor, rootPath))\n        : at\n\n      if (!a) {\n        continue\n      }\n\n      const matches = Array.from(\n        Editor.nodes(editor, { at: a, match, mode, voids })\n      )\n\n      if (matches.length > 0) {\n        const [first] = matches\n        const last = matches[matches.length - 1]\n        const [, firstPath] = first\n        const [, lastPath] = last\n\n        if (firstPath.length === 0 && lastPath.length === 0) {\n          // if there's no matching parent - usually means the node is an editor - don't do anything\n          continue\n        }\n\n        const commonPath = Path.equals(firstPath, lastPath)\n          ? Path.parent(firstPath)\n          : Path.common(firstPath, lastPath)\n\n        const range = Editor.range(editor, firstPath, lastPath)\n        const commonNodeEntry = Editor.node(editor, commonPath)\n        const [commonNode] = commonNodeEntry\n        const depth = commonPath.length + 1\n        const wrapperPath = Path.next(lastPath.slice(0, depth))\n        const wrapper = { ...element, children: [] }\n        Transforms.insertNodes(editor, wrapper, { at: wrapperPath, voids })\n\n        Transforms.moveNodes(editor, {\n          at: range,\n          match: n =>\n            Element.isAncestor(commonNode) && commonNode.children.includes(n),\n          to: wrapperPath.concat(0),\n          voids,\n        })\n      }\n    }\n  })\n}\n","import {\n  addMark,\n  deleteFragment,\n  Editor,\n  getDirtyPaths,\n  getFragment,\n  insertBreak,\n  insertFragment,\n  insertNode,\n  insertSoftBreak,\n  insertText,\n  normalizeNode,\n  removeMark,\n  shouldNormalize,\n} from './'\nimport { apply } from './core'\nimport {\n  above,\n  after,\n  before,\n  deleteBackward,\n  deleteForward,\n  edges,\n  elementReadOnly,\n  end,\n  first,\n  fragment,\n  getVoid,\n  hasBlocks,\n  hasInlines,\n  hasPath,\n  hasTexts,\n  isBlock,\n  isEdge,\n  isEmpty,\n  isEnd,\n  isNormalizing,\n  isStart,\n  last,\n  leaf,\n  levels,\n  marks,\n  next,\n  node,\n  nodes,\n  normalize,\n  parent,\n  path,\n  pathRef,\n  pathRefs,\n  point,\n  pointRef,\n  pointRefs,\n  positions,\n  previous,\n  range,\n  rangeRef,\n  rangeRefs,\n  setNormalizing,\n  start,\n  string,\n  unhangRange,\n  withoutNormalizing,\n} from './editor'\nimport { deleteText } from './transforms-text'\nimport {\n  collapse,\n  deselect,\n  move,\n  select,\n  setPoint,\n  setSelection,\n} from './transforms-selection'\nimport {\n  insertNodes,\n  liftNodes,\n  mergeNodes,\n  moveNodes,\n  removeNodes,\n  setNodes,\n  splitNodes,\n  unsetNodes,\n  unwrapNodes,\n  wrapNodes,\n} from './transforms-node'\n\n/**\n * Create a new Slate `Editor` object.\n */\nexport const createEditor = (): Editor => {\n  const editor: Editor = {\n    children: [],\n    operations: [],\n    selection: null,\n    marks: null,\n    isElementReadOnly: () => false,\n    isInline: () => false,\n    isSelectable: () => true,\n    isVoid: () => false,\n    markableVoid: () => false,\n    onChange: () => {},\n\n    // Core\n    apply: (...args) => apply(editor, ...args),\n\n    // Editor\n    addMark: (...args) => addMark(editor, ...args),\n    deleteBackward: (...args) => deleteBackward(editor, ...args),\n    deleteForward: (...args) => deleteForward(editor, ...args),\n    deleteFragment: (...args) => deleteFragment(editor, ...args),\n    getFragment: (...args) => getFragment(editor, ...args),\n    insertBreak: (...args) => insertBreak(editor, ...args),\n    insertSoftBreak: (...args) => insertSoftBreak(editor, ...args),\n    insertFragment: (...args) => insertFragment(editor, ...args),\n    insertNode: (...args) => insertNode(editor, ...args),\n    insertText: (...args) => insertText(editor, ...args),\n    normalizeNode: (...args) => normalizeNode(editor, ...args),\n    removeMark: (...args) => removeMark(editor, ...args),\n    getDirtyPaths: (...args) => getDirtyPaths(editor, ...args),\n    shouldNormalize: (...args) => shouldNormalize(editor, ...args),\n\n    // Editor interface\n    above: (...args) => above(editor, ...args),\n    after: (...args) => after(editor, ...args),\n    before: (...args) => before(editor, ...args),\n    collapse: (...args) => collapse(editor, ...args),\n    delete: (...args) => deleteText(editor, ...args),\n    deselect: (...args) => deselect(editor, ...args),\n    edges: (...args) => edges(editor, ...args),\n    elementReadOnly: (...args) => elementReadOnly(editor, ...args),\n    end: (...args) => end(editor, ...args),\n    first: (...args) => first(editor, ...args),\n    fragment: (...args) => fragment(editor, ...args),\n    getMarks: (...args) => marks(editor, ...args),\n    hasBlocks: (...args) => hasBlocks(editor, ...args),\n    hasInlines: (...args) => hasInlines(editor, ...args),\n    hasPath: (...args) => hasPath(editor, ...args),\n    hasTexts: (...args) => hasTexts(editor, ...args),\n    insertNodes: (...args) => insertNodes(editor, ...args),\n    isBlock: (...args) => isBlock(editor, ...args),\n    isEdge: (...args) => isEdge(editor, ...args),\n    isEmpty: (...args) => isEmpty(editor, ...args),\n    isEnd: (...args) => isEnd(editor, ...args),\n    isNormalizing: (...args) => isNormalizing(editor, ...args),\n    isStart: (...args) => isStart(editor, ...args),\n    last: (...args) => last(editor, ...args),\n    leaf: (...args) => leaf(editor, ...args),\n    levels: (...args) => levels(editor, ...args),\n    liftNodes: (...args) => liftNodes(editor, ...args),\n    mergeNodes: (...args) => mergeNodes(editor, ...args),\n    move: (...args) => move(editor, ...args),\n    moveNodes: (...args) => moveNodes(editor, ...args),\n    next: (...args) => next(editor, ...args),\n    node: (...args) => node(editor, ...args),\n    nodes: (...args) => nodes(editor, ...args),\n    normalize: (...args) => normalize(editor, ...args),\n    parent: (...args) => parent(editor, ...args),\n    path: (...args) => path(editor, ...args),\n    pathRef: (...args) => pathRef(editor, ...args),\n    pathRefs: (...args) => pathRefs(editor, ...args),\n    point: (...args) => point(editor, ...args),\n    pointRef: (...args) => pointRef(editor, ...args),\n    pointRefs: (...args) => pointRefs(editor, ...args),\n    positions: (...args) => positions(editor, ...args),\n    previous: (...args) => previous(editor, ...args),\n    range: (...args) => range(editor, ...args),\n    rangeRef: (...args) => rangeRef(editor, ...args),\n    rangeRefs: (...args) => rangeRefs(editor, ...args),\n    removeNodes: (...args) => removeNodes(editor, ...args),\n    select: (...args) => select(editor, ...args),\n    setNodes: (...args) => setNodes(editor, ...args),\n    setNormalizing: (...args) => setNormalizing(editor, ...args),\n    setPoint: (...args) => setPoint(editor, ...args),\n    setSelection: (...args) => setSelection(editor, ...args),\n    splitNodes: (...args) => splitNodes(editor, ...args),\n    start: (...args) => start(editor, ...args),\n    string: (...args) => string(editor, ...args),\n    unhangRange: (...args) => unhangRange(editor, ...args),\n    unsetNodes: (...args) => unsetNodes(editor, ...args),\n    unwrapNodes: (...args) => unwrapNodes(editor, ...args),\n    void: (...args) => getVoid(editor, ...args),\n    withoutNormalizing: (...args) => withoutNormalizing(editor, ...args),\n    wrapNodes: (...args) => wrapNodes(editor, ...args),\n  }\n\n  return editor\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}